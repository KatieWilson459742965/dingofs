// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunk.proto

#include "chunk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_chunk_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QosRequestParas;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QosResponseParas;
}  // namespace protobuf_chunk_2eproto
namespace curve {
namespace chunkserver {
class QosRequestParasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QosRequestParas>
      _instance;
} _QosRequestParas_default_instance_;
class QosResponseParasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QosResponseParas>
      _instance;
} _QosResponseParas_default_instance_;
class ChunkRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkRequest>
      _instance;
} _ChunkRequest_default_instance_;
class ChunkResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkResponse>
      _instance;
} _ChunkResponse_default_instance_;
class ChunkSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkSnapshotRequest>
      _instance;
} _ChunkSnapshotRequest_default_instance_;
class ChunkSnapshotResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkSnapshotResponse>
      _instance;
} _ChunkSnapshotResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace protobuf_chunk_2eproto {
static void InitDefaultsQosRequestParas() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_QosRequestParas_default_instance_;
    new (ptr) ::curve::chunkserver::QosRequestParas();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::QosRequestParas::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QosRequestParas =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQosRequestParas}, {}};

static void InitDefaultsQosResponseParas() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_QosResponseParas_default_instance_;
    new (ptr) ::curve::chunkserver::QosResponseParas();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::QosResponseParas::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QosResponseParas =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQosResponseParas}, {}};

static void InitDefaultsChunkRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ChunkRequest_default_instance_;
    new (ptr) ::curve::chunkserver::ChunkRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ChunkRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChunkRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChunkRequest}, {
      &protobuf_chunk_2eproto::scc_info_QosRequestParas.base,}};

static void InitDefaultsChunkResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ChunkResponse_default_instance_;
    new (ptr) ::curve::chunkserver::ChunkResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ChunkResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChunkResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChunkResponse}, {
      &protobuf_chunk_2eproto::scc_info_QosResponseParas.base,}};

static void InitDefaultsChunkSnapshotRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ChunkSnapshotRequest_default_instance_;
    new (ptr) ::curve::chunkserver::ChunkSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ChunkSnapshotRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChunkSnapshotRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChunkSnapshotRequest}, {
      &protobuf_chunk_2eproto::scc_info_QosRequestParas.base,}};

static void InitDefaultsChunkSnapshotResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ChunkSnapshotResponse_default_instance_;
    new (ptr) ::curve::chunkserver::ChunkSnapshotResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ChunkSnapshotResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChunkSnapshotResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChunkSnapshotResponse}, {
      &protobuf_chunk_2eproto::scc_info_QosResponseParas.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_QosRequestParas.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QosResponseParas.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkSnapshotRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkSnapshotResponse.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::QosRequestParas, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::QosRequestParas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::QosRequestParas, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::QosRequestParas, dmclockdelta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::QosRequestParas, dmclockrho_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::QosResponseParas, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::QosResponseParas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::QosResponseParas, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::QosResponseParas, cost_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, optype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, chunkid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, committedindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkRequest, deltarho_),
  1,
  2,
  4,
  3,
  6,
  5,
  7,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkResponse, redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkResponse, committedindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkResponse, phasecost_),
  3,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotRequest, optype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotRequest, chunkid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotRequest, snapshotid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotRequest, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotRequest, deltarho_),
  1,
  2,
  4,
  3,
  6,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotResponse, redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkSnapshotResponse, phasecost_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::curve::chunkserver::QosRequestParas)},
  { 11, 18, sizeof(::curve::chunkserver::QosResponseParas)},
  { 20, 33, sizeof(::curve::chunkserver::ChunkRequest)},
  { 41, 50, sizeof(::curve::chunkserver::ChunkResponse)},
  { 54, 66, sizeof(::curve::chunkserver::ChunkSnapshotRequest)},
  { 73, 81, sizeof(::curve::chunkserver::ChunkSnapshotResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_QosRequestParas_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_QosResponseParas_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ChunkRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ChunkResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ChunkSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ChunkSnapshotResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "chunk.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013chunk.proto\022\021curve.chunkserver\"M\n\017QosR"
      "equestParas\022\020\n\010clientId\030\001 \001(\r\022\024\n\014dmclock"
      "Delta\030\002 \001(\005\022\022\n\ndmclockRho\030\003 \001(\005\"/\n\020QosRe"
      "sponseParas\022\r\n\005phase\030\001 \001(\005\022\014\n\004cost\030\002 \001(\005"
      "\"\345\001\n\014ChunkRequest\0220\n\006opType\030\001 \002(\0162 .curv"
      "e.chunkserver.CHUNK_OP_TYPE\022\023\n\013logicPool"
      "Id\030\002 \002(\r\022\021\n\tcopysetId\030\003 \002(\r\022\017\n\007chunkId\030\004"
      " \002(\004\022\026\n\016committedIndex\030\005 \001(\004\022\016\n\006offset\030\006"
      " \001(\r\022\014\n\004size\030\007 \001(\r\0224\n\010deltaRho\030\010 \001(\0132\".c"
      "urve.chunkserver.QosRequestParas\"\245\001\n\rChu"
      "nkResponse\0222\n\006status\030\001 \002(\0162\".curve.chunk"
      "server.CHUNK_OP_STATUS\022\020\n\010redirect\030\002 \001(\t"
      "\022\026\n\016committedIndex\030\003 \001(\004\0226\n\tphaseCost\030\004 "
      "\001(\0132#.curve.chunkserver.QosResponseParas"
      "\"\342\001\n\024ChunkSnapshotRequest\0229\n\006opType\030\001 \002("
      "\0162).curve.chunkserver.CHUNK_SNAPSHOT_OP_"
      "TYPE\022\023\n\013logicPoolId\030\002 \002(\r\022\021\n\tcopysetId\030\003"
      " \002(\r\022\017\n\007chunkId\030\004 \002(\004\022\022\n\nsnapshotId\030\005 \002("
      "\004\022\014\n\004size\030\006 \001(\r\0224\n\010deltaRho\030\007 \001(\0132\".curv"
      "e.chunkserver.QosRequestParas\"\236\001\n\025ChunkS"
      "napshotResponse\022;\n\006status\030\001 \002(\0162+.curve."
      "chunkserver.CHUNK_SNAPSHOT_OP_STATUS\022\020\n\010"
      "redirect\030\002 \001(\t\0226\n\tphaseCost\030\003 \001(\0132#.curv"
      "e.chunkserver.QosResponseParas*K\n\rCHUNK_"
      "OP_TYPE\022\023\n\017CHUNK_OP_DELETE\020\000\022\021\n\rCHUNK_OP"
      "_READ\020\001\022\022\n\016CHUNK_OP_WRITE\020\002*\230\002\n\017CHUNK_OP"
      "_STATUS\022\033\n\027CHUNK_OP_STATUS_SUCCESS\020\000\022\036\n\032"
      "CHUNK_OP_STATUS_REDIRECTED\020\001\022\035\n\031CHUNK_OP"
      "_STATUS_DISK_FAIL\020\002\022\034\n\030CHUNK_OP_STATUS_C"
      "RC_FAIL\020\003\022#\n\037CHUNK_OP_STATUS_INVALID_REQ"
      "UEST\020\004\022\033\n\027CHUNK_OP_STATUS_NOSPACE\020\005\022$\n C"
      "HUNK_OP_STATUS_COPYSET_NOTEXIST\020\006\022#\n\037CHU"
      "NK_OP_STATUS_FAILURE_UNKNOWN\020\007*p\n\026CHUNK_"
      "SNAPSHOT_OP_TYPE\022\034\n\030CHUNK_SNAPSHOT_OP_CR"
      "EATE\020\000\022\034\n\030CHUNK_SNAPSHOT_OP_DELETE\020\001\022\032\n\026"
      "CHUNK_SNAPSHOT_OP_READ\020\002*\351\002\n\030CHUNK_SNAPS"
      "HOT_OP_STATUS\022$\n CHUNK_SNAPSHOT_OP_STATU"
      "S_SUCCESS\020\000\022\'\n#CHUNK_SNAPSHOT_OP_STATUS_"
      "REDIRECTED\020\001\022&\n\"CHUNK_SNAPSHOT_OP_STATUS"
      "_DISK_FAIL\020\002\022%\n!CHUNK_SNAPSHOT_OP_STATUS"
      "_CRC_FAIL\020\003\022,\n(CHUNK_SNAPSHOT_OP_STATUS_"
      "INVALID_REQUEST\020\004\022$\n CHUNK_SNAPSHOT_OP_S"
      "TATUS_NOSPACE\020\005\022-\n)CHUNK_SNAPSHOT_OP_STA"
      "TUS_COPYSET_NOTEXIST\020\006\022,\n(CHUNK_SNAPSHOT"
      "_OP_STATUS_FAILURE_UNKNOWN\020\0072\275\004\n\014ChunkSe"
      "rvice\022P\n\013DeleteChunk\022\037.curve.chunkserver"
      ".ChunkRequest\032 .curve.chunkserver.ChunkR"
      "esponse\022N\n\tReadChunk\022\037.curve.chunkserver"
      ".ChunkRequest\032 .curve.chunkserver.ChunkR"
      "esponse\022O\n\nWriteChunk\022\037.curve.chunkserve"
      "r.ChunkRequest\032 .curve.chunkserver.Chunk"
      "Response\022h\n\023CreateChunkSnapshot\022\'.curve."
      "chunkserver.ChunkSnapshotRequest\032(.curve"
      ".chunkserver.ChunkSnapshotResponse\022h\n\023De"
      "leteChunkSnapshot\022\'.curve.chunkserver.Ch"
      "unkSnapshotRequest\032(.curve.chunkserver.C"
      "hunkSnapshotResponse\022f\n\021ReadChunkSnapsho"
      "t\022\'.curve.chunkserver.ChunkSnapshotReque"
      "st\032(.curve.chunkserver.ChunkSnapshotResp"
      "onseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2369);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chunk.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chunk_2eproto
namespace curve {
namespace chunkserver {
const ::google::protobuf::EnumDescriptor* CHUNK_OP_TYPE_descriptor() {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chunk_2eproto::file_level_enum_descriptors[0];
}
bool CHUNK_OP_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHUNK_OP_STATUS_descriptor() {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chunk_2eproto::file_level_enum_descriptors[1];
}
bool CHUNK_OP_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHUNK_SNAPSHOT_OP_TYPE_descriptor() {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chunk_2eproto::file_level_enum_descriptors[2];
}
bool CHUNK_SNAPSHOT_OP_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHUNK_SNAPSHOT_OP_STATUS_descriptor() {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chunk_2eproto::file_level_enum_descriptors[3];
}
bool CHUNK_SNAPSHOT_OP_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void QosRequestParas::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QosRequestParas::kClientIdFieldNumber;
const int QosRequestParas::kDmclockDeltaFieldNumber;
const int QosRequestParas::kDmclockRhoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QosRequestParas::QosRequestParas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunk_2eproto::scc_info_QosRequestParas.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.QosRequestParas)
}
QosRequestParas::QosRequestParas(const QosRequestParas& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clientid_, &from.clientid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dmclockrho_) -
    reinterpret_cast<char*>(&clientid_)) + sizeof(dmclockrho_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.QosRequestParas)
}

void QosRequestParas::SharedCtor() {
  ::memset(&clientid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dmclockrho_) -
      reinterpret_cast<char*>(&clientid_)) + sizeof(dmclockrho_));
}

QosRequestParas::~QosRequestParas() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.QosRequestParas)
  SharedDtor();
}

void QosRequestParas::SharedDtor() {
}

void QosRequestParas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QosRequestParas::descriptor() {
  ::protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QosRequestParas& QosRequestParas::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunk_2eproto::scc_info_QosRequestParas.base);
  return *internal_default_instance();
}


void QosRequestParas::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.QosRequestParas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&clientid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dmclockrho_) -
        reinterpret_cast<char*>(&clientid_)) + sizeof(dmclockrho_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QosRequestParas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.QosRequestParas)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_clientid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dmclockDelta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dmclockdelta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dmclockdelta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dmclockRho = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dmclockrho();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dmclockrho_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.QosRequestParas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.QosRequestParas)
  return false;
#undef DO_
}

void QosRequestParas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.QosRequestParas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // optional int32 dmclockDelta = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dmclockdelta(), output);
  }

  // optional int32 dmclockRho = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dmclockrho(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.QosRequestParas)
}

::google::protobuf::uint8* QosRequestParas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.QosRequestParas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // optional int32 dmclockDelta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dmclockdelta(), target);
  }

  // optional int32 dmclockRho = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dmclockrho(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.QosRequestParas)
  return target;
}

size_t QosRequestParas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.QosRequestParas)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 clientId = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional int32 dmclockDelta = 2;
    if (has_dmclockdelta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmclockdelta());
    }

    // optional int32 dmclockRho = 3;
    if (has_dmclockrho()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dmclockrho());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QosRequestParas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.QosRequestParas)
  GOOGLE_DCHECK_NE(&from, this);
  const QosRequestParas* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QosRequestParas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.QosRequestParas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.QosRequestParas)
    MergeFrom(*source);
  }
}

void QosRequestParas::MergeFrom(const QosRequestParas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.QosRequestParas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_ = from.clientid_;
    }
    if (cached_has_bits & 0x00000002u) {
      dmclockdelta_ = from.dmclockdelta_;
    }
    if (cached_has_bits & 0x00000004u) {
      dmclockrho_ = from.dmclockrho_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QosRequestParas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.QosRequestParas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QosRequestParas::CopyFrom(const QosRequestParas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.QosRequestParas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QosRequestParas::IsInitialized() const {
  return true;
}

void QosRequestParas::Swap(QosRequestParas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QosRequestParas::InternalSwap(QosRequestParas* other) {
  using std::swap;
  swap(clientid_, other->clientid_);
  swap(dmclockdelta_, other->dmclockdelta_);
  swap(dmclockrho_, other->dmclockrho_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QosRequestParas::GetMetadata() const {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QosResponseParas::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QosResponseParas::kPhaseFieldNumber;
const int QosResponseParas::kCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QosResponseParas::QosResponseParas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunk_2eproto::scc_info_QosResponseParas.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.QosResponseParas)
}
QosResponseParas::QosResponseParas(const QosResponseParas& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.QosResponseParas)
}

void QosResponseParas::SharedCtor() {
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(cost_));
}

QosResponseParas::~QosResponseParas() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.QosResponseParas)
  SharedDtor();
}

void QosResponseParas::SharedDtor() {
}

void QosResponseParas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QosResponseParas::descriptor() {
  ::protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QosResponseParas& QosResponseParas::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunk_2eproto::scc_info_QosResponseParas.base);
  return *internal_default_instance();
}


void QosResponseParas::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.QosResponseParas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cost_) -
        reinterpret_cast<char*>(&phase_)) + sizeof(cost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QosResponseParas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.QosResponseParas)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.QosResponseParas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.QosResponseParas)
  return false;
#undef DO_
}

void QosResponseParas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.QosResponseParas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 phase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phase(), output);
  }

  // optional int32 cost = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.QosResponseParas)
}

::google::protobuf::uint8* QosResponseParas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.QosResponseParas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phase(), target);
  }

  // optional int32 cost = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.QosResponseParas)
  return target;
}

size_t QosResponseParas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.QosResponseParas)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phase());
    }

    // optional int32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QosResponseParas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.QosResponseParas)
  GOOGLE_DCHECK_NE(&from, this);
  const QosResponseParas* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QosResponseParas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.QosResponseParas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.QosResponseParas)
    MergeFrom(*source);
  }
}

void QosResponseParas::MergeFrom(const QosResponseParas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.QosResponseParas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      cost_ = from.cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QosResponseParas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.QosResponseParas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QosResponseParas::CopyFrom(const QosResponseParas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.QosResponseParas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QosResponseParas::IsInitialized() const {
  return true;
}

void QosResponseParas::Swap(QosResponseParas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QosResponseParas::InternalSwap(QosResponseParas* other) {
  using std::swap;
  swap(phase_, other->phase_);
  swap(cost_, other->cost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QosResponseParas::GetMetadata() const {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChunkRequest::InitAsDefaultInstance() {
  ::curve::chunkserver::_ChunkRequest_default_instance_._instance.get_mutable()->deltarho_ = const_cast< ::curve::chunkserver::QosRequestParas*>(
      ::curve::chunkserver::QosRequestParas::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkRequest::kOpTypeFieldNumber;
const int ChunkRequest::kLogicPoolIdFieldNumber;
const int ChunkRequest::kCopysetIdFieldNumber;
const int ChunkRequest::kChunkIdFieldNumber;
const int ChunkRequest::kCommittedIndexFieldNumber;
const int ChunkRequest::kOffsetFieldNumber;
const int ChunkRequest::kSizeFieldNumber;
const int ChunkRequest::kDeltaRhoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkRequest::ChunkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunk_2eproto::scc_info_ChunkRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ChunkRequest)
}
ChunkRequest::ChunkRequest(const ChunkRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_deltarho()) {
    deltarho_ = new ::curve::chunkserver::QosRequestParas(*from.deltarho_);
  } else {
    deltarho_ = NULL;
  }
  ::memcpy(&optype_, &from.optype_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&optype_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ChunkRequest)
}

void ChunkRequest::SharedCtor() {
  ::memset(&deltarho_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&deltarho_)) + sizeof(size_));
}

ChunkRequest::~ChunkRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ChunkRequest)
  SharedDtor();
}

void ChunkRequest::SharedDtor() {
  if (this != internal_default_instance()) delete deltarho_;
}

void ChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkRequest::descriptor() {
  ::protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkRequest& ChunkRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunk_2eproto::scc_info_ChunkRequest.base);
  return *internal_default_instance();
}


void ChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(deltarho_ != NULL);
    deltarho_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&optype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&optype_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ChunkRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .curve.chunkserver.CHUNK_OP_TYPE opType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::CHUNK_OP_TYPE_IsValid(value)) {
            set_optype(static_cast< ::curve::chunkserver::CHUNK_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 logicPoolId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 chunkId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_chunkid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 committedIndex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_committedindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &committedindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 offset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .curve.chunkserver.QosRequestParas deltaRho = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deltarho()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ChunkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ChunkRequest)
  return false;
#undef DO_
}

void ChunkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNK_OP_TYPE opType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->optype(), output);
  }

  // required uint32 logicPoolId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->copysetid(), output);
  }

  // required uint64 chunkId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->chunkid(), output);
  }

  // optional uint64 committedIndex = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->committedindex(), output);
  }

  // optional uint32 offset = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->offset(), output);
  }

  // optional uint32 size = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->size(), output);
  }

  // optional .curve.chunkserver.QosRequestParas deltaRho = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_deltarho(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ChunkRequest)
}

::google::protobuf::uint8* ChunkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ChunkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNK_OP_TYPE opType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->optype(), target);
  }

  // required uint32 logicPoolId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->copysetid(), target);
  }

  // required uint64 chunkId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->chunkid(), target);
  }

  // optional uint64 committedIndex = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->committedindex(), target);
  }

  // optional uint32 offset = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->offset(), target);
  }

  // optional uint32 size = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->size(), target);
  }

  // optional .curve.chunkserver.QosRequestParas deltaRho = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_deltarho(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ChunkRequest)
  return target;
}

size_t ChunkRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.ChunkRequest)
  size_t total_size = 0;

  if (has_optype()) {
    // required .curve.chunkserver.CHUNK_OP_TYPE opType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
  }

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_chunkid()) {
    // required uint64 chunkId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chunkid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  return total_size;
}
size_t ChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ChunkRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .curve.chunkserver.CHUNK_OP_TYPE opType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());

    // required uint32 logicPoolId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint64 chunkId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chunkid());

    // required uint32 copysetId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .curve.chunkserver.QosRequestParas deltaRho = 8;
  if (has_deltarho()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deltarho_);
  }

  if (_has_bits_[0 / 32] & 224u) {
    // optional uint32 offset = 6;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint64 committedIndex = 5;
    if (has_committedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->committedindex());
    }

    // optional uint32 size = 7;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ChunkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ChunkRequest)
    MergeFrom(*source);
  }
}

void ChunkRequest::MergeFrom(const ChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_deltarho()->::curve::chunkserver::QosRequestParas::MergeFrom(from.deltarho());
    }
    if (cached_has_bits & 0x00000002u) {
      optype_ = from.optype_;
    }
    if (cached_has_bits & 0x00000004u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      chunkid_ = from.chunkid_;
    }
    if (cached_has_bits & 0x00000010u) {
      copysetid_ = from.copysetid_;
    }
    if (cached_has_bits & 0x00000020u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000040u) {
      committedindex_ = from.committedindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChunkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkRequest::CopyFrom(const ChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  return true;
}

void ChunkRequest::Swap(ChunkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkRequest::InternalSwap(ChunkRequest* other) {
  using std::swap;
  swap(deltarho_, other->deltarho_);
  swap(optype_, other->optype_);
  swap(logicpoolid_, other->logicpoolid_);
  swap(chunkid_, other->chunkid_);
  swap(copysetid_, other->copysetid_);
  swap(offset_, other->offset_);
  swap(committedindex_, other->committedindex_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkRequest::GetMetadata() const {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChunkResponse::InitAsDefaultInstance() {
  ::curve::chunkserver::_ChunkResponse_default_instance_._instance.get_mutable()->phasecost_ = const_cast< ::curve::chunkserver::QosResponseParas*>(
      ::curve::chunkserver::QosResponseParas::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkResponse::kStatusFieldNumber;
const int ChunkResponse::kRedirectFieldNumber;
const int ChunkResponse::kCommittedIndexFieldNumber;
const int ChunkResponse::kPhaseCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkResponse::ChunkResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunk_2eproto::scc_info_ChunkResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ChunkResponse)
}
ChunkResponse::ChunkResponse(const ChunkResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect()) {
    redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
  }
  if (from.has_phasecost()) {
    phasecost_ = new ::curve::chunkserver::QosResponseParas(*from.phasecost_);
  } else {
    phasecost_ = NULL;
  }
  ::memcpy(&committedindex_, &from.committedindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&committedindex_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ChunkResponse)
}

void ChunkResponse::SharedCtor() {
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&phasecost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&phasecost_)) + sizeof(status_));
}

ChunkResponse::~ChunkResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ChunkResponse)
  SharedDtor();
}

void ChunkResponse::SharedDtor() {
  redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete phasecost_;
}

void ChunkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkResponse::descriptor() {
  ::protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkResponse& ChunkResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunk_2eproto::scc_info_ChunkResponse.base);
  return *internal_default_instance();
}


void ChunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ChunkResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      redirect_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(phasecost_ != NULL);
      phasecost_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&committedindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&committedindex_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ChunkResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .curve.chunkserver.CHUNK_OP_STATUS status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::CHUNK_OP_STATUS_IsValid(value)) {
            set_status(static_cast< ::curve::chunkserver::CHUNK_OP_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect().data(), static_cast<int>(this->redirect().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ChunkResponse.redirect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 committedIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_committedindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &committedindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .curve.chunkserver.QosResponseParas phaseCost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phasecost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ChunkResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ChunkResponse)
  return false;
#undef DO_
}

void ChunkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ChunkResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNK_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string redirect = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), static_cast<int>(this->redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChunkResponse.redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect(), output);
  }

  // optional uint64 committedIndex = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->committedindex(), output);
  }

  // optional .curve.chunkserver.QosResponseParas phaseCost = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_phasecost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ChunkResponse)
}

::google::protobuf::uint8* ChunkResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ChunkResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNK_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string redirect = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), static_cast<int>(this->redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChunkResponse.redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect(), target);
  }

  // optional uint64 committedIndex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->committedindex(), target);
  }

  // optional .curve.chunkserver.QosResponseParas phaseCost = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_phasecost(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ChunkResponse)
  return target;
}

size_t ChunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ChunkResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .curve.chunkserver.CHUNK_OP_STATUS status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string redirect = 2;
    if (has_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect());
    }

    // optional .curve.chunkserver.QosResponseParas phaseCost = 4;
    if (has_phasecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *phasecost_);
    }

    // optional uint64 committedIndex = 3;
    if (has_committedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->committedindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ChunkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ChunkResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ChunkResponse)
    MergeFrom(*source);
  }
}

void ChunkResponse::MergeFrom(const ChunkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ChunkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_redirect();
      redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_phasecost()->::curve::chunkserver::QosResponseParas::MergeFrom(from.phasecost());
    }
    if (cached_has_bits & 0x00000004u) {
      committedindex_ = from.committedindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChunkResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkResponse::CopyFrom(const ChunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void ChunkResponse::Swap(ChunkResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkResponse::InternalSwap(ChunkResponse* other) {
  using std::swap;
  redirect_.Swap(&other->redirect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(phasecost_, other->phasecost_);
  swap(committedindex_, other->committedindex_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkResponse::GetMetadata() const {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChunkSnapshotRequest::InitAsDefaultInstance() {
  ::curve::chunkserver::_ChunkSnapshotRequest_default_instance_._instance.get_mutable()->deltarho_ = const_cast< ::curve::chunkserver::QosRequestParas*>(
      ::curve::chunkserver::QosRequestParas::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkSnapshotRequest::kOpTypeFieldNumber;
const int ChunkSnapshotRequest::kLogicPoolIdFieldNumber;
const int ChunkSnapshotRequest::kCopysetIdFieldNumber;
const int ChunkSnapshotRequest::kChunkIdFieldNumber;
const int ChunkSnapshotRequest::kSnapshotIdFieldNumber;
const int ChunkSnapshotRequest::kSizeFieldNumber;
const int ChunkSnapshotRequest::kDeltaRhoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkSnapshotRequest::ChunkSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunk_2eproto::scc_info_ChunkSnapshotRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ChunkSnapshotRequest)
}
ChunkSnapshotRequest::ChunkSnapshotRequest(const ChunkSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_deltarho()) {
    deltarho_ = new ::curve::chunkserver::QosRequestParas(*from.deltarho_);
  } else {
    deltarho_ = NULL;
  }
  ::memcpy(&optype_, &from.optype_,
    static_cast<size_t>(reinterpret_cast<char*>(&snapshotid_) -
    reinterpret_cast<char*>(&optype_)) + sizeof(snapshotid_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ChunkSnapshotRequest)
}

void ChunkSnapshotRequest::SharedCtor() {
  ::memset(&deltarho_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&snapshotid_) -
      reinterpret_cast<char*>(&deltarho_)) + sizeof(snapshotid_));
}

ChunkSnapshotRequest::~ChunkSnapshotRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ChunkSnapshotRequest)
  SharedDtor();
}

void ChunkSnapshotRequest::SharedDtor() {
  if (this != internal_default_instance()) delete deltarho_;
}

void ChunkSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkSnapshotRequest::descriptor() {
  ::protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkSnapshotRequest& ChunkSnapshotRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunk_2eproto::scc_info_ChunkSnapshotRequest.base);
  return *internal_default_instance();
}


void ChunkSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ChunkSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(deltarho_ != NULL);
    deltarho_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&optype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&snapshotid_) -
        reinterpret_cast<char*>(&optype_)) + sizeof(snapshotid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ChunkSnapshotRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_TYPE opType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE_IsValid(value)) {
            set_optype(static_cast< ::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 logicPoolId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 chunkId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_chunkid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 snapshotId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_snapshotid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &snapshotid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .curve.chunkserver.QosRequestParas deltaRho = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deltarho()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ChunkSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ChunkSnapshotRequest)
  return false;
#undef DO_
}

void ChunkSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ChunkSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_TYPE opType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->optype(), output);
  }

  // required uint32 logicPoolId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->copysetid(), output);
  }

  // required uint64 chunkId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->chunkid(), output);
  }

  // required uint64 snapshotId = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->snapshotid(), output);
  }

  // optional uint32 size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->size(), output);
  }

  // optional .curve.chunkserver.QosRequestParas deltaRho = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_deltarho(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ChunkSnapshotRequest)
}

::google::protobuf::uint8* ChunkSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ChunkSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_TYPE opType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->optype(), target);
  }

  // required uint32 logicPoolId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->copysetid(), target);
  }

  // required uint64 chunkId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->chunkid(), target);
  }

  // required uint64 snapshotId = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->snapshotid(), target);
  }

  // optional uint32 size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->size(), target);
  }

  // optional .curve.chunkserver.QosRequestParas deltaRho = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_deltarho(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ChunkSnapshotRequest)
  return target;
}

size_t ChunkSnapshotRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.ChunkSnapshotRequest)
  size_t total_size = 0;

  if (has_optype()) {
    // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_TYPE opType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());
  }

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_chunkid()) {
    // required uint64 chunkId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chunkid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  if (has_snapshotid()) {
    // required uint64 snapshotId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->snapshotid());
  }

  return total_size;
}
size_t ChunkSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ChunkSnapshotRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000005e) ^ 0x0000005e) == 0) {  // All required fields are present.
    // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_TYPE opType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->optype());

    // required uint32 logicPoolId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint64 chunkId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chunkid());

    // required uint32 copysetId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

    // required uint64 snapshotId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->snapshotid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .curve.chunkserver.QosRequestParas deltaRho = 7;
  if (has_deltarho()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deltarho_);
  }

  // optional uint32 size = 6;
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ChunkSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkSnapshotRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkSnapshotRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ChunkSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ChunkSnapshotRequest)
    MergeFrom(*source);
  }
}

void ChunkSnapshotRequest::MergeFrom(const ChunkSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ChunkSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_deltarho()->::curve::chunkserver::QosRequestParas::MergeFrom(from.deltarho());
    }
    if (cached_has_bits & 0x00000002u) {
      optype_ = from.optype_;
    }
    if (cached_has_bits & 0x00000004u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      chunkid_ = from.chunkid_;
    }
    if (cached_has_bits & 0x00000010u) {
      copysetid_ = from.copysetid_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000040u) {
      snapshotid_ = from.snapshotid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChunkSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ChunkSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkSnapshotRequest::CopyFrom(const ChunkSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ChunkSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkSnapshotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005e) != 0x0000005e) return false;
  return true;
}

void ChunkSnapshotRequest::Swap(ChunkSnapshotRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkSnapshotRequest::InternalSwap(ChunkSnapshotRequest* other) {
  using std::swap;
  swap(deltarho_, other->deltarho_);
  swap(optype_, other->optype_);
  swap(logicpoolid_, other->logicpoolid_);
  swap(chunkid_, other->chunkid_);
  swap(copysetid_, other->copysetid_);
  swap(size_, other->size_);
  swap(snapshotid_, other->snapshotid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkSnapshotRequest::GetMetadata() const {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChunkSnapshotResponse::InitAsDefaultInstance() {
  ::curve::chunkserver::_ChunkSnapshotResponse_default_instance_._instance.get_mutable()->phasecost_ = const_cast< ::curve::chunkserver::QosResponseParas*>(
      ::curve::chunkserver::QosResponseParas::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkSnapshotResponse::kStatusFieldNumber;
const int ChunkSnapshotResponse::kRedirectFieldNumber;
const int ChunkSnapshotResponse::kPhaseCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkSnapshotResponse::ChunkSnapshotResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunk_2eproto::scc_info_ChunkSnapshotResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ChunkSnapshotResponse)
}
ChunkSnapshotResponse::ChunkSnapshotResponse(const ChunkSnapshotResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect()) {
    redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
  }
  if (from.has_phasecost()) {
    phasecost_ = new ::curve::chunkserver::QosResponseParas(*from.phasecost_);
  } else {
    phasecost_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ChunkSnapshotResponse)
}

void ChunkSnapshotResponse::SharedCtor() {
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&phasecost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&phasecost_)) + sizeof(status_));
}

ChunkSnapshotResponse::~ChunkSnapshotResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ChunkSnapshotResponse)
  SharedDtor();
}

void ChunkSnapshotResponse::SharedDtor() {
  redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete phasecost_;
}

void ChunkSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkSnapshotResponse::descriptor() {
  ::protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkSnapshotResponse& ChunkSnapshotResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunk_2eproto::scc_info_ChunkSnapshotResponse.base);
  return *internal_default_instance();
}


void ChunkSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ChunkSnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      redirect_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(phasecost_ != NULL);
      phasecost_->Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkSnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ChunkSnapshotResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_STATUS status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS_IsValid(value)) {
            set_status(static_cast< ::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect().data(), static_cast<int>(this->redirect().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ChunkSnapshotResponse.redirect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .curve.chunkserver.QosResponseParas phaseCost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phasecost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ChunkSnapshotResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ChunkSnapshotResponse)
  return false;
#undef DO_
}

void ChunkSnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ChunkSnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string redirect = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), static_cast<int>(this->redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChunkSnapshotResponse.redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect(), output);
  }

  // optional .curve.chunkserver.QosResponseParas phaseCost = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_phasecost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ChunkSnapshotResponse)
}

::google::protobuf::uint8* ChunkSnapshotResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ChunkSnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string redirect = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), static_cast<int>(this->redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChunkSnapshotResponse.redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect(), target);
  }

  // optional .curve.chunkserver.QosResponseParas phaseCost = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_phasecost(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ChunkSnapshotResponse)
  return target;
}

size_t ChunkSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ChunkSnapshotResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_STATUS status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string redirect = 2;
    if (has_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect());
    }

    // optional .curve.chunkserver.QosResponseParas phaseCost = 3;
    if (has_phasecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *phasecost_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkSnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ChunkSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkSnapshotResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkSnapshotResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ChunkSnapshotResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ChunkSnapshotResponse)
    MergeFrom(*source);
  }
}

void ChunkSnapshotResponse::MergeFrom(const ChunkSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ChunkSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_redirect();
      redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_phasecost()->::curve::chunkserver::QosResponseParas::MergeFrom(from.phasecost());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChunkSnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ChunkSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkSnapshotResponse::CopyFrom(const ChunkSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ChunkSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkSnapshotResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void ChunkSnapshotResponse::Swap(ChunkSnapshotResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkSnapshotResponse::InternalSwap(ChunkSnapshotResponse* other) {
  using std::swap;
  redirect_.Swap(&other->redirect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(phasecost_, other->phasecost_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkSnapshotResponse::GetMetadata() const {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunk_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ChunkService::~ChunkService() {}

const ::google::protobuf::ServiceDescriptor* ChunkService::descriptor() {
  protobuf_chunk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chunk_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* ChunkService::GetDescriptor() {
  return descriptor();
}

void ChunkService::DeleteChunk(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ChunkRequest*,
                         ::curve::chunkserver::ChunkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteChunk() not implemented.");
  done->Run();
}

void ChunkService::ReadChunk(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ChunkRequest*,
                         ::curve::chunkserver::ChunkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReadChunk() not implemented.");
  done->Run();
}

void ChunkService::WriteChunk(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ChunkRequest*,
                         ::curve::chunkserver::ChunkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WriteChunk() not implemented.");
  done->Run();
}

void ChunkService::CreateChunkSnapshot(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ChunkSnapshotRequest*,
                         ::curve::chunkserver::ChunkSnapshotResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateChunkSnapshot() not implemented.");
  done->Run();
}

void ChunkService::DeleteChunkSnapshot(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ChunkSnapshotRequest*,
                         ::curve::chunkserver::ChunkSnapshotResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteChunkSnapshot() not implemented.");
  done->Run();
}

void ChunkService::ReadChunkSnapshot(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ChunkSnapshotRequest*,
                         ::curve::chunkserver::ChunkSnapshotResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReadChunkSnapshot() not implemented.");
  done->Run();
}

void ChunkService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_chunk_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      DeleteChunk(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ChunkRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ChunkResponse*>(response),
             done);
      break;
    case 1:
      ReadChunk(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ChunkRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ChunkResponse*>(response),
             done);
      break;
    case 2:
      WriteChunk(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ChunkRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ChunkResponse*>(response),
             done);
      break;
    case 3:
      CreateChunkSnapshot(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ChunkSnapshotRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ChunkSnapshotResponse*>(response),
             done);
      break;
    case 4:
      DeleteChunkSnapshot(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ChunkSnapshotRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ChunkSnapshotResponse*>(response),
             done);
      break;
    case 5:
      ReadChunkSnapshot(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ChunkSnapshotRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ChunkSnapshotResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChunkService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::ChunkRequest::default_instance();
    case 1:
      return ::curve::chunkserver::ChunkRequest::default_instance();
    case 2:
      return ::curve::chunkserver::ChunkRequest::default_instance();
    case 3:
      return ::curve::chunkserver::ChunkSnapshotRequest::default_instance();
    case 4:
      return ::curve::chunkserver::ChunkSnapshotRequest::default_instance();
    case 5:
      return ::curve::chunkserver::ChunkSnapshotRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ChunkService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::ChunkResponse::default_instance();
    case 1:
      return ::curve::chunkserver::ChunkResponse::default_instance();
    case 2:
      return ::curve::chunkserver::ChunkResponse::default_instance();
    case 3:
      return ::curve::chunkserver::ChunkSnapshotResponse::default_instance();
    case 4:
      return ::curve::chunkserver::ChunkSnapshotResponse::default_instance();
    case 5:
      return ::curve::chunkserver::ChunkSnapshotResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChunkService_Stub::ChunkService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChunkService_Stub::ChunkService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChunkService_Stub::~ChunkService_Stub() {
  if (owns_channel_) delete channel_;
}

void ChunkService_Stub::DeleteChunk(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ChunkRequest* request,
                              ::curve::chunkserver::ChunkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChunkService_Stub::ReadChunk(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ChunkRequest* request,
                              ::curve::chunkserver::ChunkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ChunkService_Stub::WriteChunk(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ChunkRequest* request,
                              ::curve::chunkserver::ChunkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ChunkService_Stub::CreateChunkSnapshot(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ChunkSnapshotRequest* request,
                              ::curve::chunkserver::ChunkSnapshotResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ChunkService_Stub::DeleteChunkSnapshot(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ChunkSnapshotRequest* request,
                              ::curve::chunkserver::ChunkSnapshotResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ChunkService_Stub::ReadChunkSnapshot(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ChunkSnapshotRequest* request,
                              ::curve::chunkserver::ChunkSnapshotResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::QosRequestParas* Arena::CreateMaybeMessage< ::curve::chunkserver::QosRequestParas >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::QosRequestParas >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::QosResponseParas* Arena::CreateMaybeMessage< ::curve::chunkserver::QosResponseParas >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::QosResponseParas >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ChunkRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::ChunkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ChunkRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ChunkResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::ChunkResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ChunkResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ChunkSnapshotRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::ChunkSnapshotRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ChunkSnapshotRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ChunkSnapshotResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::ChunkSnapshotResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ChunkSnapshotResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
