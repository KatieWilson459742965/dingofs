// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/integrity.proto

#ifndef PROTOBUF_INCLUDED_proto_2fintegrity_2eproto
#define PROTOBUF_INCLUDED_proto_2fintegrity_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fintegrity_2eproto 

namespace protobuf_proto_2fintegrity_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fintegrity_2eproto
namespace curve {
namespace chunkserver {
class IntegrityJob;
class IntegrityJobDefaultTypeInternal;
extern IntegrityJobDefaultTypeInternal _IntegrityJob_default_instance_;
class IntegrityRequest;
class IntegrityRequestDefaultTypeInternal;
extern IntegrityRequestDefaultTypeInternal _IntegrityRequest_default_instance_;
class IntegrityResponse;
class IntegrityResponseDefaultTypeInternal;
extern IntegrityResponseDefaultTypeInternal _IntegrityResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> ::curve::chunkserver::IntegrityJob* Arena::CreateMaybeMessage<::curve::chunkserver::IntegrityJob>(Arena*);
template<> ::curve::chunkserver::IntegrityRequest* Arena::CreateMaybeMessage<::curve::chunkserver::IntegrityRequest>(Arena*);
template<> ::curve::chunkserver::IntegrityResponse* Arena::CreateMaybeMessage<::curve::chunkserver::IntegrityResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace curve {
namespace chunkserver {

enum INTEGRITY_JOB_STATE {
  INTEGRITY_OP_STATE_WAITING = 0,
  INTEGRITY_OP_STATE_RUNNING = 1,
  INTEGRITY_OP_STATE_CANCELED = 2,
  INTEGRITY_OP_STATE_FINISHED = 3,
  INTEGRITY_OP_STATE_PAUSED = 4,
  INTEGRITY_OP_STATE_FAILED = 5
};
bool INTEGRITY_JOB_STATE_IsValid(int value);
const INTEGRITY_JOB_STATE INTEGRITY_JOB_STATE_MIN = INTEGRITY_OP_STATE_WAITING;
const INTEGRITY_JOB_STATE INTEGRITY_JOB_STATE_MAX = INTEGRITY_OP_STATE_FAILED;
const int INTEGRITY_JOB_STATE_ARRAYSIZE = INTEGRITY_JOB_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* INTEGRITY_JOB_STATE_descriptor();
inline const ::std::string& INTEGRITY_JOB_STATE_Name(INTEGRITY_JOB_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    INTEGRITY_JOB_STATE_descriptor(), value);
}
inline bool INTEGRITY_JOB_STATE_Parse(
    const ::std::string& name, INTEGRITY_JOB_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<INTEGRITY_JOB_STATE>(
    INTEGRITY_JOB_STATE_descriptor(), name, value);
}
enum INTEGRITY_OP_STATUS {
  INTEGRITY_OP_STATUS_SUCCESS = 0,
  INTEGRITY_OP_STATUS_FAILURE_UNKNOWN = 1
};
bool INTEGRITY_OP_STATUS_IsValid(int value);
const INTEGRITY_OP_STATUS INTEGRITY_OP_STATUS_MIN = INTEGRITY_OP_STATUS_SUCCESS;
const INTEGRITY_OP_STATUS INTEGRITY_OP_STATUS_MAX = INTEGRITY_OP_STATUS_FAILURE_UNKNOWN;
const int INTEGRITY_OP_STATUS_ARRAYSIZE = INTEGRITY_OP_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* INTEGRITY_OP_STATUS_descriptor();
inline const ::std::string& INTEGRITY_OP_STATUS_Name(INTEGRITY_OP_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    INTEGRITY_OP_STATUS_descriptor(), value);
}
inline bool INTEGRITY_OP_STATUS_Parse(
    const ::std::string& name, INTEGRITY_OP_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<INTEGRITY_OP_STATUS>(
    INTEGRITY_OP_STATUS_descriptor(), name, value);
}
// ===================================================================

class IntegrityJob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.IntegrityJob) */ {
 public:
  IntegrityJob();
  virtual ~IntegrityJob();

  IntegrityJob(const IntegrityJob& from);

  inline IntegrityJob& operator=(const IntegrityJob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntegrityJob(IntegrityJob&& from) noexcept
    : IntegrityJob() {
    *this = ::std::move(from);
  }

  inline IntegrityJob& operator=(IntegrityJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegrityJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntegrityJob* internal_default_instance() {
    return reinterpret_cast<const IntegrityJob*>(
               &_IntegrityJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IntegrityJob* other);
  friend void swap(IntegrityJob& a, IntegrityJob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntegrityJob* New() const final {
    return CreateMaybeMessage<IntegrityJob>(NULL);
  }

  IntegrityJob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntegrityJob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntegrityJob& from);
  void MergeFrom(const IntegrityJob& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegrityJob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 copyset = 2;
  bool has_copyset() const;
  void clear_copyset();
  static const int kCopysetFieldNumber = 2;
  ::google::protobuf::int32 copyset() const;
  void set_copyset(::google::protobuf::int32 value);

  // required .curve.chunkserver.INTEGRITY_JOB_STATE state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::curve::chunkserver::INTEGRITY_JOB_STATE state() const;
  void set_state(::curve::chunkserver::INTEGRITY_JOB_STATE value);

  // required int32 progress = 4;
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 4;
  ::google::protobuf::int32 progress() const;
  void set_progress(::google::protobuf::int32 value);

  // required int32 sched_time = 5;
  bool has_sched_time() const;
  void clear_sched_time();
  static const int kSchedTimeFieldNumber = 5;
  ::google::protobuf::int32 sched_time() const;
  void set_sched_time(::google::protobuf::int32 value);

  // required int32 start_time = 6;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  ::google::protobuf::int32 start_time() const;
  void set_start_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.IntegrityJob)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_copyset();
  void clear_has_copyset();
  void set_has_state();
  void clear_has_state();
  void set_has_progress();
  void clear_has_progress();
  void set_has_sched_time();
  void clear_has_sched_time();
  void set_has_start_time();
  void clear_has_start_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 copyset_;
  int state_;
  ::google::protobuf::int32 progress_;
  ::google::protobuf::int32 sched_time_;
  ::google::protobuf::int32 start_time_;
  friend struct ::protobuf_proto_2fintegrity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IntegrityRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.IntegrityRequest) */ {
 public:
  IntegrityRequest();
  virtual ~IntegrityRequest();

  IntegrityRequest(const IntegrityRequest& from);

  inline IntegrityRequest& operator=(const IntegrityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntegrityRequest(IntegrityRequest&& from) noexcept
    : IntegrityRequest() {
    *this = ::std::move(from);
  }

  inline IntegrityRequest& operator=(IntegrityRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegrityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntegrityRequest* internal_default_instance() {
    return reinterpret_cast<const IntegrityRequest*>(
               &_IntegrityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IntegrityRequest* other);
  friend void swap(IntegrityRequest& a, IntegrityRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntegrityRequest* New() const final {
    return CreateMaybeMessage<IntegrityRequest>(NULL);
  }

  IntegrityRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntegrityRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntegrityRequest& from);
  void MergeFrom(const IntegrityRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegrityRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .curve.chunkserver.IntegrityJob job = 1;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 1;
  private:
  const ::curve::chunkserver::IntegrityJob& _internal_job() const;
  public:
  const ::curve::chunkserver::IntegrityJob& job() const;
  ::curve::chunkserver::IntegrityJob* release_job();
  ::curve::chunkserver::IntegrityJob* mutable_job();
  void set_allocated_job(::curve::chunkserver::IntegrityJob* job);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.IntegrityRequest)
 private:
  void set_has_job();
  void clear_has_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::curve::chunkserver::IntegrityJob* job_;
  friend struct ::protobuf_proto_2fintegrity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IntegrityResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.IntegrityResponse) */ {
 public:
  IntegrityResponse();
  virtual ~IntegrityResponse();

  IntegrityResponse(const IntegrityResponse& from);

  inline IntegrityResponse& operator=(const IntegrityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntegrityResponse(IntegrityResponse&& from) noexcept
    : IntegrityResponse() {
    *this = ::std::move(from);
  }

  inline IntegrityResponse& operator=(IntegrityResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegrityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntegrityResponse* internal_default_instance() {
    return reinterpret_cast<const IntegrityResponse*>(
               &_IntegrityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(IntegrityResponse* other);
  friend void swap(IntegrityResponse& a, IntegrityResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntegrityResponse* New() const final {
    return CreateMaybeMessage<IntegrityResponse>(NULL);
  }

  IntegrityResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntegrityResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntegrityResponse& from);
  void MergeFrom(const IntegrityResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegrityResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .curve.chunkserver.IntegrityJob job = 2;
  int job_size() const;
  void clear_job();
  static const int kJobFieldNumber = 2;
  ::curve::chunkserver::IntegrityJob* mutable_job(int index);
  ::google::protobuf::RepeatedPtrField< ::curve::chunkserver::IntegrityJob >*
      mutable_job();
  const ::curve::chunkserver::IntegrityJob& job(int index) const;
  ::curve::chunkserver::IntegrityJob* add_job();
  const ::google::protobuf::RepeatedPtrField< ::curve::chunkserver::IntegrityJob >&
      job() const;

  // required .curve.chunkserver.INTEGRITY_OP_STATUS status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::curve::chunkserver::INTEGRITY_OP_STATUS status() const;
  void set_status(::curve::chunkserver::INTEGRITY_OP_STATUS value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.IntegrityResponse)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::curve::chunkserver::IntegrityJob > job_;
  int status_;
  friend struct ::protobuf_proto_2fintegrity_2eproto::TableStruct;
};
// ===================================================================

class IntegrityService_Stub;

class IntegrityService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline IntegrityService() {};
 public:
  virtual ~IntegrityService();

  typedef IntegrityService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void ScheduleJob(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CancelJob(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void PauseJob(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ResumeJob(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ListJobs(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IntegrityService);
};

class IntegrityService_Stub : public IntegrityService {
 public:
  IntegrityService_Stub(::google::protobuf::RpcChannel* channel);
  IntegrityService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~IntegrityService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements IntegrityService ------------------------------------------

  void ScheduleJob(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);
  void CancelJob(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);
  void PauseJob(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);
  void ResumeJob(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);
  void ListJobs(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::IntegrityRequest* request,
                       ::curve::chunkserver::IntegrityResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(IntegrityService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntegrityJob

// required int32 id = 1;
inline bool IntegrityJob::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntegrityJob::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntegrityJob::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntegrityJob::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 IntegrityJob::id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.IntegrityJob.id)
  return id_;
}
inline void IntegrityJob::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.IntegrityJob.id)
}

// required int32 copyset = 2;
inline bool IntegrityJob::has_copyset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntegrityJob::set_has_copyset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntegrityJob::clear_has_copyset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntegrityJob::clear_copyset() {
  copyset_ = 0;
  clear_has_copyset();
}
inline ::google::protobuf::int32 IntegrityJob::copyset() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.IntegrityJob.copyset)
  return copyset_;
}
inline void IntegrityJob::set_copyset(::google::protobuf::int32 value) {
  set_has_copyset();
  copyset_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.IntegrityJob.copyset)
}

// required .curve.chunkserver.INTEGRITY_JOB_STATE state = 3;
inline bool IntegrityJob::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntegrityJob::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IntegrityJob::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IntegrityJob::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::curve::chunkserver::INTEGRITY_JOB_STATE IntegrityJob::state() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.IntegrityJob.state)
  return static_cast< ::curve::chunkserver::INTEGRITY_JOB_STATE >(state_);
}
inline void IntegrityJob::set_state(::curve::chunkserver::INTEGRITY_JOB_STATE value) {
  assert(::curve::chunkserver::INTEGRITY_JOB_STATE_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.IntegrityJob.state)
}

// required int32 progress = 4;
inline bool IntegrityJob::has_progress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IntegrityJob::set_has_progress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IntegrityJob::clear_has_progress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IntegrityJob::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
inline ::google::protobuf::int32 IntegrityJob::progress() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.IntegrityJob.progress)
  return progress_;
}
inline void IntegrityJob::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.IntegrityJob.progress)
}

// required int32 sched_time = 5;
inline bool IntegrityJob::has_sched_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IntegrityJob::set_has_sched_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IntegrityJob::clear_has_sched_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IntegrityJob::clear_sched_time() {
  sched_time_ = 0;
  clear_has_sched_time();
}
inline ::google::protobuf::int32 IntegrityJob::sched_time() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.IntegrityJob.sched_time)
  return sched_time_;
}
inline void IntegrityJob::set_sched_time(::google::protobuf::int32 value) {
  set_has_sched_time();
  sched_time_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.IntegrityJob.sched_time)
}

// required int32 start_time = 6;
inline bool IntegrityJob::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IntegrityJob::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IntegrityJob::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IntegrityJob::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline ::google::protobuf::int32 IntegrityJob::start_time() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.IntegrityJob.start_time)
  return start_time_;
}
inline void IntegrityJob::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.IntegrityJob.start_time)
}

// -------------------------------------------------------------------

// IntegrityRequest

// required .curve.chunkserver.IntegrityJob job = 1;
inline bool IntegrityRequest::has_job() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntegrityRequest::set_has_job() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntegrityRequest::clear_has_job() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntegrityRequest::clear_job() {
  if (job_ != NULL) job_->Clear();
  clear_has_job();
}
inline const ::curve::chunkserver::IntegrityJob& IntegrityRequest::_internal_job() const {
  return *job_;
}
inline const ::curve::chunkserver::IntegrityJob& IntegrityRequest::job() const {
  const ::curve::chunkserver::IntegrityJob* p = job_;
  // @@protoc_insertion_point(field_get:curve.chunkserver.IntegrityRequest.job)
  return p != NULL ? *p : *reinterpret_cast<const ::curve::chunkserver::IntegrityJob*>(
      &::curve::chunkserver::_IntegrityJob_default_instance_);
}
inline ::curve::chunkserver::IntegrityJob* IntegrityRequest::release_job() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.IntegrityRequest.job)
  clear_has_job();
  ::curve::chunkserver::IntegrityJob* temp = job_;
  job_ = NULL;
  return temp;
}
inline ::curve::chunkserver::IntegrityJob* IntegrityRequest::mutable_job() {
  set_has_job();
  if (job_ == NULL) {
    auto* p = CreateMaybeMessage<::curve::chunkserver::IntegrityJob>(GetArenaNoVirtual());
    job_ = p;
  }
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.IntegrityRequest.job)
  return job_;
}
inline void IntegrityRequest::set_allocated_job(::curve::chunkserver::IntegrityJob* job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_;
  }
  if (job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    set_has_job();
  } else {
    clear_has_job();
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.IntegrityRequest.job)
}

// -------------------------------------------------------------------

// IntegrityResponse

// required .curve.chunkserver.INTEGRITY_OP_STATUS status = 1;
inline bool IntegrityResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntegrityResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntegrityResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntegrityResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::curve::chunkserver::INTEGRITY_OP_STATUS IntegrityResponse::status() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.IntegrityResponse.status)
  return static_cast< ::curve::chunkserver::INTEGRITY_OP_STATUS >(status_);
}
inline void IntegrityResponse::set_status(::curve::chunkserver::INTEGRITY_OP_STATUS value) {
  assert(::curve::chunkserver::INTEGRITY_OP_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.IntegrityResponse.status)
}

// repeated .curve.chunkserver.IntegrityJob job = 2;
inline int IntegrityResponse::job_size() const {
  return job_.size();
}
inline void IntegrityResponse::clear_job() {
  job_.Clear();
}
inline ::curve::chunkserver::IntegrityJob* IntegrityResponse::mutable_job(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.IntegrityResponse.job)
  return job_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::curve::chunkserver::IntegrityJob >*
IntegrityResponse::mutable_job() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.IntegrityResponse.job)
  return &job_;
}
inline const ::curve::chunkserver::IntegrityJob& IntegrityResponse::job(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.IntegrityResponse.job)
  return job_.Get(index);
}
inline ::curve::chunkserver::IntegrityJob* IntegrityResponse::add_job() {
  // @@protoc_insertion_point(field_add:curve.chunkserver.IntegrityResponse.job)
  return job_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::curve::chunkserver::IntegrityJob >&
IntegrityResponse::job() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.IntegrityResponse.job)
  return job_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunkserver
}  // namespace curve

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::curve::chunkserver::INTEGRITY_JOB_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::INTEGRITY_JOB_STATE>() {
  return ::curve::chunkserver::INTEGRITY_JOB_STATE_descriptor();
}
template <> struct is_proto_enum< ::curve::chunkserver::INTEGRITY_OP_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::INTEGRITY_OP_STATUS>() {
  return ::curve::chunkserver::INTEGRITY_OP_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fintegrity_2eproto
