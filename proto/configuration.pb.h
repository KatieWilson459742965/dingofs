// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/configuration.proto

#ifndef PROTOBUF_INCLUDED_proto_2fconfiguration_2eproto
#define PROTOBUF_INCLUDED_proto_2fconfiguration_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fconfiguration_2eproto 

namespace protobuf_proto_2fconfiguration_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fconfiguration_2eproto
namespace curve {
namespace chunkserver {
class ConfigRequest;
class ConfigRequestDefaultTypeInternal;
extern ConfigRequestDefaultTypeInternal _ConfigRequest_default_instance_;
class ConfigResponse;
class ConfigResponseDefaultTypeInternal;
extern ConfigResponseDefaultTypeInternal _ConfigResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> ::curve::chunkserver::ConfigRequest* Arena::CreateMaybeMessage<::curve::chunkserver::ConfigRequest>(Arena*);
template<> ::curve::chunkserver::ConfigResponse* Arena::CreateMaybeMessage<::curve::chunkserver::ConfigResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace curve {
namespace chunkserver {

enum CONFIG_OP_STATUS {
  CONFIG_OP_STATUS_SUCCESS = 0,
  CONFIG_OP_STATUS_FAILURE_UNKNOWN = 1
};
bool CONFIG_OP_STATUS_IsValid(int value);
const CONFIG_OP_STATUS CONFIG_OP_STATUS_MIN = CONFIG_OP_STATUS_SUCCESS;
const CONFIG_OP_STATUS CONFIG_OP_STATUS_MAX = CONFIG_OP_STATUS_FAILURE_UNKNOWN;
const int CONFIG_OP_STATUS_ARRAYSIZE = CONFIG_OP_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* CONFIG_OP_STATUS_descriptor();
inline const ::std::string& CONFIG_OP_STATUS_Name(CONFIG_OP_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    CONFIG_OP_STATUS_descriptor(), value);
}
inline bool CONFIG_OP_STATUS_Parse(
    const ::std::string& name, CONFIG_OP_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CONFIG_OP_STATUS>(
    CONFIG_OP_STATUS_descriptor(), name, value);
}
// ===================================================================

class ConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ConfigRequest) */ {
 public:
  ConfigRequest();
  virtual ~ConfigRequest();

  ConfigRequest(const ConfigRequest& from);

  inline ConfigRequest& operator=(const ConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigRequest(ConfigRequest&& from) noexcept
    : ConfigRequest() {
    *this = ::std::move(from);
  }

  inline ConfigRequest& operator=(ConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigRequest*>(
               &_ConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConfigRequest* other);
  friend void swap(ConfigRequest& a, ConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigRequest* New() const final {
    return CreateMaybeMessage<ConfigRequest>(NULL);
  }

  ConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigRequest& from);
  void MergeFrom(const ConfigRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ConfigRequest)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_proto_2fconfiguration_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ConfigResponse) */ {
 public:
  ConfigResponse();
  virtual ~ConfigResponse();

  ConfigResponse(const ConfigResponse& from);

  inline ConfigResponse& operator=(const ConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigResponse(ConfigResponse&& from) noexcept
    : ConfigResponse() {
    *this = ::std::move(from);
  }

  inline ConfigResponse& operator=(ConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigResponse*>(
               &_ConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConfigResponse* other);
  friend void swap(ConfigResponse& a, ConfigResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigResponse* New() const final {
    return CreateMaybeMessage<ConfigResponse>(NULL);
  }

  ConfigResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigResponse& from);
  void MergeFrom(const ConfigResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // required .curve.chunkserver.CONFIG_OP_STATUS status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::curve::chunkserver::CONFIG_OP_STATUS status() const;
  void set_status(::curve::chunkserver::CONFIG_OP_STATUS value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ConfigResponse)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int status_;
  friend struct ::protobuf_proto_2fconfiguration_2eproto::TableStruct;
};
// ===================================================================

class ConfigService_Stub;

class ConfigService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ConfigService() {};
 public:
  virtual ~ConfigService();

  typedef ConfigService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Get(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ConfigRequest* request,
                       ::curve::chunkserver::ConfigResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Set(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ConfigRequest* request,
                       ::curve::chunkserver::ConfigResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Dump(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ConfigRequest* request,
                       ::curve::chunkserver::ConfigResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ConfigService);
};

class ConfigService_Stub : public ConfigService {
 public:
  ConfigService_Stub(::google::protobuf::RpcChannel* channel);
  ConfigService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ConfigService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ConfigService ------------------------------------------

  void Get(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ConfigRequest* request,
                       ::curve::chunkserver::ConfigResponse* response,
                       ::google::protobuf::Closure* done);
  void Set(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ConfigRequest* request,
                       ::curve::chunkserver::ConfigResponse* response,
                       ::google::protobuf::Closure* done);
  void Dump(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ConfigRequest* request,
                       ::curve::chunkserver::ConfigResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ConfigService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigRequest

// required string key = 1;
inline bool ConfigRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& ConfigRequest::key() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ConfigRequest.key)
  return key_.GetNoArena();
}
inline void ConfigRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.ConfigRequest.key)
}
#if LANG_CXX11
inline void ConfigRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.ConfigRequest.key)
}
#endif
inline void ConfigRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ConfigRequest.key)
}
inline void ConfigRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ConfigRequest.key)
}
inline ::std::string* ConfigRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ConfigRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigRequest::release_key() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ConfigRequest.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ConfigRequest.key)
}

// optional string value = 2;
inline bool ConfigRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& ConfigRequest::value() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ConfigRequest.value)
  return value_.GetNoArena();
}
inline void ConfigRequest::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.ConfigRequest.value)
}
#if LANG_CXX11
inline void ConfigRequest::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.ConfigRequest.value)
}
#endif
inline void ConfigRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ConfigRequest.value)
}
inline void ConfigRequest::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ConfigRequest.value)
}
inline ::std::string* ConfigRequest::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ConfigRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigRequest::release_value() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ConfigRequest.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ConfigRequest.value)
}

// -------------------------------------------------------------------

// ConfigResponse

// required .curve.chunkserver.CONFIG_OP_STATUS status = 1;
inline bool ConfigResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::curve::chunkserver::CONFIG_OP_STATUS ConfigResponse::status() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ConfigResponse.status)
  return static_cast< ::curve::chunkserver::CONFIG_OP_STATUS >(status_);
}
inline void ConfigResponse::set_status(::curve::chunkserver::CONFIG_OP_STATUS value) {
  assert(::curve::chunkserver::CONFIG_OP_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ConfigResponse.status)
}

// optional string value = 2;
inline bool ConfigResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& ConfigResponse::value() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ConfigResponse.value)
  return value_.GetNoArena();
}
inline void ConfigResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.ConfigResponse.value)
}
#if LANG_CXX11
inline void ConfigResponse::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.ConfigResponse.value)
}
#endif
inline void ConfigResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ConfigResponse.value)
}
inline void ConfigResponse::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ConfigResponse.value)
}
inline ::std::string* ConfigResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ConfigResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigResponse::release_value() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ConfigResponse.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ConfigResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunkserver
}  // namespace curve

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::curve::chunkserver::CONFIG_OP_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::CONFIG_OP_STATUS>() {
  return ::curve::chunkserver::CONFIG_OP_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fconfiguration_2eproto
