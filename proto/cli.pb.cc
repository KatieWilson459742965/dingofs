// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/cli.proto

#include "proto/cli.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace curve {
namespace chunkserver {
class AddPeerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPeerRequest>
      _instance;
} _AddPeerRequest_default_instance_;
class AddPeerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddPeerResponse>
      _instance;
} _AddPeerResponse_default_instance_;
class RemovePeerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemovePeerRequest>
      _instance;
} _RemovePeerRequest_default_instance_;
class RemovePeerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemovePeerResponse>
      _instance;
} _RemovePeerResponse_default_instance_;
class ChangePeersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangePeersRequest>
      _instance;
} _ChangePeersRequest_default_instance_;
class ChangePeersResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangePeersResponse>
      _instance;
} _ChangePeersResponse_default_instance_;
class SnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnapshotRequest>
      _instance;
} _SnapshotRequest_default_instance_;
class ResetPeerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetPeerRequest>
      _instance;
} _ResetPeerRequest_default_instance_;
class TransferLeaderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferLeaderRequest>
      _instance;
} _TransferLeaderRequest_default_instance_;
class TransferLeaderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferLeaderResponse>
      _instance;
} _TransferLeaderResponse_default_instance_;
class ResetPeerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetPeerResponse>
      _instance;
} _ResetPeerResponse_default_instance_;
class SnapshotResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnapshotResponse>
      _instance;
} _SnapshotResponse_default_instance_;
class GetLeaderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLeaderRequest>
      _instance;
} _GetLeaderRequest_default_instance_;
class GetLeaderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetLeaderResponse>
      _instance;
} _GetLeaderResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace protobuf_proto_2fcli_2eproto {
static void InitDefaultsAddPeerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_AddPeerRequest_default_instance_;
    new (ptr) ::curve::chunkserver::AddPeerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::AddPeerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddPeerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddPeerRequest}, {}};

static void InitDefaultsAddPeerResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_AddPeerResponse_default_instance_;
    new (ptr) ::curve::chunkserver::AddPeerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::AddPeerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddPeerResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddPeerResponse}, {}};

static void InitDefaultsRemovePeerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_RemovePeerRequest_default_instance_;
    new (ptr) ::curve::chunkserver::RemovePeerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::RemovePeerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemovePeerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemovePeerRequest}, {}};

static void InitDefaultsRemovePeerResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_RemovePeerResponse_default_instance_;
    new (ptr) ::curve::chunkserver::RemovePeerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::RemovePeerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemovePeerResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemovePeerResponse}, {}};

static void InitDefaultsChangePeersRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ChangePeersRequest_default_instance_;
    new (ptr) ::curve::chunkserver::ChangePeersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ChangePeersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChangePeersRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChangePeersRequest}, {}};

static void InitDefaultsChangePeersResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ChangePeersResponse_default_instance_;
    new (ptr) ::curve::chunkserver::ChangePeersResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ChangePeersResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChangePeersResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChangePeersResponse}, {}};

static void InitDefaultsSnapshotRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_SnapshotRequest_default_instance_;
    new (ptr) ::curve::chunkserver::SnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::SnapshotRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SnapshotRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSnapshotRequest}, {}};

static void InitDefaultsResetPeerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ResetPeerRequest_default_instance_;
    new (ptr) ::curve::chunkserver::ResetPeerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ResetPeerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResetPeerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResetPeerRequest}, {}};

static void InitDefaultsTransferLeaderRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_TransferLeaderRequest_default_instance_;
    new (ptr) ::curve::chunkserver::TransferLeaderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::TransferLeaderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransferLeaderRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransferLeaderRequest}, {}};

static void InitDefaultsTransferLeaderResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_TransferLeaderResponse_default_instance_;
    new (ptr) ::curve::chunkserver::TransferLeaderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::TransferLeaderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransferLeaderResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransferLeaderResponse}, {}};

static void InitDefaultsResetPeerResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ResetPeerResponse_default_instance_;
    new (ptr) ::curve::chunkserver::ResetPeerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ResetPeerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResetPeerResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResetPeerResponse}, {}};

static void InitDefaultsSnapshotResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_SnapshotResponse_default_instance_;
    new (ptr) ::curve::chunkserver::SnapshotResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::SnapshotResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SnapshotResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSnapshotResponse}, {}};

static void InitDefaultsGetLeaderRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_GetLeaderRequest_default_instance_;
    new (ptr) ::curve::chunkserver::GetLeaderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::GetLeaderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetLeaderRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetLeaderRequest}, {}};

static void InitDefaultsGetLeaderResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_GetLeaderResponse_default_instance_;
    new (ptr) ::curve::chunkserver::GetLeaderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::GetLeaderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetLeaderResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetLeaderResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AddPeerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddPeerResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemovePeerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemovePeerResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangePeersRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangePeersResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SnapshotRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResetPeerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferLeaderRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferLeaderResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResetPeerResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SnapshotResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLeaderRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetLeaderResponse.base);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerRequest, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerRequest, peer_id_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerResponse, old_peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::AddPeerResponse, new_peers_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerRequest, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerRequest, peer_id_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerResponse, old_peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::RemovePeerResponse, new_peers_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersRequest, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersRequest, new_peers_),
  1,
  2,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersResponse, old_peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChangePeersResponse, new_peers_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::SnapshotRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::SnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::SnapshotRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::SnapshotRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::SnapshotRequest, peer_id_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ResetPeerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ResetPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ResetPeerRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ResetPeerRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ResetPeerRequest, peer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ResetPeerRequest, old_peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ResetPeerRequest, new_peers_),
  1,
  2,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::TransferLeaderRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::TransferLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::TransferLeaderRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::TransferLeaderRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::TransferLeaderRequest, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::TransferLeaderRequest, peer_id_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::TransferLeaderResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::TransferLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ResetPeerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ResetPeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::SnapshotResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::SnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::GetLeaderRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::GetLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::GetLeaderRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::GetLeaderRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::GetLeaderRequest, peer_id_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::GetLeaderResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::GetLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::GetLeaderResponse, leader_id_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::curve::chunkserver::AddPeerRequest)},
  { 13, 20, sizeof(::curve::chunkserver::AddPeerResponse)},
  { 22, 31, sizeof(::curve::chunkserver::RemovePeerRequest)},
  { 35, 42, sizeof(::curve::chunkserver::RemovePeerResponse)},
  { 44, 53, sizeof(::curve::chunkserver::ChangePeersRequest)},
  { 57, 64, sizeof(::curve::chunkserver::ChangePeersResponse)},
  { 66, 74, sizeof(::curve::chunkserver::SnapshotRequest)},
  { 77, 87, sizeof(::curve::chunkserver::ResetPeerRequest)},
  { 92, 101, sizeof(::curve::chunkserver::TransferLeaderRequest)},
  { 105, 110, sizeof(::curve::chunkserver::TransferLeaderResponse)},
  { 110, 115, sizeof(::curve::chunkserver::ResetPeerResponse)},
  { 115, 120, sizeof(::curve::chunkserver::SnapshotResponse)},
  { 120, 128, sizeof(::curve::chunkserver::GetLeaderRequest)},
  { 131, 137, sizeof(::curve::chunkserver::GetLeaderResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_AddPeerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_AddPeerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_RemovePeerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_RemovePeerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ChangePeersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ChangePeersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_SnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ResetPeerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_TransferLeaderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_TransferLeaderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ResetPeerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_SnapshotResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_GetLeaderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_GetLeaderResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/cli.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017proto/cli.proto\022\021curve.chunkserver\"\\\n\016"
      "AddPeerRequest\022\023\n\013logicPoolId\030\001 \002(\r\022\021\n\tc"
      "opysetId\030\002 \002(\r\022\021\n\tleader_id\030\003 \002(\t\022\017\n\007pee"
      "r_id\030\004 \002(\t\"7\n\017AddPeerResponse\022\021\n\told_pee"
      "rs\030\001 \003(\t\022\021\n\tnew_peers\030\002 \003(\t\"_\n\021RemovePee"
      "rRequest\022\023\n\013logicPoolId\030\001 \002(\r\022\021\n\tcopyset"
      "Id\030\002 \002(\r\022\021\n\tleader_id\030\003 \002(\t\022\017\n\007peer_id\030\004"
      " \002(\t\":\n\022RemovePeerResponse\022\021\n\told_peers\030"
      "\001 \003(\t\022\021\n\tnew_peers\030\002 \003(\t\"b\n\022ChangePeersR"
      "equest\022\023\n\013logicPoolId\030\001 \002(\r\022\021\n\tcopysetId"
      "\030\002 \002(\r\022\021\n\tleader_id\030\003 \002(\t\022\021\n\tnew_peers\030\004"
      " \003(\t\";\n\023ChangePeersResponse\022\021\n\told_peers"
      "\030\001 \003(\t\022\021\n\tnew_peers\030\002 \003(\t\"J\n\017SnapshotReq"
      "uest\022\023\n\013logicPoolId\030\001 \002(\r\022\021\n\tcopysetId\030\002"
      " \002(\r\022\017\n\007peer_id\030\003 \001(\t\"q\n\020ResetPeerReques"
      "t\022\023\n\013logicPoolId\030\001 \002(\r\022\021\n\tcopysetId\030\002 \002("
      "\r\022\017\n\007peer_id\030\003 \002(\t\022\021\n\told_peers\030\004 \003(\t\022\021\n"
      "\tnew_peers\030\005 \003(\t\"c\n\025TransferLeaderReques"
      "t\022\023\n\013logicPoolId\030\001 \002(\r\022\021\n\tcopysetId\030\002 \002("
      "\r\022\021\n\tleader_id\030\003 \002(\t\022\017\n\007peer_id\030\004 \001(\t\"\030\n"
      "\026TransferLeaderResponse\"\023\n\021ResetPeerResp"
      "onse\"\022\n\020SnapshotResponse\"K\n\020GetLeaderReq"
      "uest\022\023\n\013logicPoolId\030\001 \002(\r\022\021\n\tcopysetId\030\002"
      " \002(\r\022\017\n\007peer_id\030\003 \001(\t\"&\n\021GetLeaderRespon"
      "se\022\021\n\tleader_id\030\001 \002(\t2\211\005\n\nCliService\022Q\n\010"
      "add_peer\022!.curve.chunkserver.AddPeerRequ"
      "est\032\".curve.chunkserver.AddPeerResponse\022"
      "Z\n\013remove_peer\022$.curve.chunkserver.Remov"
      "ePeerRequest\032%.curve.chunkserver.RemoveP"
      "eerResponse\022]\n\014change_peers\022%.curve.chun"
      "kserver.ChangePeersRequest\032&.curve.chunk"
      "server.ChangePeersResponse\022W\n\nreset_peer"
      "\022#.curve.chunkserver.ResetPeerRequest\032$."
      "curve.chunkserver.ResetPeerResponse\022S\n\010s"
      "napshot\022\".curve.chunkserver.SnapshotRequ"
      "est\032#.curve.chunkserver.SnapshotResponse"
      "\022W\n\nget_leader\022#.curve.chunkserver.GetLe"
      "aderRequest\032$.curve.chunkserver.GetLeade"
      "rResponse\022f\n\017transfer_leader\022(.curve.chu"
      "nkserver.TransferLeaderRequest\032).curve.c"
      "hunkserver.TransferLeaderResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/cli.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fcli_2eproto
namespace curve {
namespace chunkserver {

// ===================================================================

void AddPeerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPeerRequest::kLogicPoolIdFieldNumber;
const int AddPeerRequest::kCopysetIdFieldNumber;
const int AddPeerRequest::kLeaderIdFieldNumber;
const int AddPeerRequest::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPeerRequest::AddPeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_AddPeerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.AddPeerRequest)
}
AddPeerRequest::AddPeerRequest(const AddPeerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_id()) {
    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  ::memcpy(&logicpoolid_, &from.logicpoolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copysetid_) -
    reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.AddPeerRequest)
}

void AddPeerRequest::SharedCtor() {
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logicpoolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copysetid_) -
      reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
}

AddPeerRequest::~AddPeerRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.AddPeerRequest)
  SharedDtor();
}

void AddPeerRequest::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddPeerRequest::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPeerRequest& AddPeerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_AddPeerRequest.base);
  return *internal_default_instance();
}


void AddPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.AddPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      leader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      peer_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&logicpoolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copysetid_) -
        reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddPeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.AddPeerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicPoolId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string leader_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_id().data(), static_cast<int>(this->leader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.AddPeerRequest.leader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.AddPeerRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.AddPeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.AddPeerRequest)
  return false;
#undef DO_
}

void AddPeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.AddPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copysetid(), output);
  }

  // required string leader_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.AddPeerRequest.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_id(), output);
  }

  // required string peer_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.AddPeerRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->peer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.AddPeerRequest)
}

::google::protobuf::uint8* AddPeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.AddPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copysetid(), target);
  }

  // required string leader_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.AddPeerRequest.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_id(), target);
  }

  // required string peer_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.AddPeerRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->peer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.AddPeerRequest)
  return target;
}

size_t AddPeerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.AddPeerRequest)
  size_t total_size = 0;

  if (has_leader_id()) {
    // required string leader_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  if (has_peer_id()) {
    // required string peer_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  return total_size;
}
size_t AddPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.AddPeerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string leader_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());

    // required string peer_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());

    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.AddPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPeerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.AddPeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.AddPeerRequest)
    MergeFrom(*source);
  }
}

void AddPeerRequest::MergeFrom(const AddPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.AddPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_leader_id();
      leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      copysetid_ = from.copysetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddPeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.AddPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPeerRequest::CopyFrom(const AddPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.AddPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void AddPeerRequest::Swap(AddPeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPeerRequest::InternalSwap(AddPeerRequest* other) {
  using std::swap;
  leader_id_.Swap(&other->leader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_id_.Swap(&other->peer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logicpoolid_, other->logicpoolid_);
  swap(copysetid_, other->copysetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddPeerRequest::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddPeerResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPeerResponse::kOldPeersFieldNumber;
const int AddPeerResponse::kNewPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPeerResponse::AddPeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_AddPeerResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.AddPeerResponse)
}
AddPeerResponse::AddPeerResponse(const AddPeerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      old_peers_(from.old_peers_),
      new_peers_(from.new_peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.AddPeerResponse)
}

void AddPeerResponse::SharedCtor() {
}

AddPeerResponse::~AddPeerResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.AddPeerResponse)
  SharedDtor();
}

void AddPeerResponse::SharedDtor() {
}

void AddPeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddPeerResponse::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddPeerResponse& AddPeerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_AddPeerResponse.base);
  return *internal_default_instance();
}


void AddPeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.AddPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_peers_.Clear();
  new_peers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddPeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.AddPeerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string old_peers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_peers(this->old_peers_size() - 1).data(),
            static_cast<int>(this->old_peers(this->old_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.AddPeerResponse.old_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string new_peers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_peers(this->new_peers_size() - 1).data(),
            static_cast<int>(this->new_peers(this->new_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.AddPeerResponse.new_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.AddPeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.AddPeerResponse)
  return false;
#undef DO_
}

void AddPeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.AddPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string old_peers = 1;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.AddPeerResponse.old_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_peers(i), output);
  }

  // repeated string new_peers = 2;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.AddPeerResponse.new_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.AddPeerResponse)
}

::google::protobuf::uint8* AddPeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.AddPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string old_peers = 1;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.AddPeerResponse.old_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->old_peers(i), target);
  }

  // repeated string new_peers = 2;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.AddPeerResponse.new_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->new_peers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.AddPeerResponse)
  return target;
}

size_t AddPeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.AddPeerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string old_peers = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->old_peers_size());
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }

  // repeated string new_peers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->new_peers_size());
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.AddPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPeerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.AddPeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.AddPeerResponse)
    MergeFrom(*source);
  }
}

void AddPeerResponse::MergeFrom(const AddPeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.AddPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_peers_.MergeFrom(from.old_peers_);
  new_peers_.MergeFrom(from.new_peers_);
}

void AddPeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.AddPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPeerResponse::CopyFrom(const AddPeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.AddPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerResponse::IsInitialized() const {
  return true;
}

void AddPeerResponse::Swap(AddPeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPeerResponse::InternalSwap(AddPeerResponse* other) {
  using std::swap;
  old_peers_.InternalSwap(CastToBase(&other->old_peers_));
  new_peers_.InternalSwap(CastToBase(&other->new_peers_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddPeerResponse::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemovePeerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovePeerRequest::kLogicPoolIdFieldNumber;
const int RemovePeerRequest::kCopysetIdFieldNumber;
const int RemovePeerRequest::kLeaderIdFieldNumber;
const int RemovePeerRequest::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovePeerRequest::RemovePeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_RemovePeerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.RemovePeerRequest)
}
RemovePeerRequest::RemovePeerRequest(const RemovePeerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_id()) {
    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  ::memcpy(&logicpoolid_, &from.logicpoolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copysetid_) -
    reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.RemovePeerRequest)
}

void RemovePeerRequest::SharedCtor() {
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logicpoolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copysetid_) -
      reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
}

RemovePeerRequest::~RemovePeerRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.RemovePeerRequest)
  SharedDtor();
}

void RemovePeerRequest::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemovePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemovePeerRequest::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemovePeerRequest& RemovePeerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_RemovePeerRequest.base);
  return *internal_default_instance();
}


void RemovePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.RemovePeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      leader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      peer_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&logicpoolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copysetid_) -
        reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemovePeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.RemovePeerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicPoolId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string leader_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_id().data(), static_cast<int>(this->leader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.RemovePeerRequest.leader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.RemovePeerRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.RemovePeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.RemovePeerRequest)
  return false;
#undef DO_
}

void RemovePeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.RemovePeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copysetid(), output);
  }

  // required string leader_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.RemovePeerRequest.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_id(), output);
  }

  // required string peer_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.RemovePeerRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->peer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.RemovePeerRequest)
}

::google::protobuf::uint8* RemovePeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.RemovePeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copysetid(), target);
  }

  // required string leader_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.RemovePeerRequest.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_id(), target);
  }

  // required string peer_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.RemovePeerRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->peer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.RemovePeerRequest)
  return target;
}

size_t RemovePeerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.RemovePeerRequest)
  size_t total_size = 0;

  if (has_leader_id()) {
    // required string leader_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  if (has_peer_id()) {
    // required string peer_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  return total_size;
}
size_t RemovePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.RemovePeerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string leader_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());

    // required string peer_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());

    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.RemovePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePeerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemovePeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.RemovePeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.RemovePeerRequest)
    MergeFrom(*source);
  }
}

void RemovePeerRequest::MergeFrom(const RemovePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.RemovePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_leader_id();
      leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      copysetid_ = from.copysetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemovePeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.RemovePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePeerRequest::CopyFrom(const RemovePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.RemovePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePeerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void RemovePeerRequest::Swap(RemovePeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovePeerRequest::InternalSwap(RemovePeerRequest* other) {
  using std::swap;
  leader_id_.Swap(&other->leader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_id_.Swap(&other->peer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logicpoolid_, other->logicpoolid_);
  swap(copysetid_, other->copysetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemovePeerRequest::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemovePeerResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovePeerResponse::kOldPeersFieldNumber;
const int RemovePeerResponse::kNewPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovePeerResponse::RemovePeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_RemovePeerResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.RemovePeerResponse)
}
RemovePeerResponse::RemovePeerResponse(const RemovePeerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      old_peers_(from.old_peers_),
      new_peers_(from.new_peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.RemovePeerResponse)
}

void RemovePeerResponse::SharedCtor() {
}

RemovePeerResponse::~RemovePeerResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.RemovePeerResponse)
  SharedDtor();
}

void RemovePeerResponse::SharedDtor() {
}

void RemovePeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemovePeerResponse::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemovePeerResponse& RemovePeerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_RemovePeerResponse.base);
  return *internal_default_instance();
}


void RemovePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.RemovePeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_peers_.Clear();
  new_peers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemovePeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.RemovePeerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string old_peers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_peers(this->old_peers_size() - 1).data(),
            static_cast<int>(this->old_peers(this->old_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.RemovePeerResponse.old_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string new_peers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_peers(this->new_peers_size() - 1).data(),
            static_cast<int>(this->new_peers(this->new_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.RemovePeerResponse.new_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.RemovePeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.RemovePeerResponse)
  return false;
#undef DO_
}

void RemovePeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.RemovePeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string old_peers = 1;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.RemovePeerResponse.old_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_peers(i), output);
  }

  // repeated string new_peers = 2;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.RemovePeerResponse.new_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.RemovePeerResponse)
}

::google::protobuf::uint8* RemovePeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.RemovePeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string old_peers = 1;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.RemovePeerResponse.old_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->old_peers(i), target);
  }

  // repeated string new_peers = 2;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.RemovePeerResponse.new_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->new_peers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.RemovePeerResponse)
  return target;
}

size_t RemovePeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.RemovePeerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string old_peers = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->old_peers_size());
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }

  // repeated string new_peers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->new_peers_size());
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovePeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.RemovePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePeerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemovePeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.RemovePeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.RemovePeerResponse)
    MergeFrom(*source);
  }
}

void RemovePeerResponse::MergeFrom(const RemovePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.RemovePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_peers_.MergeFrom(from.old_peers_);
  new_peers_.MergeFrom(from.new_peers_);
}

void RemovePeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.RemovePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePeerResponse::CopyFrom(const RemovePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.RemovePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePeerResponse::IsInitialized() const {
  return true;
}

void RemovePeerResponse::Swap(RemovePeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovePeerResponse::InternalSwap(RemovePeerResponse* other) {
  using std::swap;
  old_peers_.InternalSwap(CastToBase(&other->old_peers_));
  new_peers_.InternalSwap(CastToBase(&other->new_peers_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemovePeerResponse::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangePeersRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeersRequest::kLogicPoolIdFieldNumber;
const int ChangePeersRequest::kCopysetIdFieldNumber;
const int ChangePeersRequest::kLeaderIdFieldNumber;
const int ChangePeersRequest::kNewPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeersRequest::ChangePeersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_ChangePeersRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ChangePeersRequest)
}
ChangePeersRequest::ChangePeersRequest(const ChangePeersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      new_peers_(from.new_peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_id()) {
    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  ::memcpy(&logicpoolid_, &from.logicpoolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copysetid_) -
    reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ChangePeersRequest)
}

void ChangePeersRequest::SharedCtor() {
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logicpoolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copysetid_) -
      reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
}

ChangePeersRequest::~ChangePeersRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ChangePeersRequest)
  SharedDtor();
}

void ChangePeersRequest::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChangePeersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChangePeersRequest::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangePeersRequest& ChangePeersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_ChangePeersRequest.base);
  return *internal_default_instance();
}


void ChangePeersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ChangePeersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_peers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leader_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&logicpoolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copysetid_) -
        reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChangePeersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ChangePeersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicPoolId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string leader_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_id().data(), static_cast<int>(this->leader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ChangePeersRequest.leader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string new_peers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_peers(this->new_peers_size() - 1).data(),
            static_cast<int>(this->new_peers(this->new_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ChangePeersRequest.new_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ChangePeersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ChangePeersRequest)
  return false;
#undef DO_
}

void ChangePeersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ChangePeersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copysetid(), output);
  }

  // required string leader_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChangePeersRequest.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_id(), output);
  }

  // repeated string new_peers = 4;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChangePeersRequest.new_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ChangePeersRequest)
}

::google::protobuf::uint8* ChangePeersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ChangePeersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copysetid(), target);
  }

  // required string leader_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChangePeersRequest.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_id(), target);
  }

  // repeated string new_peers = 4;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChangePeersRequest.new_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->new_peers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ChangePeersRequest)
  return target;
}

size_t ChangePeersRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.ChangePeersRequest)
  size_t total_size = 0;

  if (has_leader_id()) {
    // required string leader_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  return total_size;
}
size_t ChangePeersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ChangePeersRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string leader_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());

    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string new_peers = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->new_peers_size());
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePeersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ChangePeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePeersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangePeersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ChangePeersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ChangePeersRequest)
    MergeFrom(*source);
  }
}

void ChangePeersRequest::MergeFrom(const ChangePeersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ChangePeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_peers_.MergeFrom(from.new_peers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_leader_id();
      leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      copysetid_ = from.copysetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangePeersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ChangePeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeersRequest::CopyFrom(const ChangePeersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ChangePeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeersRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ChangePeersRequest::Swap(ChangePeersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeersRequest::InternalSwap(ChangePeersRequest* other) {
  using std::swap;
  new_peers_.InternalSwap(CastToBase(&other->new_peers_));
  leader_id_.Swap(&other->leader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logicpoolid_, other->logicpoolid_);
  swap(copysetid_, other->copysetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChangePeersRequest::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangePeersResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeersResponse::kOldPeersFieldNumber;
const int ChangePeersResponse::kNewPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeersResponse::ChangePeersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_ChangePeersResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ChangePeersResponse)
}
ChangePeersResponse::ChangePeersResponse(const ChangePeersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      old_peers_(from.old_peers_),
      new_peers_(from.new_peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ChangePeersResponse)
}

void ChangePeersResponse::SharedCtor() {
}

ChangePeersResponse::~ChangePeersResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ChangePeersResponse)
  SharedDtor();
}

void ChangePeersResponse::SharedDtor() {
}

void ChangePeersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChangePeersResponse::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangePeersResponse& ChangePeersResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_ChangePeersResponse.base);
  return *internal_default_instance();
}


void ChangePeersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ChangePeersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_peers_.Clear();
  new_peers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChangePeersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ChangePeersResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string old_peers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_peers(this->old_peers_size() - 1).data(),
            static_cast<int>(this->old_peers(this->old_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ChangePeersResponse.old_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string new_peers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_peers(this->new_peers_size() - 1).data(),
            static_cast<int>(this->new_peers(this->new_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ChangePeersResponse.new_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ChangePeersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ChangePeersResponse)
  return false;
#undef DO_
}

void ChangePeersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ChangePeersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string old_peers = 1;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChangePeersResponse.old_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_peers(i), output);
  }

  // repeated string new_peers = 2;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChangePeersResponse.new_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ChangePeersResponse)
}

::google::protobuf::uint8* ChangePeersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ChangePeersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string old_peers = 1;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChangePeersResponse.old_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->old_peers(i), target);
  }

  // repeated string new_peers = 2;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChangePeersResponse.new_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->new_peers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ChangePeersResponse)
  return target;
}

size_t ChangePeersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ChangePeersResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string old_peers = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->old_peers_size());
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }

  // repeated string new_peers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->new_peers_size());
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePeersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ChangePeersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePeersResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangePeersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ChangePeersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ChangePeersResponse)
    MergeFrom(*source);
  }
}

void ChangePeersResponse::MergeFrom(const ChangePeersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ChangePeersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_peers_.MergeFrom(from.old_peers_);
  new_peers_.MergeFrom(from.new_peers_);
}

void ChangePeersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ChangePeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeersResponse::CopyFrom(const ChangePeersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ChangePeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeersResponse::IsInitialized() const {
  return true;
}

void ChangePeersResponse::Swap(ChangePeersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeersResponse::InternalSwap(ChangePeersResponse* other) {
  using std::swap;
  old_peers_.InternalSwap(CastToBase(&other->old_peers_));
  new_peers_.InternalSwap(CastToBase(&other->new_peers_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChangePeersResponse::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SnapshotRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotRequest::kLogicPoolIdFieldNumber;
const int SnapshotRequest::kCopysetIdFieldNumber;
const int SnapshotRequest::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotRequest::SnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_SnapshotRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.SnapshotRequest)
}
SnapshotRequest::SnapshotRequest(const SnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  ::memcpy(&logicpoolid_, &from.logicpoolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copysetid_) -
    reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.SnapshotRequest)
}

void SnapshotRequest::SharedCtor() {
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logicpoolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copysetid_) -
      reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
}

SnapshotRequest::~SnapshotRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.SnapshotRequest)
  SharedDtor();
}

void SnapshotRequest::SharedDtor() {
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SnapshotRequest::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapshotRequest& SnapshotRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_SnapshotRequest.base);
  return *internal_default_instance();
}


void SnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.SnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    peer_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&logicpoolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copysetid_) -
        reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.SnapshotRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicPoolId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.SnapshotRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.SnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.SnapshotRequest)
  return false;
#undef DO_
}

void SnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.SnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copysetid(), output);
  }

  // optional string peer_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.SnapshotRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.SnapshotRequest)
}

::google::protobuf::uint8* SnapshotRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.SnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copysetid(), target);
  }

  // optional string peer_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.SnapshotRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.SnapshotRequest)
  return target;
}

size_t SnapshotRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.SnapshotRequest)
  size_t total_size = 0;

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  return total_size;
}
size_t SnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.SnapshotRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string peer_id = 3;
  if (has_peer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.SnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.SnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.SnapshotRequest)
    MergeFrom(*source);
  }
}

void SnapshotRequest::MergeFrom(const SnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.SnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      copysetid_ = from.copysetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.SnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRequest::CopyFrom(const SnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.SnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void SnapshotRequest::Swap(SnapshotRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotRequest::InternalSwap(SnapshotRequest* other) {
  using std::swap;
  peer_id_.Swap(&other->peer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logicpoolid_, other->logicpoolid_);
  swap(copysetid_, other->copysetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SnapshotRequest::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetPeerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetPeerRequest::kLogicPoolIdFieldNumber;
const int ResetPeerRequest::kCopysetIdFieldNumber;
const int ResetPeerRequest::kPeerIdFieldNumber;
const int ResetPeerRequest::kOldPeersFieldNumber;
const int ResetPeerRequest::kNewPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetPeerRequest::ResetPeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_ResetPeerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ResetPeerRequest)
}
ResetPeerRequest::ResetPeerRequest(const ResetPeerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      old_peers_(from.old_peers_),
      new_peers_(from.new_peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  ::memcpy(&logicpoolid_, &from.logicpoolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copysetid_) -
    reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ResetPeerRequest)
}

void ResetPeerRequest::SharedCtor() {
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logicpoolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copysetid_) -
      reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
}

ResetPeerRequest::~ResetPeerRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ResetPeerRequest)
  SharedDtor();
}

void ResetPeerRequest::SharedDtor() {
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResetPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResetPeerRequest::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetPeerRequest& ResetPeerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_ResetPeerRequest.base);
  return *internal_default_instance();
}


void ResetPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ResetPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_peers_.Clear();
  new_peers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    peer_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&logicpoolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copysetid_) -
        reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetPeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ResetPeerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicPoolId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ResetPeerRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string old_peers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_peers(this->old_peers_size() - 1).data(),
            static_cast<int>(this->old_peers(this->old_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ResetPeerRequest.old_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string new_peers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_peers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_peers(this->new_peers_size() - 1).data(),
            static_cast<int>(this->new_peers(this->new_peers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ResetPeerRequest.new_peers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ResetPeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ResetPeerRequest)
  return false;
#undef DO_
}

void ResetPeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ResetPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copysetid(), output);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ResetPeerRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  // repeated string old_peers = 4;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ResetPeerRequest.old_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->old_peers(i), output);
  }

  // repeated string new_peers = 5;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ResetPeerRequest.new_peers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->new_peers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ResetPeerRequest)
}

::google::protobuf::uint8* ResetPeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ResetPeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copysetid(), target);
  }

  // required string peer_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ResetPeerRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  // repeated string old_peers = 4;
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_peers(i).data(), static_cast<int>(this->old_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ResetPeerRequest.old_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->old_peers(i), target);
  }

  // repeated string new_peers = 5;
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_peers(i).data(), static_cast<int>(this->new_peers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ResetPeerRequest.new_peers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->new_peers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ResetPeerRequest)
  return target;
}

size_t ResetPeerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.ResetPeerRequest)
  size_t total_size = 0;

  if (has_peer_id()) {
    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  return total_size;
}
size_t ResetPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ResetPeerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string peer_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());

    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string old_peers = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->old_peers_size());
  for (int i = 0, n = this->old_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_peers(i));
  }

  // repeated string new_peers = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->new_peers_size());
  for (int i = 0, n = this->new_peers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_peers(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetPeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ResetPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetPeerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetPeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ResetPeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ResetPeerRequest)
    MergeFrom(*source);
  }
}

void ResetPeerRequest::MergeFrom(const ResetPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ResetPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_peers_.MergeFrom(from.old_peers_);
  new_peers_.MergeFrom(from.new_peers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      copysetid_ = from.copysetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResetPeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ResetPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPeerRequest::CopyFrom(const ResetPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ResetPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPeerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ResetPeerRequest::Swap(ResetPeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetPeerRequest::InternalSwap(ResetPeerRequest* other) {
  using std::swap;
  old_peers_.InternalSwap(CastToBase(&other->old_peers_));
  new_peers_.InternalSwap(CastToBase(&other->new_peers_));
  peer_id_.Swap(&other->peer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logicpoolid_, other->logicpoolid_);
  swap(copysetid_, other->copysetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResetPeerRequest::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransferLeaderRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeaderRequest::kLogicPoolIdFieldNumber;
const int TransferLeaderRequest::kCopysetIdFieldNumber;
const int TransferLeaderRequest::kLeaderIdFieldNumber;
const int TransferLeaderRequest::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderRequest::TransferLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_TransferLeaderRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.TransferLeaderRequest)
}
TransferLeaderRequest::TransferLeaderRequest(const TransferLeaderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_id()) {
    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  ::memcpy(&logicpoolid_, &from.logicpoolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copysetid_) -
    reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.TransferLeaderRequest)
}

void TransferLeaderRequest::SharedCtor() {
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logicpoolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copysetid_) -
      reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
}

TransferLeaderRequest::~TransferLeaderRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.TransferLeaderRequest)
  SharedDtor();
}

void TransferLeaderRequest::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransferLeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransferLeaderRequest::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferLeaderRequest& TransferLeaderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_TransferLeaderRequest.base);
  return *internal_default_instance();
}


void TransferLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.TransferLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      leader_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      peer_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&logicpoolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copysetid_) -
        reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransferLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.TransferLeaderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicPoolId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string leader_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_id().data(), static_cast<int>(this->leader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.TransferLeaderRequest.leader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string peer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.TransferLeaderRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.TransferLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.TransferLeaderRequest)
  return false;
#undef DO_
}

void TransferLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.TransferLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copysetid(), output);
  }

  // required string leader_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.TransferLeaderRequest.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_id(), output);
  }

  // optional string peer_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.TransferLeaderRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->peer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.TransferLeaderRequest)
}

::google::protobuf::uint8* TransferLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.TransferLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copysetid(), target);
  }

  // required string leader_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.TransferLeaderRequest.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_id(), target);
  }

  // optional string peer_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.TransferLeaderRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->peer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.TransferLeaderRequest)
  return target;
}

size_t TransferLeaderRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.TransferLeaderRequest)
  size_t total_size = 0;

  if (has_leader_id()) {
    // required string leader_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  return total_size;
}
size_t TransferLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.TransferLeaderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string leader_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());

    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string peer_id = 4;
  if (has_peer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.TransferLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferLeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.TransferLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.TransferLeaderRequest)
    MergeFrom(*source);
  }
}

void TransferLeaderRequest::MergeFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.TransferLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_leader_id();
      leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000008u) {
      copysetid_ = from.copysetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransferLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderRequest::CopyFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void TransferLeaderRequest::Swap(TransferLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderRequest::InternalSwap(TransferLeaderRequest* other) {
  using std::swap;
  leader_id_.Swap(&other->leader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_id_.Swap(&other->peer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logicpoolid_, other->logicpoolid_);
  swap(copysetid_, other->copysetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransferLeaderRequest::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransferLeaderResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderResponse::TransferLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_TransferLeaderResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.TransferLeaderResponse)
}
TransferLeaderResponse::TransferLeaderResponse(const TransferLeaderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.TransferLeaderResponse)
}

void TransferLeaderResponse::SharedCtor() {
}

TransferLeaderResponse::~TransferLeaderResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.TransferLeaderResponse)
  SharedDtor();
}

void TransferLeaderResponse::SharedDtor() {
}

void TransferLeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransferLeaderResponse::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferLeaderResponse& TransferLeaderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_TransferLeaderResponse.base);
  return *internal_default_instance();
}


void TransferLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.TransferLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransferLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.TransferLeaderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.TransferLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.TransferLeaderResponse)
  return false;
#undef DO_
}

void TransferLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.TransferLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.TransferLeaderResponse)
}

::google::protobuf::uint8* TransferLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.TransferLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.TransferLeaderResponse)
  return target;
}

size_t TransferLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.TransferLeaderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.TransferLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferLeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.TransferLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.TransferLeaderResponse)
    MergeFrom(*source);
  }
}

void TransferLeaderResponse::MergeFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.TransferLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransferLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderResponse::CopyFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderResponse::IsInitialized() const {
  return true;
}

void TransferLeaderResponse::Swap(TransferLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderResponse::InternalSwap(TransferLeaderResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransferLeaderResponse::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResetPeerResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetPeerResponse::ResetPeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_ResetPeerResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ResetPeerResponse)
}
ResetPeerResponse::ResetPeerResponse(const ResetPeerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ResetPeerResponse)
}

void ResetPeerResponse::SharedCtor() {
}

ResetPeerResponse::~ResetPeerResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ResetPeerResponse)
  SharedDtor();
}

void ResetPeerResponse::SharedDtor() {
}

void ResetPeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResetPeerResponse::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetPeerResponse& ResetPeerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_ResetPeerResponse.base);
  return *internal_default_instance();
}


void ResetPeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ResetPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetPeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ResetPeerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ResetPeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ResetPeerResponse)
  return false;
#undef DO_
}

void ResetPeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ResetPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ResetPeerResponse)
}

::google::protobuf::uint8* ResetPeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ResetPeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ResetPeerResponse)
  return target;
}

size_t ResetPeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ResetPeerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetPeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ResetPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetPeerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetPeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ResetPeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ResetPeerResponse)
    MergeFrom(*source);
  }
}

void ResetPeerResponse::MergeFrom(const ResetPeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ResetPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetPeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ResetPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPeerResponse::CopyFrom(const ResetPeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ResetPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPeerResponse::IsInitialized() const {
  return true;
}

void ResetPeerResponse::Swap(ResetPeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetPeerResponse::InternalSwap(ResetPeerResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResetPeerResponse::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SnapshotResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotResponse::SnapshotResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_SnapshotResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.SnapshotResponse)
}
SnapshotResponse::SnapshotResponse(const SnapshotResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.SnapshotResponse)
}

void SnapshotResponse::SharedCtor() {
}

SnapshotResponse::~SnapshotResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.SnapshotResponse)
  SharedDtor();
}

void SnapshotResponse::SharedDtor() {
}

void SnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SnapshotResponse::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnapshotResponse& SnapshotResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_SnapshotResponse.base);
  return *internal_default_instance();
}


void SnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.SnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SnapshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.SnapshotResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.SnapshotResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.SnapshotResponse)
  return false;
#undef DO_
}

void SnapshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.SnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.SnapshotResponse)
}

::google::protobuf::uint8* SnapshotResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.SnapshotResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.SnapshotResponse)
  return target;
}

size_t SnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.SnapshotResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.SnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.SnapshotResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.SnapshotResponse)
    MergeFrom(*source);
  }
}

void SnapshotResponse::MergeFrom(const SnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.SnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SnapshotResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.SnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotResponse::CopyFrom(const SnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.SnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotResponse::IsInitialized() const {
  return true;
}

void SnapshotResponse::Swap(SnapshotResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotResponse::InternalSwap(SnapshotResponse* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SnapshotResponse::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetLeaderRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLeaderRequest::kLogicPoolIdFieldNumber;
const int GetLeaderRequest::kCopysetIdFieldNumber;
const int GetLeaderRequest::kPeerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLeaderRequest::GetLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_GetLeaderRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.GetLeaderRequest)
}
GetLeaderRequest::GetLeaderRequest(const GetLeaderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_id()) {
    peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
  }
  ::memcpy(&logicpoolid_, &from.logicpoolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copysetid_) -
    reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.GetLeaderRequest)
}

void GetLeaderRequest::SharedCtor() {
  peer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logicpoolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copysetid_) -
      reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
}

GetLeaderRequest::~GetLeaderRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.GetLeaderRequest)
  SharedDtor();
}

void GetLeaderRequest::SharedDtor() {
  peer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetLeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetLeaderRequest::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLeaderRequest& GetLeaderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_GetLeaderRequest.base);
  return *internal_default_instance();
}


void GetLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.GetLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    peer_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&logicpoolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copysetid_) -
        reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.GetLeaderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicPoolId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string peer_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_id().data(), static_cast<int>(this->peer_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.GetLeaderRequest.peer_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.GetLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.GetLeaderRequest)
  return false;
#undef DO_
}

void GetLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.GetLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copysetid(), output);
  }

  // optional string peer_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.GetLeaderRequest.peer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->peer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.GetLeaderRequest)
}

::google::protobuf::uint8* GetLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.GetLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copysetid(), target);
  }

  // optional string peer_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_id().data(), static_cast<int>(this->peer_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.GetLeaderRequest.peer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->peer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.GetLeaderRequest)
  return target;
}

size_t GetLeaderRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.GetLeaderRequest)
  size_t total_size = 0;

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  return total_size;
}
size_t GetLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.GetLeaderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string peer_id = 3;
  if (has_peer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.GetLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.GetLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.GetLeaderRequest)
    MergeFrom(*source);
  }
}

void GetLeaderRequest::MergeFrom(const GetLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.GetLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peer_id();
      peer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000004u) {
      copysetid_ = from.copysetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.GetLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLeaderRequest::CopyFrom(const GetLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.GetLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void GetLeaderRequest::Swap(GetLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLeaderRequest::InternalSwap(GetLeaderRequest* other) {
  using std::swap;
  peer_id_.Swap(&other->peer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(logicpoolid_, other->logicpoolid_);
  swap(copysetid_, other->copysetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetLeaderRequest::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetLeaderResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLeaderResponse::kLeaderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLeaderResponse::GetLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcli_2eproto::scc_info_GetLeaderResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.GetLeaderResponse)
}
GetLeaderResponse::GetLeaderResponse(const GetLeaderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_id()) {
    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.GetLeaderResponse)
}

void GetLeaderResponse::SharedCtor() {
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetLeaderResponse::~GetLeaderResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.GetLeaderResponse)
  SharedDtor();
}

void GetLeaderResponse::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetLeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetLeaderResponse::descriptor() {
  ::protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetLeaderResponse& GetLeaderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcli_2eproto::scc_info_GetLeaderResponse.base);
  return *internal_default_instance();
}


void GetLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.GetLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leader_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.GetLeaderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string leader_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_id().data(), static_cast<int>(this->leader_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.GetLeaderResponse.leader_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.GetLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.GetLeaderResponse)
  return false;
#undef DO_
}

void GetLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.GetLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string leader_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.GetLeaderResponse.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->leader_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.GetLeaderResponse)
}

::google::protobuf::uint8* GetLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.GetLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string leader_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), static_cast<int>(this->leader_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.GetLeaderResponse.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leader_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.GetLeaderResponse)
  return target;
}

size_t GetLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.GetLeaderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string leader_id = 1;
  if (has_leader_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.GetLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.GetLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.GetLeaderResponse)
    MergeFrom(*source);
  }
}

void GetLeaderResponse::MergeFrom(const GetLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.GetLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leader_id()) {
    set_has_leader_id();
    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
}

void GetLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.GetLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLeaderResponse::CopyFrom(const GetLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.GetLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaderResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GetLeaderResponse::Swap(GetLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLeaderResponse::InternalSwap(GetLeaderResponse* other) {
  using std::swap;
  leader_id_.Swap(&other->leader_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetLeaderResponse::GetMetadata() const {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcli_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CliService::~CliService() {}

const ::google::protobuf::ServiceDescriptor* CliService::descriptor() {
  protobuf_proto_2fcli_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fcli_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* CliService::GetDescriptor() {
  return descriptor();
}

void CliService::add_peer(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::AddPeerRequest*,
                         ::curve::chunkserver::AddPeerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method add_peer() not implemented.");
  done->Run();
}

void CliService::remove_peer(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::RemovePeerRequest*,
                         ::curve::chunkserver::RemovePeerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method remove_peer() not implemented.");
  done->Run();
}

void CliService::change_peers(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ChangePeersRequest*,
                         ::curve::chunkserver::ChangePeersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method change_peers() not implemented.");
  done->Run();
}

void CliService::reset_peer(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ResetPeerRequest*,
                         ::curve::chunkserver::ResetPeerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method reset_peer() not implemented.");
  done->Run();
}

void CliService::snapshot(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::SnapshotRequest*,
                         ::curve::chunkserver::SnapshotResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method snapshot() not implemented.");
  done->Run();
}

void CliService::get_leader(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::GetLeaderRequest*,
                         ::curve::chunkserver::GetLeaderResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method get_leader() not implemented.");
  done->Run();
}

void CliService::transfer_leader(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::TransferLeaderRequest*,
                         ::curve::chunkserver::TransferLeaderResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method transfer_leader() not implemented.");
  done->Run();
}

void CliService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_proto_2fcli_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      add_peer(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::AddPeerRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::AddPeerResponse*>(response),
             done);
      break;
    case 1:
      remove_peer(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::RemovePeerRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::RemovePeerResponse*>(response),
             done);
      break;
    case 2:
      change_peers(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ChangePeersRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ChangePeersResponse*>(response),
             done);
      break;
    case 3:
      reset_peer(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ResetPeerRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ResetPeerResponse*>(response),
             done);
      break;
    case 4:
      snapshot(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::SnapshotRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::SnapshotResponse*>(response),
             done);
      break;
    case 5:
      get_leader(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::GetLeaderRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::GetLeaderResponse*>(response),
             done);
      break;
    case 6:
      transfer_leader(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::TransferLeaderRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::TransferLeaderResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& CliService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::AddPeerRequest::default_instance();
    case 1:
      return ::curve::chunkserver::RemovePeerRequest::default_instance();
    case 2:
      return ::curve::chunkserver::ChangePeersRequest::default_instance();
    case 3:
      return ::curve::chunkserver::ResetPeerRequest::default_instance();
    case 4:
      return ::curve::chunkserver::SnapshotRequest::default_instance();
    case 5:
      return ::curve::chunkserver::GetLeaderRequest::default_instance();
    case 6:
      return ::curve::chunkserver::TransferLeaderRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& CliService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::AddPeerResponse::default_instance();
    case 1:
      return ::curve::chunkserver::RemovePeerResponse::default_instance();
    case 2:
      return ::curve::chunkserver::ChangePeersResponse::default_instance();
    case 3:
      return ::curve::chunkserver::ResetPeerResponse::default_instance();
    case 4:
      return ::curve::chunkserver::SnapshotResponse::default_instance();
    case 5:
      return ::curve::chunkserver::GetLeaderResponse::default_instance();
    case 6:
      return ::curve::chunkserver::TransferLeaderResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

CliService_Stub::CliService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CliService_Stub::CliService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
CliService_Stub::~CliService_Stub() {
  if (owns_channel_) delete channel_;
}

void CliService_Stub::add_peer(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::AddPeerRequest* request,
                              ::curve::chunkserver::AddPeerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void CliService_Stub::remove_peer(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::RemovePeerRequest* request,
                              ::curve::chunkserver::RemovePeerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void CliService_Stub::change_peers(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ChangePeersRequest* request,
                              ::curve::chunkserver::ChangePeersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void CliService_Stub::reset_peer(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ResetPeerRequest* request,
                              ::curve::chunkserver::ResetPeerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void CliService_Stub::snapshot(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::SnapshotRequest* request,
                              ::curve::chunkserver::SnapshotResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void CliService_Stub::get_leader(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::GetLeaderRequest* request,
                              ::curve::chunkserver::GetLeaderResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void CliService_Stub::transfer_leader(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::TransferLeaderRequest* request,
                              ::curve::chunkserver::TransferLeaderResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::AddPeerRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::AddPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::AddPeerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::AddPeerResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::AddPeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::AddPeerResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::RemovePeerRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::RemovePeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::RemovePeerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::RemovePeerResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::RemovePeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::RemovePeerResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ChangePeersRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::ChangePeersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ChangePeersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ChangePeersResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::ChangePeersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ChangePeersResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::SnapshotRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::SnapshotRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::SnapshotRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ResetPeerRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::ResetPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ResetPeerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::TransferLeaderRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::TransferLeaderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::TransferLeaderRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::TransferLeaderResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::TransferLeaderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::TransferLeaderResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ResetPeerResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::ResetPeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ResetPeerResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::SnapshotResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::SnapshotResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::SnapshotResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::GetLeaderRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::GetLeaderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::GetLeaderRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::GetLeaderResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::GetLeaderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::GetLeaderResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
