// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/cli.proto

#ifndef PROTOBUF_INCLUDED_proto_2fcli_2eproto
#define PROTOBUF_INCLUDED_proto_2fcli_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fcli_2eproto 

namespace protobuf_proto_2fcli_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fcli_2eproto
namespace curve {
namespace chunkserver {
class AddPeerRequest;
class AddPeerRequestDefaultTypeInternal;
extern AddPeerRequestDefaultTypeInternal _AddPeerRequest_default_instance_;
class AddPeerResponse;
class AddPeerResponseDefaultTypeInternal;
extern AddPeerResponseDefaultTypeInternal _AddPeerResponse_default_instance_;
class ChangePeersRequest;
class ChangePeersRequestDefaultTypeInternal;
extern ChangePeersRequestDefaultTypeInternal _ChangePeersRequest_default_instance_;
class ChangePeersResponse;
class ChangePeersResponseDefaultTypeInternal;
extern ChangePeersResponseDefaultTypeInternal _ChangePeersResponse_default_instance_;
class GetLeaderRequest;
class GetLeaderRequestDefaultTypeInternal;
extern GetLeaderRequestDefaultTypeInternal _GetLeaderRequest_default_instance_;
class GetLeaderResponse;
class GetLeaderResponseDefaultTypeInternal;
extern GetLeaderResponseDefaultTypeInternal _GetLeaderResponse_default_instance_;
class RemovePeerRequest;
class RemovePeerRequestDefaultTypeInternal;
extern RemovePeerRequestDefaultTypeInternal _RemovePeerRequest_default_instance_;
class RemovePeerResponse;
class RemovePeerResponseDefaultTypeInternal;
extern RemovePeerResponseDefaultTypeInternal _RemovePeerResponse_default_instance_;
class ResetPeerRequest;
class ResetPeerRequestDefaultTypeInternal;
extern ResetPeerRequestDefaultTypeInternal _ResetPeerRequest_default_instance_;
class ResetPeerResponse;
class ResetPeerResponseDefaultTypeInternal;
extern ResetPeerResponseDefaultTypeInternal _ResetPeerResponse_default_instance_;
class SnapshotRequest;
class SnapshotRequestDefaultTypeInternal;
extern SnapshotRequestDefaultTypeInternal _SnapshotRequest_default_instance_;
class SnapshotResponse;
class SnapshotResponseDefaultTypeInternal;
extern SnapshotResponseDefaultTypeInternal _SnapshotResponse_default_instance_;
class TransferLeaderRequest;
class TransferLeaderRequestDefaultTypeInternal;
extern TransferLeaderRequestDefaultTypeInternal _TransferLeaderRequest_default_instance_;
class TransferLeaderResponse;
class TransferLeaderResponseDefaultTypeInternal;
extern TransferLeaderResponseDefaultTypeInternal _TransferLeaderResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> ::curve::chunkserver::AddPeerRequest* Arena::CreateMaybeMessage<::curve::chunkserver::AddPeerRequest>(Arena*);
template<> ::curve::chunkserver::AddPeerResponse* Arena::CreateMaybeMessage<::curve::chunkserver::AddPeerResponse>(Arena*);
template<> ::curve::chunkserver::ChangePeersRequest* Arena::CreateMaybeMessage<::curve::chunkserver::ChangePeersRequest>(Arena*);
template<> ::curve::chunkserver::ChangePeersResponse* Arena::CreateMaybeMessage<::curve::chunkserver::ChangePeersResponse>(Arena*);
template<> ::curve::chunkserver::GetLeaderRequest* Arena::CreateMaybeMessage<::curve::chunkserver::GetLeaderRequest>(Arena*);
template<> ::curve::chunkserver::GetLeaderResponse* Arena::CreateMaybeMessage<::curve::chunkserver::GetLeaderResponse>(Arena*);
template<> ::curve::chunkserver::RemovePeerRequest* Arena::CreateMaybeMessage<::curve::chunkserver::RemovePeerRequest>(Arena*);
template<> ::curve::chunkserver::RemovePeerResponse* Arena::CreateMaybeMessage<::curve::chunkserver::RemovePeerResponse>(Arena*);
template<> ::curve::chunkserver::ResetPeerRequest* Arena::CreateMaybeMessage<::curve::chunkserver::ResetPeerRequest>(Arena*);
template<> ::curve::chunkserver::ResetPeerResponse* Arena::CreateMaybeMessage<::curve::chunkserver::ResetPeerResponse>(Arena*);
template<> ::curve::chunkserver::SnapshotRequest* Arena::CreateMaybeMessage<::curve::chunkserver::SnapshotRequest>(Arena*);
template<> ::curve::chunkserver::SnapshotResponse* Arena::CreateMaybeMessage<::curve::chunkserver::SnapshotResponse>(Arena*);
template<> ::curve::chunkserver::TransferLeaderRequest* Arena::CreateMaybeMessage<::curve::chunkserver::TransferLeaderRequest>(Arena*);
template<> ::curve::chunkserver::TransferLeaderResponse* Arena::CreateMaybeMessage<::curve::chunkserver::TransferLeaderResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace curve {
namespace chunkserver {

// ===================================================================

class AddPeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.AddPeerRequest) */ {
 public:
  AddPeerRequest();
  virtual ~AddPeerRequest();

  AddPeerRequest(const AddPeerRequest& from);

  inline AddPeerRequest& operator=(const AddPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPeerRequest(AddPeerRequest&& from) noexcept
    : AddPeerRequest() {
    *this = ::std::move(from);
  }

  inline AddPeerRequest& operator=(AddPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPeerRequest* internal_default_instance() {
    return reinterpret_cast<const AddPeerRequest*>(
               &_AddPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddPeerRequest* other);
  friend void swap(AddPeerRequest& a, AddPeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPeerRequest* New() const final {
    return CreateMaybeMessage<AddPeerRequest>(NULL);
  }

  AddPeerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddPeerRequest& from);
  void MergeFrom(const AddPeerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string leader_id = 3;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_id(::std::string&& value);
  #endif
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // required string peer_id = 4;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 4;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required uint32 logicPoolId = 1;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 1;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint32 copysetId = 2;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 2;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.AddPeerRequest)
 private:
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();
  void set_has_leader_id();
  void clear_has_leader_id();
  void set_has_peer_id();
  void clear_has_peer_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint32 copysetid_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddPeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.AddPeerResponse) */ {
 public:
  AddPeerResponse();
  virtual ~AddPeerResponse();

  AddPeerResponse(const AddPeerResponse& from);

  inline AddPeerResponse& operator=(const AddPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddPeerResponse(AddPeerResponse&& from) noexcept
    : AddPeerResponse() {
    *this = ::std::move(from);
  }

  inline AddPeerResponse& operator=(AddPeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddPeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPeerResponse* internal_default_instance() {
    return reinterpret_cast<const AddPeerResponse*>(
               &_AddPeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddPeerResponse* other);
  friend void swap(AddPeerResponse& a, AddPeerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddPeerResponse* New() const final {
    return CreateMaybeMessage<AddPeerResponse>(NULL);
  }

  AddPeerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddPeerResponse& from);
  void MergeFrom(const AddPeerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string old_peers = 1;
  int old_peers_size() const;
  void clear_old_peers();
  static const int kOldPeersFieldNumber = 1;
  const ::std::string& old_peers(int index) const;
  ::std::string* mutable_old_peers(int index);
  void set_old_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_old_peers(int index, ::std::string&& value);
  #endif
  void set_old_peers(int index, const char* value);
  void set_old_peers(int index, const char* value, size_t size);
  ::std::string* add_old_peers();
  void add_old_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_old_peers(::std::string&& value);
  #endif
  void add_old_peers(const char* value);
  void add_old_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();

  // repeated string new_peers = 2;
  int new_peers_size() const;
  void clear_new_peers();
  static const int kNewPeersFieldNumber = 2;
  const ::std::string& new_peers(int index) const;
  ::std::string* mutable_new_peers(int index);
  void set_new_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_new_peers(int index, ::std::string&& value);
  #endif
  void set_new_peers(int index, const char* value);
  void set_new_peers(int index, const char* value, size_t size);
  ::std::string* add_new_peers();
  void add_new_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_new_peers(::std::string&& value);
  #endif
  void add_new_peers(const char* value);
  void add_new_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();

  // @@protoc_insertion_point(class_scope:curve.chunkserver.AddPeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.RemovePeerRequest) */ {
 public:
  RemovePeerRequest();
  virtual ~RemovePeerRequest();

  RemovePeerRequest(const RemovePeerRequest& from);

  inline RemovePeerRequest& operator=(const RemovePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemovePeerRequest(RemovePeerRequest&& from) noexcept
    : RemovePeerRequest() {
    *this = ::std::move(from);
  }

  inline RemovePeerRequest& operator=(RemovePeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerRequest* internal_default_instance() {
    return reinterpret_cast<const RemovePeerRequest*>(
               &_RemovePeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RemovePeerRequest* other);
  friend void swap(RemovePeerRequest& a, RemovePeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerRequest* New() const final {
    return CreateMaybeMessage<RemovePeerRequest>(NULL);
  }

  RemovePeerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemovePeerRequest& from);
  void MergeFrom(const RemovePeerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string leader_id = 3;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_id(::std::string&& value);
  #endif
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // required string peer_id = 4;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 4;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required uint32 logicPoolId = 1;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 1;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint32 copysetId = 2;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 2;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.RemovePeerRequest)
 private:
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();
  void set_has_leader_id();
  void clear_has_leader_id();
  void set_has_peer_id();
  void clear_has_peer_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint32 copysetid_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.RemovePeerResponse) */ {
 public:
  RemovePeerResponse();
  virtual ~RemovePeerResponse();

  RemovePeerResponse(const RemovePeerResponse& from);

  inline RemovePeerResponse& operator=(const RemovePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemovePeerResponse(RemovePeerResponse&& from) noexcept
    : RemovePeerResponse() {
    *this = ::std::move(from);
  }

  inline RemovePeerResponse& operator=(RemovePeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerResponse* internal_default_instance() {
    return reinterpret_cast<const RemovePeerResponse*>(
               &_RemovePeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RemovePeerResponse* other);
  friend void swap(RemovePeerResponse& a, RemovePeerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerResponse* New() const final {
    return CreateMaybeMessage<RemovePeerResponse>(NULL);
  }

  RemovePeerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemovePeerResponse& from);
  void MergeFrom(const RemovePeerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string old_peers = 1;
  int old_peers_size() const;
  void clear_old_peers();
  static const int kOldPeersFieldNumber = 1;
  const ::std::string& old_peers(int index) const;
  ::std::string* mutable_old_peers(int index);
  void set_old_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_old_peers(int index, ::std::string&& value);
  #endif
  void set_old_peers(int index, const char* value);
  void set_old_peers(int index, const char* value, size_t size);
  ::std::string* add_old_peers();
  void add_old_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_old_peers(::std::string&& value);
  #endif
  void add_old_peers(const char* value);
  void add_old_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();

  // repeated string new_peers = 2;
  int new_peers_size() const;
  void clear_new_peers();
  static const int kNewPeersFieldNumber = 2;
  const ::std::string& new_peers(int index) const;
  ::std::string* mutable_new_peers(int index);
  void set_new_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_new_peers(int index, ::std::string&& value);
  #endif
  void set_new_peers(int index, const char* value);
  void set_new_peers(int index, const char* value, size_t size);
  ::std::string* add_new_peers();
  void add_new_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_new_peers(::std::string&& value);
  #endif
  void add_new_peers(const char* value);
  void add_new_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();

  // @@protoc_insertion_point(class_scope:curve.chunkserver.RemovePeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangePeersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ChangePeersRequest) */ {
 public:
  ChangePeersRequest();
  virtual ~ChangePeersRequest();

  ChangePeersRequest(const ChangePeersRequest& from);

  inline ChangePeersRequest& operator=(const ChangePeersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangePeersRequest(ChangePeersRequest&& from) noexcept
    : ChangePeersRequest() {
    *this = ::std::move(from);
  }

  inline ChangePeersRequest& operator=(ChangePeersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePeersRequest* internal_default_instance() {
    return reinterpret_cast<const ChangePeersRequest*>(
               &_ChangePeersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ChangePeersRequest* other);
  friend void swap(ChangePeersRequest& a, ChangePeersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangePeersRequest* New() const final {
    return CreateMaybeMessage<ChangePeersRequest>(NULL);
  }

  ChangePeersRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangePeersRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangePeersRequest& from);
  void MergeFrom(const ChangePeersRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePeersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string new_peers = 4;
  int new_peers_size() const;
  void clear_new_peers();
  static const int kNewPeersFieldNumber = 4;
  const ::std::string& new_peers(int index) const;
  ::std::string* mutable_new_peers(int index);
  void set_new_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_new_peers(int index, ::std::string&& value);
  #endif
  void set_new_peers(int index, const char* value);
  void set_new_peers(int index, const char* value, size_t size);
  ::std::string* add_new_peers();
  void add_new_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_new_peers(::std::string&& value);
  #endif
  void add_new_peers(const char* value);
  void add_new_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();

  // required string leader_id = 3;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_id(::std::string&& value);
  #endif
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // required uint32 logicPoolId = 1;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 1;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint32 copysetId = 2;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 2;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ChangePeersRequest)
 private:
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();
  void set_has_leader_id();
  void clear_has_leader_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint32 copysetid_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangePeersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ChangePeersResponse) */ {
 public:
  ChangePeersResponse();
  virtual ~ChangePeersResponse();

  ChangePeersResponse(const ChangePeersResponse& from);

  inline ChangePeersResponse& operator=(const ChangePeersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangePeersResponse(ChangePeersResponse&& from) noexcept
    : ChangePeersResponse() {
    *this = ::std::move(from);
  }

  inline ChangePeersResponse& operator=(ChangePeersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePeersResponse* internal_default_instance() {
    return reinterpret_cast<const ChangePeersResponse*>(
               &_ChangePeersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ChangePeersResponse* other);
  friend void swap(ChangePeersResponse& a, ChangePeersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangePeersResponse* New() const final {
    return CreateMaybeMessage<ChangePeersResponse>(NULL);
  }

  ChangePeersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangePeersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangePeersResponse& from);
  void MergeFrom(const ChangePeersResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePeersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string old_peers = 1;
  int old_peers_size() const;
  void clear_old_peers();
  static const int kOldPeersFieldNumber = 1;
  const ::std::string& old_peers(int index) const;
  ::std::string* mutable_old_peers(int index);
  void set_old_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_old_peers(int index, ::std::string&& value);
  #endif
  void set_old_peers(int index, const char* value);
  void set_old_peers(int index, const char* value, size_t size);
  ::std::string* add_old_peers();
  void add_old_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_old_peers(::std::string&& value);
  #endif
  void add_old_peers(const char* value);
  void add_old_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();

  // repeated string new_peers = 2;
  int new_peers_size() const;
  void clear_new_peers();
  static const int kNewPeersFieldNumber = 2;
  const ::std::string& new_peers(int index) const;
  ::std::string* mutable_new_peers(int index);
  void set_new_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_new_peers(int index, ::std::string&& value);
  #endif
  void set_new_peers(int index, const char* value);
  void set_new_peers(int index, const char* value, size_t size);
  ::std::string* add_new_peers();
  void add_new_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_new_peers(::std::string&& value);
  #endif
  void add_new_peers(const char* value);
  void add_new_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ChangePeersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapshotRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.SnapshotRequest) */ {
 public:
  SnapshotRequest();
  virtual ~SnapshotRequest();

  SnapshotRequest(const SnapshotRequest& from);

  inline SnapshotRequest& operator=(const SnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotRequest(SnapshotRequest&& from) noexcept
    : SnapshotRequest() {
    *this = ::std::move(from);
  }

  inline SnapshotRequest& operator=(SnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const SnapshotRequest*>(
               &_SnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SnapshotRequest* other);
  friend void swap(SnapshotRequest& a, SnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotRequest* New() const final {
    return CreateMaybeMessage<SnapshotRequest>(NULL);
  }

  SnapshotRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SnapshotRequest& from);
  void MergeFrom(const SnapshotRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string peer_id = 3;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required uint32 logicPoolId = 1;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 1;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint32 copysetId = 2;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 2;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.SnapshotRequest)
 private:
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();
  void set_has_peer_id();
  void clear_has_peer_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint32 copysetid_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetPeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ResetPeerRequest) */ {
 public:
  ResetPeerRequest();
  virtual ~ResetPeerRequest();

  ResetPeerRequest(const ResetPeerRequest& from);

  inline ResetPeerRequest& operator=(const ResetPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetPeerRequest(ResetPeerRequest&& from) noexcept
    : ResetPeerRequest() {
    *this = ::std::move(from);
  }

  inline ResetPeerRequest& operator=(ResetPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetPeerRequest* internal_default_instance() {
    return reinterpret_cast<const ResetPeerRequest*>(
               &_ResetPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ResetPeerRequest* other);
  friend void swap(ResetPeerRequest& a, ResetPeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetPeerRequest* New() const final {
    return CreateMaybeMessage<ResetPeerRequest>(NULL);
  }

  ResetPeerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetPeerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetPeerRequest& from);
  void MergeFrom(const ResetPeerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetPeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string old_peers = 4;
  int old_peers_size() const;
  void clear_old_peers();
  static const int kOldPeersFieldNumber = 4;
  const ::std::string& old_peers(int index) const;
  ::std::string* mutable_old_peers(int index);
  void set_old_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_old_peers(int index, ::std::string&& value);
  #endif
  void set_old_peers(int index, const char* value);
  void set_old_peers(int index, const char* value, size_t size);
  ::std::string* add_old_peers();
  void add_old_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_old_peers(::std::string&& value);
  #endif
  void add_old_peers(const char* value);
  void add_old_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();

  // repeated string new_peers = 5;
  int new_peers_size() const;
  void clear_new_peers();
  static const int kNewPeersFieldNumber = 5;
  const ::std::string& new_peers(int index) const;
  ::std::string* mutable_new_peers(int index);
  void set_new_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_new_peers(int index, ::std::string&& value);
  #endif
  void set_new_peers(int index, const char* value);
  void set_new_peers(int index, const char* value, size_t size);
  ::std::string* add_new_peers();
  void add_new_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_new_peers(::std::string&& value);
  #endif
  void add_new_peers(const char* value);
  void add_new_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& new_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_peers();

  // required string peer_id = 3;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required uint32 logicPoolId = 1;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 1;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint32 copysetId = 2;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 2;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ResetPeerRequest)
 private:
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();
  void set_has_peer_id();
  void clear_has_peer_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_peers_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint32 copysetid_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferLeaderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.TransferLeaderRequest) */ {
 public:
  TransferLeaderRequest();
  virtual ~TransferLeaderRequest();

  TransferLeaderRequest(const TransferLeaderRequest& from);

  inline TransferLeaderRequest& operator=(const TransferLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferLeaderRequest(TransferLeaderRequest&& from) noexcept
    : TransferLeaderRequest() {
    *this = ::std::move(from);
  }

  inline TransferLeaderRequest& operator=(TransferLeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferLeaderRequest* internal_default_instance() {
    return reinterpret_cast<const TransferLeaderRequest*>(
               &_TransferLeaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TransferLeaderRequest* other);
  friend void swap(TransferLeaderRequest& a, TransferLeaderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferLeaderRequest* New() const final {
    return CreateMaybeMessage<TransferLeaderRequest>(NULL);
  }

  TransferLeaderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferLeaderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferLeaderRequest& from);
  void MergeFrom(const TransferLeaderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferLeaderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string leader_id = 3;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_id(::std::string&& value);
  #endif
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // optional string peer_id = 4;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 4;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required uint32 logicPoolId = 1;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 1;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint32 copysetId = 2;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 2;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.TransferLeaderRequest)
 private:
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();
  void set_has_leader_id();
  void clear_has_leader_id();
  void set_has_peer_id();
  void clear_has_peer_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint32 copysetid_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferLeaderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.TransferLeaderResponse) */ {
 public:
  TransferLeaderResponse();
  virtual ~TransferLeaderResponse();

  TransferLeaderResponse(const TransferLeaderResponse& from);

  inline TransferLeaderResponse& operator=(const TransferLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferLeaderResponse(TransferLeaderResponse&& from) noexcept
    : TransferLeaderResponse() {
    *this = ::std::move(from);
  }

  inline TransferLeaderResponse& operator=(TransferLeaderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferLeaderResponse* internal_default_instance() {
    return reinterpret_cast<const TransferLeaderResponse*>(
               &_TransferLeaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TransferLeaderResponse* other);
  friend void swap(TransferLeaderResponse& a, TransferLeaderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferLeaderResponse* New() const final {
    return CreateMaybeMessage<TransferLeaderResponse>(NULL);
  }

  TransferLeaderResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferLeaderResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferLeaderResponse& from);
  void MergeFrom(const TransferLeaderResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferLeaderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:curve.chunkserver.TransferLeaderResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetPeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ResetPeerResponse) */ {
 public:
  ResetPeerResponse();
  virtual ~ResetPeerResponse();

  ResetPeerResponse(const ResetPeerResponse& from);

  inline ResetPeerResponse& operator=(const ResetPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResetPeerResponse(ResetPeerResponse&& from) noexcept
    : ResetPeerResponse() {
    *this = ::std::move(from);
  }

  inline ResetPeerResponse& operator=(ResetPeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetPeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetPeerResponse* internal_default_instance() {
    return reinterpret_cast<const ResetPeerResponse*>(
               &_ResetPeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ResetPeerResponse* other);
  friend void swap(ResetPeerResponse& a, ResetPeerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResetPeerResponse* New() const final {
    return CreateMaybeMessage<ResetPeerResponse>(NULL);
  }

  ResetPeerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResetPeerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResetPeerResponse& from);
  void MergeFrom(const ResetPeerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetPeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ResetPeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapshotResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.SnapshotResponse) */ {
 public:
  SnapshotResponse();
  virtual ~SnapshotResponse();

  SnapshotResponse(const SnapshotResponse& from);

  inline SnapshotResponse& operator=(const SnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotResponse(SnapshotResponse&& from) noexcept
    : SnapshotResponse() {
    *this = ::std::move(from);
  }

  inline SnapshotResponse& operator=(SnapshotResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const SnapshotResponse*>(
               &_SnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SnapshotResponse* other);
  friend void swap(SnapshotResponse& a, SnapshotResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotResponse* New() const final {
    return CreateMaybeMessage<SnapshotResponse>(NULL);
  }

  SnapshotResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SnapshotResponse& from);
  void MergeFrom(const SnapshotResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:curve.chunkserver.SnapshotResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLeaderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.GetLeaderRequest) */ {
 public:
  GetLeaderRequest();
  virtual ~GetLeaderRequest();

  GetLeaderRequest(const GetLeaderRequest& from);

  inline GetLeaderRequest& operator=(const GetLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLeaderRequest(GetLeaderRequest&& from) noexcept
    : GetLeaderRequest() {
    *this = ::std::move(from);
  }

  inline GetLeaderRequest& operator=(GetLeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLeaderRequest* internal_default_instance() {
    return reinterpret_cast<const GetLeaderRequest*>(
               &_GetLeaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GetLeaderRequest* other);
  friend void swap(GetLeaderRequest& a, GetLeaderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLeaderRequest* New() const final {
    return CreateMaybeMessage<GetLeaderRequest>(NULL);
  }

  GetLeaderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetLeaderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetLeaderRequest& from);
  void MergeFrom(const GetLeaderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLeaderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string peer_id = 3;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required uint32 logicPoolId = 1;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 1;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint32 copysetId = 2;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 2;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.GetLeaderRequest)
 private:
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();
  void set_has_peer_id();
  void clear_has_peer_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint32 copysetid_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetLeaderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.GetLeaderResponse) */ {
 public:
  GetLeaderResponse();
  virtual ~GetLeaderResponse();

  GetLeaderResponse(const GetLeaderResponse& from);

  inline GetLeaderResponse& operator=(const GetLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetLeaderResponse(GetLeaderResponse&& from) noexcept
    : GetLeaderResponse() {
    *this = ::std::move(from);
  }

  inline GetLeaderResponse& operator=(GetLeaderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLeaderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLeaderResponse* internal_default_instance() {
    return reinterpret_cast<const GetLeaderResponse*>(
               &_GetLeaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetLeaderResponse* other);
  friend void swap(GetLeaderResponse& a, GetLeaderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetLeaderResponse* New() const final {
    return CreateMaybeMessage<GetLeaderResponse>(NULL);
  }

  GetLeaderResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetLeaderResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetLeaderResponse& from);
  void MergeFrom(const GetLeaderResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLeaderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string leader_id = 1;
  bool has_leader_id() const;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 1;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_id(::std::string&& value);
  #endif
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.GetLeaderResponse)
 private:
  void set_has_leader_id();
  void clear_has_leader_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  friend struct ::protobuf_proto_2fcli_2eproto::TableStruct;
};
// ===================================================================

class CliService_Stub;

class CliService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CliService() {};
 public:
  virtual ~CliService();

  typedef CliService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void add_peer(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::AddPeerRequest* request,
                       ::curve::chunkserver::AddPeerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void remove_peer(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::RemovePeerRequest* request,
                       ::curve::chunkserver::RemovePeerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void change_peers(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChangePeersRequest* request,
                       ::curve::chunkserver::ChangePeersResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void reset_peer(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ResetPeerRequest* request,
                       ::curve::chunkserver::ResetPeerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void snapshot(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::SnapshotRequest* request,
                       ::curve::chunkserver::SnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void get_leader(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::GetLeaderRequest* request,
                       ::curve::chunkserver::GetLeaderResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void transfer_leader(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::TransferLeaderRequest* request,
                       ::curve::chunkserver::TransferLeaderResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CliService);
};

class CliService_Stub : public CliService {
 public:
  CliService_Stub(::google::protobuf::RpcChannel* channel);
  CliService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~CliService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements CliService ------------------------------------------

  void add_peer(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::AddPeerRequest* request,
                       ::curve::chunkserver::AddPeerResponse* response,
                       ::google::protobuf::Closure* done);
  void remove_peer(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::RemovePeerRequest* request,
                       ::curve::chunkserver::RemovePeerResponse* response,
                       ::google::protobuf::Closure* done);
  void change_peers(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChangePeersRequest* request,
                       ::curve::chunkserver::ChangePeersResponse* response,
                       ::google::protobuf::Closure* done);
  void reset_peer(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ResetPeerRequest* request,
                       ::curve::chunkserver::ResetPeerResponse* response,
                       ::google::protobuf::Closure* done);
  void snapshot(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::SnapshotRequest* request,
                       ::curve::chunkserver::SnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  void get_leader(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::GetLeaderRequest* request,
                       ::curve::chunkserver::GetLeaderResponse* response,
                       ::google::protobuf::Closure* done);
  void transfer_leader(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::TransferLeaderRequest* request,
                       ::curve::chunkserver::TransferLeaderResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CliService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddPeerRequest

// required uint32 logicPoolId = 1;
inline bool AddPeerRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddPeerRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddPeerRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddPeerRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 AddPeerRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.AddPeerRequest.logicPoolId)
  return logicpoolid_;
}
inline void AddPeerRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.AddPeerRequest.logicPoolId)
}

// required uint32 copysetId = 2;
inline bool AddPeerRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddPeerRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddPeerRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddPeerRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 AddPeerRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.AddPeerRequest.copysetId)
  return copysetid_;
}
inline void AddPeerRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.AddPeerRequest.copysetId)
}

// required string leader_id = 3;
inline bool AddPeerRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddPeerRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddPeerRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddPeerRequest::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_id();
}
inline const ::std::string& AddPeerRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.AddPeerRequest.leader_id)
  return leader_id_.GetNoArena();
}
inline void AddPeerRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.AddPeerRequest.leader_id)
}
#if LANG_CXX11
inline void AddPeerRequest::set_leader_id(::std::string&& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.AddPeerRequest.leader_id)
}
#endif
inline void AddPeerRequest::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.AddPeerRequest.leader_id)
}
inline void AddPeerRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.AddPeerRequest.leader_id)
}
inline ::std::string* AddPeerRequest::mutable_leader_id() {
  set_has_leader_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.AddPeerRequest.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddPeerRequest::release_leader_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.AddPeerRequest.leader_id)
  if (!has_leader_id()) {
    return NULL;
  }
  clear_has_leader_id();
  return leader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddPeerRequest::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    set_has_leader_id();
  } else {
    clear_has_leader_id();
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.AddPeerRequest.leader_id)
}

// required string peer_id = 4;
inline bool AddPeerRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddPeerRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddPeerRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddPeerRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& AddPeerRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.AddPeerRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void AddPeerRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.AddPeerRequest.peer_id)
}
#if LANG_CXX11
inline void AddPeerRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.AddPeerRequest.peer_id)
}
#endif
inline void AddPeerRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.AddPeerRequest.peer_id)
}
inline void AddPeerRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.AddPeerRequest.peer_id)
}
inline ::std::string* AddPeerRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.AddPeerRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddPeerRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.AddPeerRequest.peer_id)
  if (!has_peer_id()) {
    return NULL;
  }
  clear_has_peer_id();
  return peer_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddPeerRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.AddPeerRequest.peer_id)
}

// -------------------------------------------------------------------

// AddPeerResponse

// repeated string old_peers = 1;
inline int AddPeerResponse::old_peers_size() const {
  return old_peers_.size();
}
inline void AddPeerResponse::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& AddPeerResponse::old_peers(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.AddPeerResponse.old_peers)
  return old_peers_.Get(index);
}
inline ::std::string* AddPeerResponse::mutable_old_peers(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.AddPeerResponse.old_peers)
  return old_peers_.Mutable(index);
}
inline void AddPeerResponse::set_old_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.AddPeerResponse.old_peers)
  old_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AddPeerResponse::set_old_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.AddPeerResponse.old_peers)
  old_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AddPeerResponse::set_old_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.AddPeerResponse.old_peers)
}
inline void AddPeerResponse::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.AddPeerResponse.old_peers)
}
inline ::std::string* AddPeerResponse::add_old_peers() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.AddPeerResponse.old_peers)
  return old_peers_.Add();
}
inline void AddPeerResponse::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.AddPeerResponse.old_peers)
}
#if LANG_CXX11
inline void AddPeerResponse::add_old_peers(::std::string&& value) {
  old_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.AddPeerResponse.old_peers)
}
#endif
inline void AddPeerResponse::add_old_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.AddPeerResponse.old_peers)
}
inline void AddPeerResponse::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.AddPeerResponse.old_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddPeerResponse::old_peers() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.AddPeerResponse.old_peers)
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddPeerResponse::mutable_old_peers() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.AddPeerResponse.old_peers)
  return &old_peers_;
}

// repeated string new_peers = 2;
inline int AddPeerResponse::new_peers_size() const {
  return new_peers_.size();
}
inline void AddPeerResponse::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& AddPeerResponse::new_peers(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.AddPeerResponse.new_peers)
  return new_peers_.Get(index);
}
inline ::std::string* AddPeerResponse::mutable_new_peers(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.AddPeerResponse.new_peers)
  return new_peers_.Mutable(index);
}
inline void AddPeerResponse::set_new_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.AddPeerResponse.new_peers)
  new_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AddPeerResponse::set_new_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.AddPeerResponse.new_peers)
  new_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AddPeerResponse::set_new_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.AddPeerResponse.new_peers)
}
inline void AddPeerResponse::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.AddPeerResponse.new_peers)
}
inline ::std::string* AddPeerResponse::add_new_peers() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.AddPeerResponse.new_peers)
  return new_peers_.Add();
}
inline void AddPeerResponse::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.AddPeerResponse.new_peers)
}
#if LANG_CXX11
inline void AddPeerResponse::add_new_peers(::std::string&& value) {
  new_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.AddPeerResponse.new_peers)
}
#endif
inline void AddPeerResponse::add_new_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.AddPeerResponse.new_peers)
}
inline void AddPeerResponse::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.AddPeerResponse.new_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddPeerResponse::new_peers() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.AddPeerResponse.new_peers)
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddPeerResponse::mutable_new_peers() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.AddPeerResponse.new_peers)
  return &new_peers_;
}

// -------------------------------------------------------------------

// RemovePeerRequest

// required uint32 logicPoolId = 1;
inline bool RemovePeerRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemovePeerRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemovePeerRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemovePeerRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 RemovePeerRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.RemovePeerRequest.logicPoolId)
  return logicpoolid_;
}
inline void RemovePeerRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.RemovePeerRequest.logicPoolId)
}

// required uint32 copysetId = 2;
inline bool RemovePeerRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemovePeerRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RemovePeerRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RemovePeerRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 RemovePeerRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.RemovePeerRequest.copysetId)
  return copysetid_;
}
inline void RemovePeerRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.RemovePeerRequest.copysetId)
}

// required string leader_id = 3;
inline bool RemovePeerRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemovePeerRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemovePeerRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemovePeerRequest::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_id();
}
inline const ::std::string& RemovePeerRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.RemovePeerRequest.leader_id)
  return leader_id_.GetNoArena();
}
inline void RemovePeerRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.RemovePeerRequest.leader_id)
}
#if LANG_CXX11
inline void RemovePeerRequest::set_leader_id(::std::string&& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.RemovePeerRequest.leader_id)
}
#endif
inline void RemovePeerRequest::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.RemovePeerRequest.leader_id)
}
inline void RemovePeerRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.RemovePeerRequest.leader_id)
}
inline ::std::string* RemovePeerRequest::mutable_leader_id() {
  set_has_leader_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.RemovePeerRequest.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePeerRequest::release_leader_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.RemovePeerRequest.leader_id)
  if (!has_leader_id()) {
    return NULL;
  }
  clear_has_leader_id();
  return leader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerRequest::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    set_has_leader_id();
  } else {
    clear_has_leader_id();
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.RemovePeerRequest.leader_id)
}

// required string peer_id = 4;
inline bool RemovePeerRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemovePeerRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemovePeerRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemovePeerRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& RemovePeerRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.RemovePeerRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void RemovePeerRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.RemovePeerRequest.peer_id)
}
#if LANG_CXX11
inline void RemovePeerRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.RemovePeerRequest.peer_id)
}
#endif
inline void RemovePeerRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.RemovePeerRequest.peer_id)
}
inline void RemovePeerRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.RemovePeerRequest.peer_id)
}
inline ::std::string* RemovePeerRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.RemovePeerRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePeerRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.RemovePeerRequest.peer_id)
  if (!has_peer_id()) {
    return NULL;
  }
  clear_has_peer_id();
  return peer_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.RemovePeerRequest.peer_id)
}

// -------------------------------------------------------------------

// RemovePeerResponse

// repeated string old_peers = 1;
inline int RemovePeerResponse::old_peers_size() const {
  return old_peers_.size();
}
inline void RemovePeerResponse::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& RemovePeerResponse::old_peers(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.RemovePeerResponse.old_peers)
  return old_peers_.Get(index);
}
inline ::std::string* RemovePeerResponse::mutable_old_peers(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.RemovePeerResponse.old_peers)
  return old_peers_.Mutable(index);
}
inline void RemovePeerResponse::set_old_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.RemovePeerResponse.old_peers)
  old_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RemovePeerResponse::set_old_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.RemovePeerResponse.old_peers)
  old_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RemovePeerResponse::set_old_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.RemovePeerResponse.old_peers)
}
inline void RemovePeerResponse::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.RemovePeerResponse.old_peers)
}
inline ::std::string* RemovePeerResponse::add_old_peers() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.RemovePeerResponse.old_peers)
  return old_peers_.Add();
}
inline void RemovePeerResponse::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.RemovePeerResponse.old_peers)
}
#if LANG_CXX11
inline void RemovePeerResponse::add_old_peers(::std::string&& value) {
  old_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.RemovePeerResponse.old_peers)
}
#endif
inline void RemovePeerResponse::add_old_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.RemovePeerResponse.old_peers)
}
inline void RemovePeerResponse::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.RemovePeerResponse.old_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RemovePeerResponse::old_peers() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.RemovePeerResponse.old_peers)
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RemovePeerResponse::mutable_old_peers() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.RemovePeerResponse.old_peers)
  return &old_peers_;
}

// repeated string new_peers = 2;
inline int RemovePeerResponse::new_peers_size() const {
  return new_peers_.size();
}
inline void RemovePeerResponse::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& RemovePeerResponse::new_peers(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.RemovePeerResponse.new_peers)
  return new_peers_.Get(index);
}
inline ::std::string* RemovePeerResponse::mutable_new_peers(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.RemovePeerResponse.new_peers)
  return new_peers_.Mutable(index);
}
inline void RemovePeerResponse::set_new_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.RemovePeerResponse.new_peers)
  new_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RemovePeerResponse::set_new_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.RemovePeerResponse.new_peers)
  new_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RemovePeerResponse::set_new_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.RemovePeerResponse.new_peers)
}
inline void RemovePeerResponse::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.RemovePeerResponse.new_peers)
}
inline ::std::string* RemovePeerResponse::add_new_peers() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.RemovePeerResponse.new_peers)
  return new_peers_.Add();
}
inline void RemovePeerResponse::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.RemovePeerResponse.new_peers)
}
#if LANG_CXX11
inline void RemovePeerResponse::add_new_peers(::std::string&& value) {
  new_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.RemovePeerResponse.new_peers)
}
#endif
inline void RemovePeerResponse::add_new_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.RemovePeerResponse.new_peers)
}
inline void RemovePeerResponse::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.RemovePeerResponse.new_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RemovePeerResponse::new_peers() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.RemovePeerResponse.new_peers)
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RemovePeerResponse::mutable_new_peers() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.RemovePeerResponse.new_peers)
  return &new_peers_;
}

// -------------------------------------------------------------------

// ChangePeersRequest

// required uint32 logicPoolId = 1;
inline bool ChangePeersRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangePeersRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangePeersRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangePeersRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 ChangePeersRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChangePeersRequest.logicPoolId)
  return logicpoolid_;
}
inline void ChangePeersRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChangePeersRequest.logicPoolId)
}

// required uint32 copysetId = 2;
inline bool ChangePeersRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangePeersRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangePeersRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangePeersRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 ChangePeersRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChangePeersRequest.copysetId)
  return copysetid_;
}
inline void ChangePeersRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChangePeersRequest.copysetId)
}

// required string leader_id = 3;
inline bool ChangePeersRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePeersRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePeersRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePeersRequest::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_id();
}
inline const ::std::string& ChangePeersRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChangePeersRequest.leader_id)
  return leader_id_.GetNoArena();
}
inline void ChangePeersRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChangePeersRequest.leader_id)
}
#if LANG_CXX11
inline void ChangePeersRequest::set_leader_id(::std::string&& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.ChangePeersRequest.leader_id)
}
#endif
inline void ChangePeersRequest::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ChangePeersRequest.leader_id)
}
inline void ChangePeersRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ChangePeersRequest.leader_id)
}
inline ::std::string* ChangePeersRequest::mutable_leader_id() {
  set_has_leader_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChangePeersRequest.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangePeersRequest::release_leader_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ChangePeersRequest.leader_id)
  if (!has_leader_id()) {
    return NULL;
  }
  clear_has_leader_id();
  return leader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangePeersRequest::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    set_has_leader_id();
  } else {
    clear_has_leader_id();
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ChangePeersRequest.leader_id)
}

// repeated string new_peers = 4;
inline int ChangePeersRequest::new_peers_size() const {
  return new_peers_.size();
}
inline void ChangePeersRequest::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& ChangePeersRequest::new_peers(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChangePeersRequest.new_peers)
  return new_peers_.Get(index);
}
inline ::std::string* ChangePeersRequest::mutable_new_peers(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChangePeersRequest.new_peers)
  return new_peers_.Mutable(index);
}
inline void ChangePeersRequest::set_new_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChangePeersRequest.new_peers)
  new_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChangePeersRequest::set_new_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChangePeersRequest.new_peers)
  new_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChangePeersRequest::set_new_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ChangePeersRequest.new_peers)
}
inline void ChangePeersRequest::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ChangePeersRequest.new_peers)
}
inline ::std::string* ChangePeersRequest::add_new_peers() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.ChangePeersRequest.new_peers)
  return new_peers_.Add();
}
inline void ChangePeersRequest::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.ChangePeersRequest.new_peers)
}
#if LANG_CXX11
inline void ChangePeersRequest::add_new_peers(::std::string&& value) {
  new_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.ChangePeersRequest.new_peers)
}
#endif
inline void ChangePeersRequest::add_new_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.ChangePeersRequest.new_peers)
}
inline void ChangePeersRequest::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.ChangePeersRequest.new_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChangePeersRequest::new_peers() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.ChangePeersRequest.new_peers)
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChangePeersRequest::mutable_new_peers() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.ChangePeersRequest.new_peers)
  return &new_peers_;
}

// -------------------------------------------------------------------

// ChangePeersResponse

// repeated string old_peers = 1;
inline int ChangePeersResponse::old_peers_size() const {
  return old_peers_.size();
}
inline void ChangePeersResponse::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& ChangePeersResponse::old_peers(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChangePeersResponse.old_peers)
  return old_peers_.Get(index);
}
inline ::std::string* ChangePeersResponse::mutable_old_peers(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChangePeersResponse.old_peers)
  return old_peers_.Mutable(index);
}
inline void ChangePeersResponse::set_old_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChangePeersResponse.old_peers)
  old_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChangePeersResponse::set_old_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChangePeersResponse.old_peers)
  old_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChangePeersResponse::set_old_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ChangePeersResponse.old_peers)
}
inline void ChangePeersResponse::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ChangePeersResponse.old_peers)
}
inline ::std::string* ChangePeersResponse::add_old_peers() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.ChangePeersResponse.old_peers)
  return old_peers_.Add();
}
inline void ChangePeersResponse::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.ChangePeersResponse.old_peers)
}
#if LANG_CXX11
inline void ChangePeersResponse::add_old_peers(::std::string&& value) {
  old_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.ChangePeersResponse.old_peers)
}
#endif
inline void ChangePeersResponse::add_old_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.ChangePeersResponse.old_peers)
}
inline void ChangePeersResponse::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.ChangePeersResponse.old_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChangePeersResponse::old_peers() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.ChangePeersResponse.old_peers)
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChangePeersResponse::mutable_old_peers() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.ChangePeersResponse.old_peers)
  return &old_peers_;
}

// repeated string new_peers = 2;
inline int ChangePeersResponse::new_peers_size() const {
  return new_peers_.size();
}
inline void ChangePeersResponse::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& ChangePeersResponse::new_peers(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChangePeersResponse.new_peers)
  return new_peers_.Get(index);
}
inline ::std::string* ChangePeersResponse::mutable_new_peers(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChangePeersResponse.new_peers)
  return new_peers_.Mutable(index);
}
inline void ChangePeersResponse::set_new_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChangePeersResponse.new_peers)
  new_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChangePeersResponse::set_new_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChangePeersResponse.new_peers)
  new_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChangePeersResponse::set_new_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ChangePeersResponse.new_peers)
}
inline void ChangePeersResponse::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ChangePeersResponse.new_peers)
}
inline ::std::string* ChangePeersResponse::add_new_peers() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.ChangePeersResponse.new_peers)
  return new_peers_.Add();
}
inline void ChangePeersResponse::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.ChangePeersResponse.new_peers)
}
#if LANG_CXX11
inline void ChangePeersResponse::add_new_peers(::std::string&& value) {
  new_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.ChangePeersResponse.new_peers)
}
#endif
inline void ChangePeersResponse::add_new_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.ChangePeersResponse.new_peers)
}
inline void ChangePeersResponse::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.ChangePeersResponse.new_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChangePeersResponse::new_peers() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.ChangePeersResponse.new_peers)
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChangePeersResponse::mutable_new_peers() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.ChangePeersResponse.new_peers)
  return &new_peers_;
}

// -------------------------------------------------------------------

// SnapshotRequest

// required uint32 logicPoolId = 1;
inline bool SnapshotRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapshotRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapshotRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapshotRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 SnapshotRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.SnapshotRequest.logicPoolId)
  return logicpoolid_;
}
inline void SnapshotRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.SnapshotRequest.logicPoolId)
}

// required uint32 copysetId = 2;
inline bool SnapshotRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnapshotRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SnapshotRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SnapshotRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 SnapshotRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.SnapshotRequest.copysetId)
  return copysetid_;
}
inline void SnapshotRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.SnapshotRequest.copysetId)
}

// optional string peer_id = 3;
inline bool SnapshotRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& SnapshotRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.SnapshotRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void SnapshotRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.SnapshotRequest.peer_id)
}
#if LANG_CXX11
inline void SnapshotRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.SnapshotRequest.peer_id)
}
#endif
inline void SnapshotRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.SnapshotRequest.peer_id)
}
inline void SnapshotRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.SnapshotRequest.peer_id)
}
inline ::std::string* SnapshotRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.SnapshotRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.SnapshotRequest.peer_id)
  if (!has_peer_id()) {
    return NULL;
  }
  clear_has_peer_id();
  return peer_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.SnapshotRequest.peer_id)
}

// -------------------------------------------------------------------

// ResetPeerRequest

// required uint32 logicPoolId = 1;
inline bool ResetPeerRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResetPeerRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResetPeerRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResetPeerRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 ResetPeerRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ResetPeerRequest.logicPoolId)
  return logicpoolid_;
}
inline void ResetPeerRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ResetPeerRequest.logicPoolId)
}

// required uint32 copysetId = 2;
inline bool ResetPeerRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResetPeerRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResetPeerRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResetPeerRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 ResetPeerRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ResetPeerRequest.copysetId)
  return copysetid_;
}
inline void ResetPeerRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ResetPeerRequest.copysetId)
}

// required string peer_id = 3;
inline bool ResetPeerRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResetPeerRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResetPeerRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResetPeerRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& ResetPeerRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ResetPeerRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void ResetPeerRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.ResetPeerRequest.peer_id)
}
#if LANG_CXX11
inline void ResetPeerRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.ResetPeerRequest.peer_id)
}
#endif
inline void ResetPeerRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ResetPeerRequest.peer_id)
}
inline void ResetPeerRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ResetPeerRequest.peer_id)
}
inline ::std::string* ResetPeerRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ResetPeerRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResetPeerRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ResetPeerRequest.peer_id)
  if (!has_peer_id()) {
    return NULL;
  }
  clear_has_peer_id();
  return peer_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResetPeerRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ResetPeerRequest.peer_id)
}

// repeated string old_peers = 4;
inline int ResetPeerRequest::old_peers_size() const {
  return old_peers_.size();
}
inline void ResetPeerRequest::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& ResetPeerRequest::old_peers(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ResetPeerRequest.old_peers)
  return old_peers_.Get(index);
}
inline ::std::string* ResetPeerRequest::mutable_old_peers(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ResetPeerRequest.old_peers)
  return old_peers_.Mutable(index);
}
inline void ResetPeerRequest::set_old_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ResetPeerRequest.old_peers)
  old_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResetPeerRequest::set_old_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ResetPeerRequest.old_peers)
  old_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResetPeerRequest::set_old_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ResetPeerRequest.old_peers)
}
inline void ResetPeerRequest::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ResetPeerRequest.old_peers)
}
inline ::std::string* ResetPeerRequest::add_old_peers() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.ResetPeerRequest.old_peers)
  return old_peers_.Add();
}
inline void ResetPeerRequest::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.ResetPeerRequest.old_peers)
}
#if LANG_CXX11
inline void ResetPeerRequest::add_old_peers(::std::string&& value) {
  old_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.ResetPeerRequest.old_peers)
}
#endif
inline void ResetPeerRequest::add_old_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.ResetPeerRequest.old_peers)
}
inline void ResetPeerRequest::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.ResetPeerRequest.old_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetPeerRequest::old_peers() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.ResetPeerRequest.old_peers)
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResetPeerRequest::mutable_old_peers() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.ResetPeerRequest.old_peers)
  return &old_peers_;
}

// repeated string new_peers = 5;
inline int ResetPeerRequest::new_peers_size() const {
  return new_peers_.size();
}
inline void ResetPeerRequest::clear_new_peers() {
  new_peers_.Clear();
}
inline const ::std::string& ResetPeerRequest::new_peers(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ResetPeerRequest.new_peers)
  return new_peers_.Get(index);
}
inline ::std::string* ResetPeerRequest::mutable_new_peers(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ResetPeerRequest.new_peers)
  return new_peers_.Mutable(index);
}
inline void ResetPeerRequest::set_new_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ResetPeerRequest.new_peers)
  new_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ResetPeerRequest::set_new_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.ResetPeerRequest.new_peers)
  new_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ResetPeerRequest::set_new_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ResetPeerRequest.new_peers)
}
inline void ResetPeerRequest::set_new_peers(int index, const char* value, size_t size) {
  new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ResetPeerRequest.new_peers)
}
inline ::std::string* ResetPeerRequest::add_new_peers() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.ResetPeerRequest.new_peers)
  return new_peers_.Add();
}
inline void ResetPeerRequest::add_new_peers(const ::std::string& value) {
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.ResetPeerRequest.new_peers)
}
#if LANG_CXX11
inline void ResetPeerRequest::add_new_peers(::std::string&& value) {
  new_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.ResetPeerRequest.new_peers)
}
#endif
inline void ResetPeerRequest::add_new_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.ResetPeerRequest.new_peers)
}
inline void ResetPeerRequest::add_new_peers(const char* value, size_t size) {
  new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.ResetPeerRequest.new_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResetPeerRequest::new_peers() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.ResetPeerRequest.new_peers)
  return new_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResetPeerRequest::mutable_new_peers() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.ResetPeerRequest.new_peers)
  return &new_peers_;
}

// -------------------------------------------------------------------

// TransferLeaderRequest

// required uint32 logicPoolId = 1;
inline bool TransferLeaderRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferLeaderRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferLeaderRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferLeaderRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 TransferLeaderRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.TransferLeaderRequest.logicPoolId)
  return logicpoolid_;
}
inline void TransferLeaderRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.TransferLeaderRequest.logicPoolId)
}

// required uint32 copysetId = 2;
inline bool TransferLeaderRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransferLeaderRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransferLeaderRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransferLeaderRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 TransferLeaderRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.TransferLeaderRequest.copysetId)
  return copysetid_;
}
inline void TransferLeaderRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.TransferLeaderRequest.copysetId)
}

// required string leader_id = 3;
inline bool TransferLeaderRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferLeaderRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferLeaderRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferLeaderRequest::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_id();
}
inline const ::std::string& TransferLeaderRequest::leader_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.TransferLeaderRequest.leader_id)
  return leader_id_.GetNoArena();
}
inline void TransferLeaderRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.TransferLeaderRequest.leader_id)
}
#if LANG_CXX11
inline void TransferLeaderRequest::set_leader_id(::std::string&& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.TransferLeaderRequest.leader_id)
}
#endif
inline void TransferLeaderRequest::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.TransferLeaderRequest.leader_id)
}
inline void TransferLeaderRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.TransferLeaderRequest.leader_id)
}
inline ::std::string* TransferLeaderRequest::mutable_leader_id() {
  set_has_leader_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.TransferLeaderRequest.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferLeaderRequest::release_leader_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.TransferLeaderRequest.leader_id)
  if (!has_leader_id()) {
    return NULL;
  }
  clear_has_leader_id();
  return leader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferLeaderRequest::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    set_has_leader_id();
  } else {
    clear_has_leader_id();
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.TransferLeaderRequest.leader_id)
}

// optional string peer_id = 4;
inline bool TransferLeaderRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferLeaderRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferLeaderRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferLeaderRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& TransferLeaderRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.TransferLeaderRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void TransferLeaderRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.TransferLeaderRequest.peer_id)
}
#if LANG_CXX11
inline void TransferLeaderRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.TransferLeaderRequest.peer_id)
}
#endif
inline void TransferLeaderRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.TransferLeaderRequest.peer_id)
}
inline void TransferLeaderRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.TransferLeaderRequest.peer_id)
}
inline ::std::string* TransferLeaderRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.TransferLeaderRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferLeaderRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.TransferLeaderRequest.peer_id)
  if (!has_peer_id()) {
    return NULL;
  }
  clear_has_peer_id();
  return peer_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferLeaderRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.TransferLeaderRequest.peer_id)
}

// -------------------------------------------------------------------

// TransferLeaderResponse

// -------------------------------------------------------------------

// ResetPeerResponse

// -------------------------------------------------------------------

// SnapshotResponse

// -------------------------------------------------------------------

// GetLeaderRequest

// required uint32 logicPoolId = 1;
inline bool GetLeaderRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLeaderRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLeaderRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLeaderRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 GetLeaderRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.GetLeaderRequest.logicPoolId)
  return logicpoolid_;
}
inline void GetLeaderRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.GetLeaderRequest.logicPoolId)
}

// required uint32 copysetId = 2;
inline bool GetLeaderRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetLeaderRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetLeaderRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetLeaderRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 GetLeaderRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.GetLeaderRequest.copysetId)
  return copysetid_;
}
inline void GetLeaderRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.GetLeaderRequest.copysetId)
}

// optional string peer_id = 3;
inline bool GetLeaderRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLeaderRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLeaderRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLeaderRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& GetLeaderRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.GetLeaderRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void GetLeaderRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.GetLeaderRequest.peer_id)
}
#if LANG_CXX11
inline void GetLeaderRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.GetLeaderRequest.peer_id)
}
#endif
inline void GetLeaderRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.GetLeaderRequest.peer_id)
}
inline void GetLeaderRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.GetLeaderRequest.peer_id)
}
inline ::std::string* GetLeaderRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.GetLeaderRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLeaderRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.GetLeaderRequest.peer_id)
  if (!has_peer_id()) {
    return NULL;
  }
  clear_has_peer_id();
  return peer_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLeaderRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.GetLeaderRequest.peer_id)
}

// -------------------------------------------------------------------

// GetLeaderResponse

// required string leader_id = 1;
inline bool GetLeaderResponse::has_leader_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLeaderResponse::set_has_leader_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLeaderResponse::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLeaderResponse::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_id();
}
inline const ::std::string& GetLeaderResponse::leader_id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.GetLeaderResponse.leader_id)
  return leader_id_.GetNoArena();
}
inline void GetLeaderResponse::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.GetLeaderResponse.leader_id)
}
#if LANG_CXX11
inline void GetLeaderResponse::set_leader_id(::std::string&& value) {
  set_has_leader_id();
  leader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.GetLeaderResponse.leader_id)
}
#endif
inline void GetLeaderResponse::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.GetLeaderResponse.leader_id)
}
inline void GetLeaderResponse::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.GetLeaderResponse.leader_id)
}
inline ::std::string* GetLeaderResponse::mutable_leader_id() {
  set_has_leader_id();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.GetLeaderResponse.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetLeaderResponse::release_leader_id() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.GetLeaderResponse.leader_id)
  if (!has_leader_id()) {
    return NULL;
  }
  clear_has_leader_id();
  return leader_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetLeaderResponse::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    set_has_leader_id();
  } else {
    clear_has_leader_id();
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.GetLeaderResponse.leader_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunkserver
}  // namespace curve

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fcli_2eproto
