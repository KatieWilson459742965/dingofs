syntax="proto2";
package curve.mds;

option cc_generic_services = true;


// fileinfo
enum FileType {
    INODE_DIRECTORY = 0;
    INODE_PAGEFILE = 1;
    INODE_APPENDFILE = 2;
    INODE_APPENDECFILE = 3;
    INODE_SNAPSHOT_PAGEFILE = 4;
};

enum FileStatus {
    kFileCreated = 0;
    kFileDeleting = 1;
}

message FileInfo {
    optional    uint64      id = 1;
    optional    string      fileName = 2;
    optional    uint64      parentId = 3;
    optional    FileType    fileType = 4;
//  optional    uint32      owner = 5;
    optional    uint32      chunkSize = 6;
    optional    uint32      segmentSize = 7;
    optional    uint64      length = 8;
    optional    uint64      ctime  = 9;
    optional    uint64      seqNum =  10;
    optional    string      fullPathName = 11;
    optional    FileStatus  fileStatus = 12;
}

// TODO(hzsunjianliang): add a errorcode msg table

// status code
enum  StatusCode {
    kOK = 0;

    kFileExists = 101;
    kFileNotExists = 102;
    kNotDirectory = 103;
    kParaError = 104;
    kShrinkBiggerFile = 105;
    kExtentUnitError = 106;
    kSegmentNotAllocated = 107;
    kSegmentAllocateError = 108;
    kDirNotExist = 109;
    kNotSupported = 110;

    kFileUnderSnapShot = 120;
    kFileNotUnderSnapShot = 121;
    kSnapshotDeleting = 122;
    kSnapshotFileNotExists = 123;
    kSnapshotFileDeleteError = 124;

    kStorageError = 501;
    KInternalError = 502;
};

//chunkinfo
message PageFileChunkInfo {
    optional uint32 copysetID = 3;
    optional uint64 chunkID = 2;
}

message PageFileSegment {
    optional uint32 logicalPoolID = 1;
    optional uint32 segmentSize = 3;
    optional uint32 chunkSize = 4;
    optional uint64 startOffset = 2;
    repeated  PageFileChunkInfo chunks = 5;
}

message CreateFileRequest {
    required string     fileName = 1;
    required FileType   fileType = 2;
    optional uint64     fileLength = 3;
};

message CreateFileResponse {
    required StatusCode statusCode = 1;
}

message GetFileInfoRequest {
    required string     fileName = 1;
}

message GetFileInfoResponse {
    required StatusCode statusCode = 1;
    optional FileInfo fileInfo = 2;
}

message GetOrAllocateSegmentRequest {
    required string     fileName = 1;
    required uint64     offset = 2;
    required bool       allocateIfNotExist = 3;
    optional uint64     seqNum = 4; 
}

message GetOrAllocateSegmentResponse {
    required StatusCode statusCode = 1;
    optional PageFileSegment pageFileSegment = 2;
}

message DeleteSegmentRequest {
    required string    fileName = 1;
    required uint64    offset = 2;
}

message DeleteSegmentResponse {
    required StatusCode statusCode = 1;
}

message RenameFileRequest {
    required string     oldFileName = 1;
    required string   newFileName = 2;
}

message RenameFileResponse {
    required StatusCode statusCode = 1;
}

message ExtendFileRequest {
    required string     fileName = 1;
    required uint64     newSize = 2;
}

message ExtendFileResponse {
    required StatusCode statusCode = 1;
}

// create snapshot
message CreateSnapShotRequest {
    required string fileName = 1;
}

message CreateSnapShotResponse {
    required StatusCode statusCode = 1;
    optional FileInfo   snapShotFileInfo = 2;
}

// list snapshots
message ListSnapShotFileInfoRequest {
    required string fileName = 1;
    repeated uint64 seq = 2; 
}

message ListSnapShotFileInfoResponse {
    required StatusCode statusCode = 1;
    repeated FileInfo fileInfo = 2;
}

// delete snapshot
message DeleteSnapShotRequest {
    required string fileName = 1;
    required uint64 seq = 2;
}

message DeleteSnapShotResponse {
    required StatusCode statusCode = 1;
}

// check snapshot status

message CheckSnapShotStatusRequest {
    required string fileName = 1;
    required uint64 seq = 2;
}

message CheckSnapShotStatusResponse {
    required StatusCode statusCode = 1;
    optional FileStatus     fileStatus = 2;
    optional uint32 progress  = 3;
}

// session rpcs
enum SessionStatus {
    kSessionOK = 0;
    kSessionStaled = 1;
    kSessionDeleted = 2;
};

message Session {
    required string sessionID  = 1;
    required string token = 2;
    required uint32 leaseTime = 3;
    required uint64 createTime = 4;
    optional SessionStatus sessionStatus = 5;
    optional uint32 clientIP = 6;
    optional uint32 clientPort = 7;
    // other useful infos
};

message OpenFileRequest {
    required string fileName = 1;
};

message OpenFileResponse {
    required StatusCode statusCode = 1;
    optional bool	    snapshotFlag = 2; // if the file exist snapshot(under snapshot)
    optional Session    session = 3;
    optional FileInfo   fileInfo = 4;
};

message CloseFileRequest {
    required string fileName = 1;
    required string sessionID = 2;
};

message CloseFileResponse {
    required StatusCode statusCode = 1;
}

message ReFreshSessionRequest {
    required string fileName = 1;
    required string sessionID = 2;
    required uint64 date = 3; //current time
    required string signature = 4; //caculete based on token
    optional uint32 clientIP = 5;
    optional uint32 clientPort = 6;
}

message ReFreshSessionResponse {
    required StatusCode statusCode = 1;
    required string sessionID = 2;
};

service CurveFSService {
    // basic rpcs
    rpc     CreateFile(CreateFileRequest) returns (CreateFileResponse);
    rpc     GetFileInfo(GetFileInfoRequest) returns (GetFileInfoResponse);
    rpc     GetOrAllocateSegment(GetOrAllocateSegmentRequest)
                returns (GetOrAllocateSegmentResponse);

    rpc     DeleteSegment(DeleteSegmentRequest) returns (DeleteSegmentResponse);
    rpc     RenameFile(RenameFileRequest) returns (RenameFileResponse);
    rpc     ExtendFile(ExtendFileRequest) returns (ExtendFileResponse);

    // snapshot rpcs
    rpc     CreateSnapShot(CreateSnapShotRequest)
                returns (CreateSnapShotResponse);
    rpc     ListSnapShot(ListSnapShotFileInfoRequest)
            returns (ListSnapShotFileInfoResponse);
    rpc     DeleteSnapShot(DeleteSnapShotRequest)
            returns (DeleteSnapShotResponse);
    rpc     CheckSnapShotStatus(CheckSnapShotStatusRequest)
            returns (CheckSnapShotStatusResponse);
    rpc     GetSnapShotFileSegment(GetOrAllocateSegmentRequest)
                returns (GetOrAllocateSegmentResponse);

    // session rpcs
    rpc     OpenFile(OpenFileRequest) returns (OpenFileResponse);
    rpc     CloseFile(CloseFileRequest) returns (CloseFileResponse);
    rpc     RefreshSession(ReFreshSessionRequest)
        returns (ReFreshSessionResponse);
}