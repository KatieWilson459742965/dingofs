// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/copyset.proto

#ifndef PROTOBUF_INCLUDED_proto_2fcopyset_2eproto
#define PROTOBUF_INCLUDED_proto_2fcopyset_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fcopyset_2eproto 

namespace protobuf_proto_2fcopyset_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fcopyset_2eproto
namespace curve {
namespace chunkserver {
class CopysetRequest;
class CopysetRequestDefaultTypeInternal;
extern CopysetRequestDefaultTypeInternal _CopysetRequest_default_instance_;
class CopysetResponse;
class CopysetResponseDefaultTypeInternal;
extern CopysetResponseDefaultTypeInternal _CopysetResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> ::curve::chunkserver::CopysetRequest* Arena::CreateMaybeMessage<::curve::chunkserver::CopysetRequest>(Arena*);
template<> ::curve::chunkserver::CopysetResponse* Arena::CreateMaybeMessage<::curve::chunkserver::CopysetResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace curve {
namespace chunkserver {

enum COPYSET_OP_STATUS {
  COPYSET_OP_STATUS_SUCCESS = 0,
  COPYSET_OP_STATUS_EXIST = 1,
  COPYSET_OP_STATUS_FAILURE_UNKNOWN = 2
};
bool COPYSET_OP_STATUS_IsValid(int value);
const COPYSET_OP_STATUS COPYSET_OP_STATUS_MIN = COPYSET_OP_STATUS_SUCCESS;
const COPYSET_OP_STATUS COPYSET_OP_STATUS_MAX = COPYSET_OP_STATUS_FAILURE_UNKNOWN;
const int COPYSET_OP_STATUS_ARRAYSIZE = COPYSET_OP_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* COPYSET_OP_STATUS_descriptor();
inline const ::std::string& COPYSET_OP_STATUS_Name(COPYSET_OP_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    COPYSET_OP_STATUS_descriptor(), value);
}
inline bool COPYSET_OP_STATUS_Parse(
    const ::std::string& name, COPYSET_OP_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<COPYSET_OP_STATUS>(
    COPYSET_OP_STATUS_descriptor(), name, value);
}
// ===================================================================

class CopysetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.CopysetRequest) */ {
 public:
  CopysetRequest();
  virtual ~CopysetRequest();

  CopysetRequest(const CopysetRequest& from);

  inline CopysetRequest& operator=(const CopysetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CopysetRequest(CopysetRequest&& from) noexcept
    : CopysetRequest() {
    *this = ::std::move(from);
  }

  inline CopysetRequest& operator=(CopysetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CopysetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopysetRequest* internal_default_instance() {
    return reinterpret_cast<const CopysetRequest*>(
               &_CopysetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CopysetRequest* other);
  friend void swap(CopysetRequest& a, CopysetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CopysetRequest* New() const final {
    return CreateMaybeMessage<CopysetRequest>(NULL);
  }

  CopysetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CopysetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CopysetRequest& from);
  void MergeFrom(const CopysetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopysetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string conf = 3;
  int conf_size() const;
  void clear_conf();
  static const int kConfFieldNumber = 3;
  const ::std::string& conf(int index) const;
  ::std::string* mutable_conf(int index);
  void set_conf(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_conf(int index, ::std::string&& value);
  #endif
  void set_conf(int index, const char* value);
  void set_conf(int index, const char* value, size_t size);
  ::std::string* add_conf();
  void add_conf(const ::std::string& value);
  #if LANG_CXX11
  void add_conf(::std::string&& value);
  #endif
  void add_conf(const char* value);
  void add_conf(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& conf() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_conf();

  // required uint32 logicPoolId = 1;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 1;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint32 copysetId = 2;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 2;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.CopysetRequest)
 private:
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> conf_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint32 copysetid_;
  friend struct ::protobuf_proto_2fcopyset_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CopysetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.CopysetResponse) */ {
 public:
  CopysetResponse();
  virtual ~CopysetResponse();

  CopysetResponse(const CopysetResponse& from);

  inline CopysetResponse& operator=(const CopysetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CopysetResponse(CopysetResponse&& from) noexcept
    : CopysetResponse() {
    *this = ::std::move(from);
  }

  inline CopysetResponse& operator=(CopysetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CopysetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CopysetResponse* internal_default_instance() {
    return reinterpret_cast<const CopysetResponse*>(
               &_CopysetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CopysetResponse* other);
  friend void swap(CopysetResponse& a, CopysetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CopysetResponse* New() const final {
    return CreateMaybeMessage<CopysetResponse>(NULL);
  }

  CopysetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CopysetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CopysetResponse& from);
  void MergeFrom(const CopysetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CopysetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string redirect = 2;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // optional .curve.chunkserver.COPYSET_OP_STATUS status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::curve::chunkserver::COPYSET_OP_STATUS status() const;
  void set_status(::curve::chunkserver::COPYSET_OP_STATUS value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.CopysetResponse)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_redirect();
  void clear_has_redirect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  int status_;
  friend struct ::protobuf_proto_2fcopyset_2eproto::TableStruct;
};
// ===================================================================

class CopysetService_Stub;

class CopysetService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CopysetService() {};
 public:
  virtual ~CopysetService();

  typedef CopysetService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void CreateCopysetNode(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::CopysetRequest* request,
                       ::curve::chunkserver::CopysetResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CopysetService);
};

class CopysetService_Stub : public CopysetService {
 public:
  CopysetService_Stub(::google::protobuf::RpcChannel* channel);
  CopysetService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~CopysetService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements CopysetService ------------------------------------------

  void CreateCopysetNode(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::CopysetRequest* request,
                       ::curve::chunkserver::CopysetResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CopysetService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CopysetRequest

// required uint32 logicPoolId = 1;
inline bool CopysetRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CopysetRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CopysetRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CopysetRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 CopysetRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.CopysetRequest.logicPoolId)
  return logicpoolid_;
}
inline void CopysetRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.CopysetRequest.logicPoolId)
}

// required uint32 copysetId = 2;
inline bool CopysetRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CopysetRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CopysetRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CopysetRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 CopysetRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.CopysetRequest.copysetId)
  return copysetid_;
}
inline void CopysetRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.CopysetRequest.copysetId)
}

// repeated string conf = 3;
inline int CopysetRequest::conf_size() const {
  return conf_.size();
}
inline void CopysetRequest::clear_conf() {
  conf_.Clear();
}
inline const ::std::string& CopysetRequest::conf(int index) const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.CopysetRequest.conf)
  return conf_.Get(index);
}
inline ::std::string* CopysetRequest::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.CopysetRequest.conf)
  return conf_.Mutable(index);
}
inline void CopysetRequest::set_conf(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.CopysetRequest.conf)
  conf_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CopysetRequest::set_conf(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:curve.chunkserver.CopysetRequest.conf)
  conf_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CopysetRequest::set_conf(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  conf_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.CopysetRequest.conf)
}
inline void CopysetRequest::set_conf(int index, const char* value, size_t size) {
  conf_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.CopysetRequest.conf)
}
inline ::std::string* CopysetRequest::add_conf() {
  // @@protoc_insertion_point(field_add_mutable:curve.chunkserver.CopysetRequest.conf)
  return conf_.Add();
}
inline void CopysetRequest::add_conf(const ::std::string& value) {
  conf_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:curve.chunkserver.CopysetRequest.conf)
}
#if LANG_CXX11
inline void CopysetRequest::add_conf(::std::string&& value) {
  conf_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:curve.chunkserver.CopysetRequest.conf)
}
#endif
inline void CopysetRequest::add_conf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  conf_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:curve.chunkserver.CopysetRequest.conf)
}
inline void CopysetRequest::add_conf(const char* value, size_t size) {
  conf_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:curve.chunkserver.CopysetRequest.conf)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CopysetRequest::conf() const {
  // @@protoc_insertion_point(field_list:curve.chunkserver.CopysetRequest.conf)
  return conf_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CopysetRequest::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:curve.chunkserver.CopysetRequest.conf)
  return &conf_;
}

// -------------------------------------------------------------------

// CopysetResponse

// optional .curve.chunkserver.COPYSET_OP_STATUS status = 1;
inline bool CopysetResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CopysetResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CopysetResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CopysetResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::curve::chunkserver::COPYSET_OP_STATUS CopysetResponse::status() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.CopysetResponse.status)
  return static_cast< ::curve::chunkserver::COPYSET_OP_STATUS >(status_);
}
inline void CopysetResponse::set_status(::curve::chunkserver::COPYSET_OP_STATUS value) {
  assert(::curve::chunkserver::COPYSET_OP_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.CopysetResponse.status)
}

// optional string redirect = 2;
inline bool CopysetResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CopysetResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CopysetResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CopysetResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& CopysetResponse::redirect() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.CopysetResponse.redirect)
  return redirect_.GetNoArena();
}
inline void CopysetResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.CopysetResponse.redirect)
}
#if LANG_CXX11
inline void CopysetResponse::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.CopysetResponse.redirect)
}
#endif
inline void CopysetResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.CopysetResponse.redirect)
}
inline void CopysetResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.CopysetResponse.redirect)
}
inline ::std::string* CopysetResponse::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.CopysetResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CopysetResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.CopysetResponse.redirect)
  if (!has_redirect()) {
    return NULL;
  }
  clear_has_redirect();
  return redirect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CopysetResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.CopysetResponse.redirect)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunkserver
}  // namespace curve

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::curve::chunkserver::COPYSET_OP_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::COPYSET_OP_STATUS>() {
  return ::curve::chunkserver::COPYSET_OP_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fcopyset_2eproto
