// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/chunkserver.proto

#ifndef PROTOBUF_INCLUDED_proto_2fchunkserver_2eproto
#define PROTOBUF_INCLUDED_proto_2fchunkserver_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fchunkserver_2eproto 

namespace protobuf_proto_2fchunkserver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fchunkserver_2eproto
namespace curve {
namespace chunkserver {
class ChunkServerInfo;
class ChunkServerInfoDefaultTypeInternal;
extern ChunkServerInfoDefaultTypeInternal _ChunkServerInfo_default_instance_;
class ChunkServerRequest;
class ChunkServerRequestDefaultTypeInternal;
extern ChunkServerRequestDefaultTypeInternal _ChunkServerRequest_default_instance_;
class ChunkServerResponse;
class ChunkServerResponseDefaultTypeInternal;
extern ChunkServerResponseDefaultTypeInternal _ChunkServerResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> ::curve::chunkserver::ChunkServerInfo* Arena::CreateMaybeMessage<::curve::chunkserver::ChunkServerInfo>(Arena*);
template<> ::curve::chunkserver::ChunkServerRequest* Arena::CreateMaybeMessage<::curve::chunkserver::ChunkServerRequest>(Arena*);
template<> ::curve::chunkserver::ChunkServerResponse* Arena::CreateMaybeMessage<::curve::chunkserver::ChunkServerResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace curve {
namespace chunkserver {

enum CHUNKSERVER_OP_TYPE {
  CHUNKSERVER_OP_TYPE_ENABLE = 0,
  CHUNKSERVER_OP_TYPE_DISABLE = 1,
  CHUNKSERVER_OP_TYPE_GETSTATE = 2,
  CHUNKSERVER_OP_TYPE_GETINFO = 3
};
bool CHUNKSERVER_OP_TYPE_IsValid(int value);
const CHUNKSERVER_OP_TYPE CHUNKSERVER_OP_TYPE_MIN = CHUNKSERVER_OP_TYPE_ENABLE;
const CHUNKSERVER_OP_TYPE CHUNKSERVER_OP_TYPE_MAX = CHUNKSERVER_OP_TYPE_GETINFO;
const int CHUNKSERVER_OP_TYPE_ARRAYSIZE = CHUNKSERVER_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHUNKSERVER_OP_TYPE_descriptor();
inline const ::std::string& CHUNKSERVER_OP_TYPE_Name(CHUNKSERVER_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHUNKSERVER_OP_TYPE_descriptor(), value);
}
inline bool CHUNKSERVER_OP_TYPE_Parse(
    const ::std::string& name, CHUNKSERVER_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHUNKSERVER_OP_TYPE>(
    CHUNKSERVER_OP_TYPE_descriptor(), name, value);
}
enum CHUNKSERVER_OP_STATUS {
  CHUNKSERVER_OP_STATUS_SUCCESS = 0,
  CHUNKSERVER_OP_STATUS_FAILURE_UNKNOWN = 1
};
bool CHUNKSERVER_OP_STATUS_IsValid(int value);
const CHUNKSERVER_OP_STATUS CHUNKSERVER_OP_STATUS_MIN = CHUNKSERVER_OP_STATUS_SUCCESS;
const CHUNKSERVER_OP_STATUS CHUNKSERVER_OP_STATUS_MAX = CHUNKSERVER_OP_STATUS_FAILURE_UNKNOWN;
const int CHUNKSERVER_OP_STATUS_ARRAYSIZE = CHUNKSERVER_OP_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHUNKSERVER_OP_STATUS_descriptor();
inline const ::std::string& CHUNKSERVER_OP_STATUS_Name(CHUNKSERVER_OP_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHUNKSERVER_OP_STATUS_descriptor(), value);
}
inline bool CHUNKSERVER_OP_STATUS_Parse(
    const ::std::string& name, CHUNKSERVER_OP_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHUNKSERVER_OP_STATUS>(
    CHUNKSERVER_OP_STATUS_descriptor(), name, value);
}
enum CHUNKSERVER_STATE {
  CHUNKSERVER_STATE_OK = 0,
  CHUNKSERVER_STATE_DISABLED = 1
};
bool CHUNKSERVER_STATE_IsValid(int value);
const CHUNKSERVER_STATE CHUNKSERVER_STATE_MIN = CHUNKSERVER_STATE_OK;
const CHUNKSERVER_STATE CHUNKSERVER_STATE_MAX = CHUNKSERVER_STATE_DISABLED;
const int CHUNKSERVER_STATE_ARRAYSIZE = CHUNKSERVER_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHUNKSERVER_STATE_descriptor();
inline const ::std::string& CHUNKSERVER_STATE_Name(CHUNKSERVER_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHUNKSERVER_STATE_descriptor(), value);
}
inline bool CHUNKSERVER_STATE_Parse(
    const ::std::string& name, CHUNKSERVER_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHUNKSERVER_STATE>(
    CHUNKSERVER_STATE_descriptor(), name, value);
}
// ===================================================================

class ChunkServerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ChunkServerRequest) */ {
 public:
  ChunkServerRequest();
  virtual ~ChunkServerRequest();

  ChunkServerRequest(const ChunkServerRequest& from);

  inline ChunkServerRequest& operator=(const ChunkServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkServerRequest(ChunkServerRequest&& from) noexcept
    : ChunkServerRequest() {
    *this = ::std::move(from);
  }

  inline ChunkServerRequest& operator=(ChunkServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkServerRequest* internal_default_instance() {
    return reinterpret_cast<const ChunkServerRequest*>(
               &_ChunkServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ChunkServerRequest* other);
  friend void swap(ChunkServerRequest& a, ChunkServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkServerRequest* New() const final {
    return CreateMaybeMessage<ChunkServerRequest>(NULL);
  }

  ChunkServerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkServerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkServerRequest& from);
  void MergeFrom(const ChunkServerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .curve.chunkserver.CHUNKSERVER_OP_TYPE op = 1;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::curve::chunkserver::CHUNKSERVER_OP_TYPE op() const;
  void set_op(::curve::chunkserver::CHUNKSERVER_OP_TYPE value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ChunkServerRequest)
 private:
  void set_has_op();
  void clear_has_op();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int op_;
  friend struct ::protobuf_proto_2fchunkserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ChunkServerInfo) */ {
 public:
  ChunkServerInfo();
  virtual ~ChunkServerInfo();

  ChunkServerInfo(const ChunkServerInfo& from);

  inline ChunkServerInfo& operator=(const ChunkServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkServerInfo(ChunkServerInfo&& from) noexcept
    : ChunkServerInfo() {
    *this = ::std::move(from);
  }

  inline ChunkServerInfo& operator=(ChunkServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkServerInfo* internal_default_instance() {
    return reinterpret_cast<const ChunkServerInfo*>(
               &_ChunkServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ChunkServerInfo* other);
  friend void swap(ChunkServerInfo& a, ChunkServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkServerInfo* New() const final {
    return CreateMaybeMessage<ChunkServerInfo>(NULL);
  }

  ChunkServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkServerInfo& from);
  void MergeFrom(const ChunkServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required .curve.chunkserver.CHUNKSERVER_STATE state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::curve::chunkserver::CHUNKSERVER_STATE state() const;
  void set_state(::curve::chunkserver::CHUNKSERVER_STATE value);

  // required int32 capacity = 4;
  bool has_capacity() const;
  void clear_capacity();
  static const int kCapacityFieldNumber = 4;
  ::google::protobuf::int32 capacity() const;
  void set_capacity(::google::protobuf::int32 value);

  // required int32 available = 5;
  bool has_available() const;
  void clear_available();
  static const int kAvailableFieldNumber = 5;
  ::google::protobuf::int32 available() const;
  void set_available(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ChunkServerInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_state();
  void clear_has_state();
  void set_has_capacity();
  void clear_has_capacity();
  void set_has_available();
  void clear_has_available();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  int state_;
  ::google::protobuf::int32 capacity_;
  ::google::protobuf::int32 available_;
  friend struct ::protobuf_proto_2fchunkserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ChunkServerResponse) */ {
 public:
  ChunkServerResponse();
  virtual ~ChunkServerResponse();

  ChunkServerResponse(const ChunkServerResponse& from);

  inline ChunkServerResponse& operator=(const ChunkServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkServerResponse(ChunkServerResponse&& from) noexcept
    : ChunkServerResponse() {
    *this = ::std::move(from);
  }

  inline ChunkServerResponse& operator=(ChunkServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkServerResponse* internal_default_instance() {
    return reinterpret_cast<const ChunkServerResponse*>(
               &_ChunkServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ChunkServerResponse* other);
  friend void swap(ChunkServerResponse& a, ChunkServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkServerResponse* New() const final {
    return CreateMaybeMessage<ChunkServerResponse>(NULL);
  }

  ChunkServerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkServerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkServerResponse& from);
  void MergeFrom(const ChunkServerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .curve.chunkserver.ChunkServerInfo info = 3;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  private:
  const ::curve::chunkserver::ChunkServerInfo& _internal_info() const;
  public:
  const ::curve::chunkserver::ChunkServerInfo& info() const;
  ::curve::chunkserver::ChunkServerInfo* release_info();
  ::curve::chunkserver::ChunkServerInfo* mutable_info();
  void set_allocated_info(::curve::chunkserver::ChunkServerInfo* info);

  // required .curve.chunkserver.CHUNKSERVER_OP_STATUS status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::curve::chunkserver::CHUNKSERVER_OP_STATUS status() const;
  void set_status(::curve::chunkserver::CHUNKSERVER_OP_STATUS value);

  // optional .curve.chunkserver.CHUNKSERVER_STATE state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::curve::chunkserver::CHUNKSERVER_STATE state() const;
  void set_state(::curve::chunkserver::CHUNKSERVER_STATE value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ChunkServerResponse)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_state();
  void clear_has_state();
  void set_has_info();
  void clear_has_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::curve::chunkserver::ChunkServerInfo* info_;
  int status_;
  int state_;
  friend struct ::protobuf_proto_2fchunkserver_2eproto::TableStruct;
};
// ===================================================================

class ChunkServerService_Stub;

class ChunkServerService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ChunkServerService() {};
 public:
  virtual ~ChunkServerService();

  typedef ChunkServerService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetState(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkServerRequest* request,
                       ::curve::chunkserver::ChunkServerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetInfo(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkServerRequest* request,
                       ::curve::chunkserver::ChunkServerResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChunkServerService);
};

class ChunkServerService_Stub : public ChunkServerService {
 public:
  ChunkServerService_Stub(::google::protobuf::RpcChannel* channel);
  ChunkServerService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ChunkServerService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ChunkServerService ------------------------------------------

  void GetState(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkServerRequest* request,
                       ::curve::chunkserver::ChunkServerResponse* response,
                       ::google::protobuf::Closure* done);
  void GetInfo(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkServerRequest* request,
                       ::curve::chunkserver::ChunkServerResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChunkServerService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChunkServerRequest

// required .curve.chunkserver.CHUNKSERVER_OP_TYPE op = 1;
inline bool ChunkServerRequest::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkServerRequest::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkServerRequest::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkServerRequest::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::curve::chunkserver::CHUNKSERVER_OP_TYPE ChunkServerRequest::op() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkServerRequest.op)
  return static_cast< ::curve::chunkserver::CHUNKSERVER_OP_TYPE >(op_);
}
inline void ChunkServerRequest::set_op(::curve::chunkserver::CHUNKSERVER_OP_TYPE value) {
  assert(::curve::chunkserver::CHUNKSERVER_OP_TYPE_IsValid(value));
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkServerRequest.op)
}

// -------------------------------------------------------------------

// ChunkServerInfo

// required int32 id = 1;
inline bool ChunkServerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkServerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkServerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkServerInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ChunkServerInfo::id() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkServerInfo.id)
  return id_;
}
inline void ChunkServerInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkServerInfo.id)
}

// required string name = 2;
inline bool ChunkServerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkServerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkServerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkServerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChunkServerInfo::name() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkServerInfo.name)
  return name_.GetNoArena();
}
inline void ChunkServerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkServerInfo.name)
}
#if LANG_CXX11
inline void ChunkServerInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.ChunkServerInfo.name)
}
#endif
inline void ChunkServerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ChunkServerInfo.name)
}
inline void ChunkServerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ChunkServerInfo.name)
}
inline ::std::string* ChunkServerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChunkServerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChunkServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ChunkServerInfo.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChunkServerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ChunkServerInfo.name)
}

// required .curve.chunkserver.CHUNKSERVER_STATE state = 3;
inline bool ChunkServerInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkServerInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkServerInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkServerInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::curve::chunkserver::CHUNKSERVER_STATE ChunkServerInfo::state() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkServerInfo.state)
  return static_cast< ::curve::chunkserver::CHUNKSERVER_STATE >(state_);
}
inline void ChunkServerInfo::set_state(::curve::chunkserver::CHUNKSERVER_STATE value) {
  assert(::curve::chunkserver::CHUNKSERVER_STATE_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkServerInfo.state)
}

// required int32 capacity = 4;
inline bool ChunkServerInfo::has_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChunkServerInfo::set_has_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChunkServerInfo::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChunkServerInfo::clear_capacity() {
  capacity_ = 0;
  clear_has_capacity();
}
inline ::google::protobuf::int32 ChunkServerInfo::capacity() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkServerInfo.capacity)
  return capacity_;
}
inline void ChunkServerInfo::set_capacity(::google::protobuf::int32 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkServerInfo.capacity)
}

// required int32 available = 5;
inline bool ChunkServerInfo::has_available() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChunkServerInfo::set_has_available() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChunkServerInfo::clear_has_available() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChunkServerInfo::clear_available() {
  available_ = 0;
  clear_has_available();
}
inline ::google::protobuf::int32 ChunkServerInfo::available() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkServerInfo.available)
  return available_;
}
inline void ChunkServerInfo::set_available(::google::protobuf::int32 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkServerInfo.available)
}

// -------------------------------------------------------------------

// ChunkServerResponse

// required .curve.chunkserver.CHUNKSERVER_OP_STATUS status = 1;
inline bool ChunkServerResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkServerResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkServerResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkServerResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::curve::chunkserver::CHUNKSERVER_OP_STATUS ChunkServerResponse::status() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkServerResponse.status)
  return static_cast< ::curve::chunkserver::CHUNKSERVER_OP_STATUS >(status_);
}
inline void ChunkServerResponse::set_status(::curve::chunkserver::CHUNKSERVER_OP_STATUS value) {
  assert(::curve::chunkserver::CHUNKSERVER_OP_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkServerResponse.status)
}

// optional .curve.chunkserver.CHUNKSERVER_STATE state = 2;
inline bool ChunkServerResponse::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkServerResponse::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkServerResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkServerResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::curve::chunkserver::CHUNKSERVER_STATE ChunkServerResponse::state() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkServerResponse.state)
  return static_cast< ::curve::chunkserver::CHUNKSERVER_STATE >(state_);
}
inline void ChunkServerResponse::set_state(::curve::chunkserver::CHUNKSERVER_STATE value) {
  assert(::curve::chunkserver::CHUNKSERVER_STATE_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkServerResponse.state)
}

// optional .curve.chunkserver.ChunkServerInfo info = 3;
inline bool ChunkServerResponse::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkServerResponse::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkServerResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkServerResponse::clear_info() {
  if (info_ != NULL) info_->Clear();
  clear_has_info();
}
inline const ::curve::chunkserver::ChunkServerInfo& ChunkServerResponse::_internal_info() const {
  return *info_;
}
inline const ::curve::chunkserver::ChunkServerInfo& ChunkServerResponse::info() const {
  const ::curve::chunkserver::ChunkServerInfo* p = info_;
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkServerResponse.info)
  return p != NULL ? *p : *reinterpret_cast<const ::curve::chunkserver::ChunkServerInfo*>(
      &::curve::chunkserver::_ChunkServerInfo_default_instance_);
}
inline ::curve::chunkserver::ChunkServerInfo* ChunkServerResponse::release_info() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ChunkServerResponse.info)
  clear_has_info();
  ::curve::chunkserver::ChunkServerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::curve::chunkserver::ChunkServerInfo* ChunkServerResponse::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    auto* p = CreateMaybeMessage<::curve::chunkserver::ChunkServerInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChunkServerResponse.info)
  return info_;
}
inline void ChunkServerResponse::set_allocated_info(::curve::chunkserver::ChunkServerInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
  } else {
    clear_has_info();
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ChunkServerResponse.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunkserver
}  // namespace curve

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::curve::chunkserver::CHUNKSERVER_OP_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::CHUNKSERVER_OP_TYPE>() {
  return ::curve::chunkserver::CHUNKSERVER_OP_TYPE_descriptor();
}
template <> struct is_proto_enum< ::curve::chunkserver::CHUNKSERVER_OP_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::CHUNKSERVER_OP_STATUS>() {
  return ::curve::chunkserver::CHUNKSERVER_OP_STATUS_descriptor();
}
template <> struct is_proto_enum< ::curve::chunkserver::CHUNKSERVER_STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::CHUNKSERVER_STATE>() {
  return ::curve::chunkserver::CHUNKSERVER_STATE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fchunkserver_2eproto
