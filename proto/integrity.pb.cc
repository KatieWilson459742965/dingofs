// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/integrity.proto

#include "proto/integrity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fintegrity_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fintegrity_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IntegrityJob;
}  // namespace protobuf_proto_2fintegrity_2eproto
namespace curve {
namespace chunkserver {
class IntegrityJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntegrityJob>
      _instance;
} _IntegrityJob_default_instance_;
class IntegrityRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntegrityRequest>
      _instance;
} _IntegrityRequest_default_instance_;
class IntegrityResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntegrityResponse>
      _instance;
} _IntegrityResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace protobuf_proto_2fintegrity_2eproto {
static void InitDefaultsIntegrityJob() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_IntegrityJob_default_instance_;
    new (ptr) ::curve::chunkserver::IntegrityJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::IntegrityJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IntegrityJob =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntegrityJob}, {}};

static void InitDefaultsIntegrityRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_IntegrityRequest_default_instance_;
    new (ptr) ::curve::chunkserver::IntegrityRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::IntegrityRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IntegrityRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIntegrityRequest}, {
      &protobuf_proto_2fintegrity_2eproto::scc_info_IntegrityJob.base,}};

static void InitDefaultsIntegrityResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_IntegrityResponse_default_instance_;
    new (ptr) ::curve::chunkserver::IntegrityResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::IntegrityResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IntegrityResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIntegrityResponse}, {
      &protobuf_proto_2fintegrity_2eproto::scc_info_IntegrityJob.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_IntegrityJob.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntegrityRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntegrityResponse.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityJob, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityJob, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityJob, copyset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityJob, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityJob, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityJob, sched_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityJob, start_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityRequest, job_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::IntegrityResponse, job_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::curve::chunkserver::IntegrityJob)},
  { 17, 23, sizeof(::curve::chunkserver::IntegrityRequest)},
  { 24, 31, sizeof(::curve::chunkserver::IntegrityResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_IntegrityJob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_IntegrityRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_IntegrityResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/integrity.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025proto/integrity.proto\022\021curve.chunkserv"
      "er\"\234\001\n\014IntegrityJob\022\n\n\002id\030\001 \002(\005\022\017\n\007copys"
      "et\030\002 \002(\005\0225\n\005state\030\003 \002(\0162&.curve.chunkser"
      "ver.INTEGRITY_JOB_STATE\022\020\n\010progress\030\004 \002("
      "\005\022\022\n\nsched_time\030\005 \002(\005\022\022\n\nstart_time\030\006 \002("
      "\005\"@\n\020IntegrityRequest\022,\n\003job\030\001 \002(\0132\037.cur"
      "ve.chunkserver.IntegrityJob\"y\n\021Integrity"
      "Response\0226\n\006status\030\001 \002(\0162&.curve.chunkse"
      "rver.INTEGRITY_OP_STATUS\022,\n\003job\030\002 \003(\0132\037."
      "curve.chunkserver.IntegrityJob*\325\001\n\023INTEG"
      "RITY_JOB_STATE\022\036\n\032INTEGRITY_OP_STATE_WAI"
      "TING\020\000\022\036\n\032INTEGRITY_OP_STATE_RUNNING\020\001\022\037"
      "\n\033INTEGRITY_OP_STATE_CANCELED\020\002\022\037\n\033INTEG"
      "RITY_OP_STATE_FINISHED\020\003\022\035\n\031INTEGRITY_OP"
      "_STATE_PAUSED\020\004\022\035\n\031INTEGRITY_OP_STATE_FA"
      "ILED\020\005*_\n\023INTEGRITY_OP_STATUS\022\037\n\033INTEGRI"
      "TY_OP_STATUS_SUCCESS\020\000\022\'\n#INTEGRITY_OP_S"
      "TATUS_FAILURE_UNKNOWN\020\0012\312\003\n\020IntegritySer"
      "vice\022X\n\013ScheduleJob\022#.curve.chunkserver."
      "IntegrityRequest\032$.curve.chunkserver.Int"
      "egrityResponse\022V\n\tCancelJob\022#.curve.chun"
      "kserver.IntegrityRequest\032$.curve.chunkse"
      "rver.IntegrityResponse\022U\n\010PauseJob\022#.cur"
      "ve.chunkserver.IntegrityRequest\032$.curve."
      "chunkserver.IntegrityResponse\022V\n\tResumeJ"
      "ob\022#.curve.chunkserver.IntegrityRequest\032"
      "$.curve.chunkserver.IntegrityResponse\022U\n"
      "\010ListJobs\022#.curve.chunkserver.IntegrityR"
      "equest\032$.curve.chunkserver.IntegrityResp"
      "onseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/integrity.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fintegrity_2eproto
namespace curve {
namespace chunkserver {
const ::google::protobuf::EnumDescriptor* INTEGRITY_JOB_STATE_descriptor() {
  protobuf_proto_2fintegrity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fintegrity_2eproto::file_level_enum_descriptors[0];
}
bool INTEGRITY_JOB_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* INTEGRITY_OP_STATUS_descriptor() {
  protobuf_proto_2fintegrity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fintegrity_2eproto::file_level_enum_descriptors[1];
}
bool INTEGRITY_OP_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void IntegrityJob::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegrityJob::kIdFieldNumber;
const int IntegrityJob::kCopysetFieldNumber;
const int IntegrityJob::kStateFieldNumber;
const int IntegrityJob::kProgressFieldNumber;
const int IntegrityJob::kSchedTimeFieldNumber;
const int IntegrityJob::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegrityJob::IntegrityJob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fintegrity_2eproto::scc_info_IntegrityJob.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.IntegrityJob)
}
IntegrityJob::IntegrityJob(const IntegrityJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.IntegrityJob)
}

void IntegrityJob::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(start_time_));
}

IntegrityJob::~IntegrityJob() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.IntegrityJob)
  SharedDtor();
}

void IntegrityJob::SharedDtor() {
}

void IntegrityJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IntegrityJob::descriptor() {
  ::protobuf_proto_2fintegrity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fintegrity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntegrityJob& IntegrityJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fintegrity_2eproto::scc_info_IntegrityJob.base);
  return *internal_default_instance();
}


void IntegrityJob::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.IntegrityJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&id_)) + sizeof(start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntegrityJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.IntegrityJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 copyset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_copyset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .curve.chunkserver.INTEGRITY_JOB_STATE state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::INTEGRITY_JOB_STATE_IsValid(value)) {
            set_state(static_cast< ::curve::chunkserver::INTEGRITY_JOB_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sched_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sched_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sched_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 start_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.IntegrityJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.IntegrityJob)
  return false;
#undef DO_
}

void IntegrityJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.IntegrityJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 copyset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->copyset(), output);
  }

  // required .curve.chunkserver.INTEGRITY_JOB_STATE state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required int32 progress = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->progress(), output);
  }

  // required int32 sched_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sched_time(), output);
  }

  // required int32 start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.IntegrityJob)
}

::google::protobuf::uint8* IntegrityJob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.IntegrityJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 copyset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->copyset(), target);
  }

  // required .curve.chunkserver.INTEGRITY_JOB_STATE state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required int32 progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->progress(), target);
  }

  // required int32 sched_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sched_time(), target);
  }

  // required int32 start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.IntegrityJob)
  return target;
}

size_t IntegrityJob::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.IntegrityJob)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_copyset()) {
    // required int32 copyset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->copyset());
  }

  if (has_state()) {
    // required .curve.chunkserver.INTEGRITY_JOB_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_progress()) {
    // required int32 progress = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress());
  }

  if (has_sched_time()) {
    // required int32 sched_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sched_time());
  }

  if (has_start_time()) {
    // required int32 start_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_time());
  }

  return total_size;
}
size_t IntegrityJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.IntegrityJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 copyset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->copyset());

    // required .curve.chunkserver.INTEGRITY_JOB_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required int32 progress = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress());

    // required int32 sched_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sched_time());

    // required int32 start_time = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegrityJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.IntegrityJob)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegrityJob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegrityJob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.IntegrityJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.IntegrityJob)
    MergeFrom(*source);
  }
}

void IntegrityJob::MergeFrom(const IntegrityJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.IntegrityJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      copyset_ = from.copyset_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000010u) {
      sched_time_ = from.sched_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntegrityJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.IntegrityJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegrityJob::CopyFrom(const IntegrityJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.IntegrityJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegrityJob::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void IntegrityJob::Swap(IntegrityJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegrityJob::InternalSwap(IntegrityJob* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(copyset_, other->copyset_);
  swap(state_, other->state_);
  swap(progress_, other->progress_);
  swap(sched_time_, other->sched_time_);
  swap(start_time_, other->start_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IntegrityJob::GetMetadata() const {
  protobuf_proto_2fintegrity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fintegrity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IntegrityRequest::InitAsDefaultInstance() {
  ::curve::chunkserver::_IntegrityRequest_default_instance_._instance.get_mutable()->job_ = const_cast< ::curve::chunkserver::IntegrityJob*>(
      ::curve::chunkserver::IntegrityJob::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegrityRequest::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegrityRequest::IntegrityRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fintegrity_2eproto::scc_info_IntegrityRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.IntegrityRequest)
}
IntegrityRequest::IntegrityRequest(const IntegrityRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job()) {
    job_ = new ::curve::chunkserver::IntegrityJob(*from.job_);
  } else {
    job_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.IntegrityRequest)
}

void IntegrityRequest::SharedCtor() {
  job_ = NULL;
}

IntegrityRequest::~IntegrityRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.IntegrityRequest)
  SharedDtor();
}

void IntegrityRequest::SharedDtor() {
  if (this != internal_default_instance()) delete job_;
}

void IntegrityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IntegrityRequest::descriptor() {
  ::protobuf_proto_2fintegrity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fintegrity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntegrityRequest& IntegrityRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fintegrity_2eproto::scc_info_IntegrityRequest.base);
  return *internal_default_instance();
}


void IntegrityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.IntegrityRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(job_ != NULL);
    job_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntegrityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.IntegrityRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .curve.chunkserver.IntegrityJob job = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.IntegrityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.IntegrityRequest)
  return false;
#undef DO_
}

void IntegrityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.IntegrityRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.IntegrityJob job = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_job(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.IntegrityRequest)
}

::google::protobuf::uint8* IntegrityRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.IntegrityRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.IntegrityJob job = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_job(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.IntegrityRequest)
  return target;
}

size_t IntegrityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.IntegrityRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .curve.chunkserver.IntegrityJob job = 1;
  if (has_job()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *job_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegrityRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.IntegrityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegrityRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegrityRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.IntegrityRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.IntegrityRequest)
    MergeFrom(*source);
  }
}

void IntegrityRequest::MergeFrom(const IntegrityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.IntegrityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job()) {
    mutable_job()->::curve::chunkserver::IntegrityJob::MergeFrom(from.job());
  }
}

void IntegrityRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.IntegrityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegrityRequest::CopyFrom(const IntegrityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.IntegrityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegrityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_job()) {
    if (!this->job_->IsInitialized()) return false;
  }
  return true;
}

void IntegrityRequest::Swap(IntegrityRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegrityRequest::InternalSwap(IntegrityRequest* other) {
  using std::swap;
  swap(job_, other->job_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IntegrityRequest::GetMetadata() const {
  protobuf_proto_2fintegrity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fintegrity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IntegrityResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntegrityResponse::kStatusFieldNumber;
const int IntegrityResponse::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntegrityResponse::IntegrityResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fintegrity_2eproto::scc_info_IntegrityResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.IntegrityResponse)
}
IntegrityResponse::IntegrityResponse(const IntegrityResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      job_(from.job_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.IntegrityResponse)
}

void IntegrityResponse::SharedCtor() {
  status_ = 0;
}

IntegrityResponse::~IntegrityResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.IntegrityResponse)
  SharedDtor();
}

void IntegrityResponse::SharedDtor() {
}

void IntegrityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IntegrityResponse::descriptor() {
  ::protobuf_proto_2fintegrity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fintegrity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntegrityResponse& IntegrityResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fintegrity_2eproto::scc_info_IntegrityResponse.base);
  return *internal_default_instance();
}


void IntegrityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.IntegrityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_.Clear();
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntegrityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.IntegrityResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .curve.chunkserver.INTEGRITY_OP_STATUS status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::INTEGRITY_OP_STATUS_IsValid(value)) {
            set_status(static_cast< ::curve::chunkserver::INTEGRITY_OP_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .curve.chunkserver.IntegrityJob job = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.IntegrityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.IntegrityResponse)
  return false;
#undef DO_
}

void IntegrityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.IntegrityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.INTEGRITY_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .curve.chunkserver.IntegrityJob job = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->job_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->job(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.IntegrityResponse)
}

::google::protobuf::uint8* IntegrityResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.IntegrityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.INTEGRITY_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .curve.chunkserver.IntegrityJob job = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->job_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->job(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.IntegrityResponse)
  return target;
}

size_t IntegrityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.IntegrityResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .curve.chunkserver.INTEGRITY_OP_STATUS status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  // repeated .curve.chunkserver.IntegrityJob job = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->job_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->job(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegrityResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.IntegrityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegrityResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntegrityResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.IntegrityResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.IntegrityResponse)
    MergeFrom(*source);
  }
}

void IntegrityResponse::MergeFrom(const IntegrityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.IntegrityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  job_.MergeFrom(from.job_);
  if (from.has_status()) {
    set_status(from.status());
  }
}

void IntegrityResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.IntegrityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegrityResponse::CopyFrom(const IntegrityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.IntegrityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegrityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->job())) return false;
  return true;
}

void IntegrityResponse::Swap(IntegrityResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntegrityResponse::InternalSwap(IntegrityResponse* other) {
  using std::swap;
  CastToBase(&job_)->InternalSwap(CastToBase(&other->job_));
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IntegrityResponse::GetMetadata() const {
  protobuf_proto_2fintegrity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fintegrity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

IntegrityService::~IntegrityService() {}

const ::google::protobuf::ServiceDescriptor* IntegrityService::descriptor() {
  protobuf_proto_2fintegrity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fintegrity_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* IntegrityService::GetDescriptor() {
  return descriptor();
}

void IntegrityService::ScheduleJob(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::IntegrityRequest*,
                         ::curve::chunkserver::IntegrityResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ScheduleJob() not implemented.");
  done->Run();
}

void IntegrityService::CancelJob(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::IntegrityRequest*,
                         ::curve::chunkserver::IntegrityResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CancelJob() not implemented.");
  done->Run();
}

void IntegrityService::PauseJob(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::IntegrityRequest*,
                         ::curve::chunkserver::IntegrityResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PauseJob() not implemented.");
  done->Run();
}

void IntegrityService::ResumeJob(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::IntegrityRequest*,
                         ::curve::chunkserver::IntegrityResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ResumeJob() not implemented.");
  done->Run();
}

void IntegrityService::ListJobs(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::IntegrityRequest*,
                         ::curve::chunkserver::IntegrityResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ListJobs() not implemented.");
  done->Run();
}

void IntegrityService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_proto_2fintegrity_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      ScheduleJob(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::IntegrityRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::IntegrityResponse*>(response),
             done);
      break;
    case 1:
      CancelJob(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::IntegrityRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::IntegrityResponse*>(response),
             done);
      break;
    case 2:
      PauseJob(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::IntegrityRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::IntegrityResponse*>(response),
             done);
      break;
    case 3:
      ResumeJob(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::IntegrityRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::IntegrityResponse*>(response),
             done);
      break;
    case 4:
      ListJobs(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::IntegrityRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::IntegrityResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& IntegrityService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::IntegrityRequest::default_instance();
    case 1:
      return ::curve::chunkserver::IntegrityRequest::default_instance();
    case 2:
      return ::curve::chunkserver::IntegrityRequest::default_instance();
    case 3:
      return ::curve::chunkserver::IntegrityRequest::default_instance();
    case 4:
      return ::curve::chunkserver::IntegrityRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& IntegrityService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::IntegrityResponse::default_instance();
    case 1:
      return ::curve::chunkserver::IntegrityResponse::default_instance();
    case 2:
      return ::curve::chunkserver::IntegrityResponse::default_instance();
    case 3:
      return ::curve::chunkserver::IntegrityResponse::default_instance();
    case 4:
      return ::curve::chunkserver::IntegrityResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

IntegrityService_Stub::IntegrityService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
IntegrityService_Stub::IntegrityService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
IntegrityService_Stub::~IntegrityService_Stub() {
  if (owns_channel_) delete channel_;
}

void IntegrityService_Stub::ScheduleJob(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::IntegrityRequest* request,
                              ::curve::chunkserver::IntegrityResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void IntegrityService_Stub::CancelJob(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::IntegrityRequest* request,
                              ::curve::chunkserver::IntegrityResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void IntegrityService_Stub::PauseJob(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::IntegrityRequest* request,
                              ::curve::chunkserver::IntegrityResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void IntegrityService_Stub::ResumeJob(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::IntegrityRequest* request,
                              ::curve::chunkserver::IntegrityResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void IntegrityService_Stub::ListJobs(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::IntegrityRequest* request,
                              ::curve::chunkserver::IntegrityResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::IntegrityJob* Arena::CreateMaybeMessage< ::curve::chunkserver::IntegrityJob >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::IntegrityJob >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::IntegrityRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::IntegrityRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::IntegrityRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::IntegrityResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::IntegrityResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::IntegrityResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
