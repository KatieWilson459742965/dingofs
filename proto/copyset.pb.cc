// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: copyset.proto

#include "copyset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace curve {
namespace chunkserver {
class CopysetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CopysetRequest>
      _instance;
} _CopysetRequest_default_instance_;
class CopysetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CopysetResponse>
      _instance;
} _CopysetResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace protobuf_copyset_2eproto {
static void InitDefaultsCopysetRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_CopysetRequest_default_instance_;
    new (ptr) ::curve::chunkserver::CopysetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::CopysetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CopysetRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCopysetRequest}, {}};

static void InitDefaultsCopysetResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_CopysetResponse_default_instance_;
    new (ptr) ::curve::chunkserver::CopysetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::CopysetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CopysetResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCopysetResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CopysetRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CopysetResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::CopysetRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::CopysetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::CopysetRequest, logicpoolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::CopysetRequest, copysetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::CopysetRequest, conf_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::CopysetResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::CopysetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::CopysetResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::CopysetResponse, redirect_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::curve::chunkserver::CopysetRequest)},
  { 11, 18, sizeof(::curve::chunkserver::CopysetResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_CopysetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_CopysetResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "copyset.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rcopyset.proto\022\021curve.chunkserver\"F\n\016Co"
      "pysetRequest\022\023\n\013logicPoolId\030\001 \002(\r\022\021\n\tcop"
      "ysetId\030\002 \002(\r\022\014\n\004conf\030\003 \003(\t\"Y\n\017CopysetRes"
      "ponse\0224\n\006status\030\001 \001(\0162$.curve.chunkserve"
      "r.COPYSET_OP_STATUS\022\020\n\010redirect\030\002 \001(\t*v\n"
      "\021COPYSET_OP_STATUS\022\035\n\031COPYSET_OP_STATUS_"
      "SUCCESS\020\000\022\033\n\027COPYSET_OP_STATUS_EXIST\020\001\022%"
      "\n!COPYSET_OP_STATUS_FAILURE_UNKNOWN\020\0022l\n"
      "\016CopysetService\022Z\n\021CreateCopysetNode\022!.c"
      "urve.chunkserver.CopysetRequest\032\".curve."
      "chunkserver.CopysetResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 432);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "copyset.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_copyset_2eproto
namespace curve {
namespace chunkserver {
const ::google::protobuf::EnumDescriptor* COPYSET_OP_STATUS_descriptor() {
  protobuf_copyset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_copyset_2eproto::file_level_enum_descriptors[0];
}
bool COPYSET_OP_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CopysetRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CopysetRequest::kLogicPoolIdFieldNumber;
const int CopysetRequest::kCopysetIdFieldNumber;
const int CopysetRequest::kConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CopysetRequest::CopysetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_copyset_2eproto::scc_info_CopysetRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.CopysetRequest)
}
CopysetRequest::CopysetRequest(const CopysetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      conf_(from.conf_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logicpoolid_, &from.logicpoolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&copysetid_) -
    reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.CopysetRequest)
}

void CopysetRequest::SharedCtor() {
  ::memset(&logicpoolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copysetid_) -
      reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
}

CopysetRequest::~CopysetRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.CopysetRequest)
  SharedDtor();
}

void CopysetRequest::SharedDtor() {
}

void CopysetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CopysetRequest::descriptor() {
  ::protobuf_copyset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_copyset_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CopysetRequest& CopysetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_copyset_2eproto::scc_info_CopysetRequest.base);
  return *internal_default_instance();
}


void CopysetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.CopysetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conf_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&logicpoolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copysetid_) -
        reinterpret_cast<char*>(&logicpoolid_)) + sizeof(copysetid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CopysetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.CopysetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logicPoolId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logicpoolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicpoolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 copysetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_copysetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copysetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string conf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_conf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conf(this->conf_size() - 1).data(),
            static_cast<int>(this->conf(this->conf_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.CopysetRequest.conf");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.CopysetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.CopysetRequest)
  return false;
#undef DO_
}

void CopysetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.CopysetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logicpoolid(), output);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copysetid(), output);
  }

  // repeated string conf = 3;
  for (int i = 0, n = this->conf_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conf(i).data(), static_cast<int>(this->conf(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.CopysetRequest.conf");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->conf(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.CopysetRequest)
}

::google::protobuf::uint8* CopysetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.CopysetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 logicPoolId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logicpoolid(), target);
  }

  // required uint32 copysetId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copysetid(), target);
  }

  // repeated string conf = 3;
  for (int i = 0, n = this->conf_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conf(i).data(), static_cast<int>(this->conf(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.CopysetRequest.conf");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->conf(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.CopysetRequest)
  return target;
}

size_t CopysetRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.CopysetRequest)
  size_t total_size = 0;

  if (has_logicpoolid()) {
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());
  }

  if (has_copysetid()) {
    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());
  }

  return total_size;
}
size_t CopysetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.CopysetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 logicPoolId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logicpoolid());

    // required uint32 copysetId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->copysetid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string conf = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->conf_size());
  for (int i = 0, n = this->conf_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->conf(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CopysetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.CopysetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CopysetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CopysetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.CopysetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.CopysetRequest)
    MergeFrom(*source);
  }
}

void CopysetRequest::MergeFrom(const CopysetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.CopysetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conf_.MergeFrom(from.conf_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      logicpoolid_ = from.logicpoolid_;
    }
    if (cached_has_bits & 0x00000002u) {
      copysetid_ = from.copysetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CopysetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.CopysetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopysetRequest::CopyFrom(const CopysetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.CopysetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopysetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CopysetRequest::Swap(CopysetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CopysetRequest::InternalSwap(CopysetRequest* other) {
  using std::swap;
  conf_.InternalSwap(CastToBase(&other->conf_));
  swap(logicpoolid_, other->logicpoolid_);
  swap(copysetid_, other->copysetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CopysetRequest::GetMetadata() const {
  protobuf_copyset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_copyset_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CopysetResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CopysetResponse::kStatusFieldNumber;
const int CopysetResponse::kRedirectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CopysetResponse::CopysetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_copyset_2eproto::scc_info_CopysetResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.CopysetResponse)
}
CopysetResponse::CopysetResponse(const CopysetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect()) {
    redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.CopysetResponse)
}

void CopysetResponse::SharedCtor() {
  redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

CopysetResponse::~CopysetResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.CopysetResponse)
  SharedDtor();
}

void CopysetResponse::SharedDtor() {
  redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CopysetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CopysetResponse::descriptor() {
  ::protobuf_copyset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_copyset_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CopysetResponse& CopysetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_copyset_2eproto::scc_info_CopysetResponse.base);
  return *internal_default_instance();
}


void CopysetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.CopysetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    redirect_.ClearNonDefaultToEmptyNoArena();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CopysetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.CopysetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .curve.chunkserver.COPYSET_OP_STATUS status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::COPYSET_OP_STATUS_IsValid(value)) {
            set_status(static_cast< ::curve::chunkserver::COPYSET_OP_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect().data(), static_cast<int>(this->redirect().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.CopysetResponse.redirect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.CopysetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.CopysetResponse)
  return false;
#undef DO_
}

void CopysetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.CopysetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .curve.chunkserver.COPYSET_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string redirect = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), static_cast<int>(this->redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.CopysetResponse.redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.CopysetResponse)
}

::google::protobuf::uint8* CopysetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.CopysetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .curve.chunkserver.COPYSET_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string redirect = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect().data(), static_cast<int>(this->redirect().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.CopysetResponse.redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.CopysetResponse)
  return target;
}

size_t CopysetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.CopysetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string redirect = 2;
    if (has_redirect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect());
    }

    // optional .curve.chunkserver.COPYSET_OP_STATUS status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CopysetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.CopysetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CopysetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CopysetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.CopysetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.CopysetResponse)
    MergeFrom(*source);
  }
}

void CopysetResponse::MergeFrom(const CopysetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.CopysetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_redirect();
      redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CopysetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.CopysetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopysetResponse::CopyFrom(const CopysetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.CopysetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopysetResponse::IsInitialized() const {
  return true;
}

void CopysetResponse::Swap(CopysetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CopysetResponse::InternalSwap(CopysetResponse* other) {
  using std::swap;
  redirect_.Swap(&other->redirect_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CopysetResponse::GetMetadata() const {
  protobuf_copyset_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_copyset_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CopysetService::~CopysetService() {}

const ::google::protobuf::ServiceDescriptor* CopysetService::descriptor() {
  protobuf_copyset_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_copyset_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* CopysetService::GetDescriptor() {
  return descriptor();
}

void CopysetService::CreateCopysetNode(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::CopysetRequest*,
                         ::curve::chunkserver::CopysetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateCopysetNode() not implemented.");
  done->Run();
}

void CopysetService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_copyset_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      CreateCopysetNode(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::CopysetRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::CopysetResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& CopysetService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::CopysetRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& CopysetService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::CopysetResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

CopysetService_Stub::CopysetService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CopysetService_Stub::CopysetService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
CopysetService_Stub::~CopysetService_Stub() {
  if (owns_channel_) delete channel_;
}

void CopysetService_Stub::CreateCopysetNode(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::CopysetRequest* request,
                              ::curve::chunkserver::CopysetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::CopysetRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::CopysetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::CopysetRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::CopysetResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::CopysetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::CopysetResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
