// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/chunkserver.proto

#include "proto/chunkserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fchunkserver_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fchunkserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChunkServerInfo;
}  // namespace protobuf_proto_2fchunkserver_2eproto
namespace curve {
namespace chunkserver {
class ChunkServerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkServerRequest>
      _instance;
} _ChunkServerRequest_default_instance_;
class ChunkServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkServerInfo>
      _instance;
} _ChunkServerInfo_default_instance_;
class ChunkServerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkServerResponse>
      _instance;
} _ChunkServerResponse_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace protobuf_proto_2fchunkserver_2eproto {
static void InitDefaultsChunkServerRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ChunkServerRequest_default_instance_;
    new (ptr) ::curve::chunkserver::ChunkServerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ChunkServerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChunkServerRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChunkServerRequest}, {}};

static void InitDefaultsChunkServerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ChunkServerInfo_default_instance_;
    new (ptr) ::curve::chunkserver::ChunkServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ChunkServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChunkServerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChunkServerInfo}, {}};

static void InitDefaultsChunkServerResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::curve::chunkserver::_ChunkServerResponse_default_instance_;
    new (ptr) ::curve::chunkserver::ChunkServerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve::chunkserver::ChunkServerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChunkServerResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChunkServerResponse}, {
      &protobuf_proto_2fchunkserver_2eproto::scc_info_ChunkServerInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkServerRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkServerInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkServerResponse.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerRequest, op_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerInfo, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerInfo, available_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerResponse, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::curve::chunkserver::ChunkServerResponse, info_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::curve::chunkserver::ChunkServerRequest)},
  { 7, 17, sizeof(::curve::chunkserver::ChunkServerInfo)},
  { 22, 30, sizeof(::curve::chunkserver::ChunkServerResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ChunkServerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ChunkServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::curve::chunkserver::_ChunkServerResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/chunkserver.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027proto/chunkserver.proto\022\021curve.chunkse"
      "rver\"H\n\022ChunkServerRequest\0222\n\002op\030\001 \002(\0162&"
      ".curve.chunkserver.CHUNKSERVER_OP_TYPE\"\205"
      "\001\n\017ChunkServerInfo\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002"
      " \002(\t\0223\n\005state\030\003 \002(\0162$.curve.chunkserver."
      "CHUNKSERVER_STATE\022\020\n\010capacity\030\004 \002(\005\022\021\n\ta"
      "vailable\030\005 \002(\005\"\266\001\n\023ChunkServerResponse\0228"
      "\n\006status\030\001 \002(\0162(.curve.chunkserver.CHUNK"
      "SERVER_OP_STATUS\0223\n\005state\030\002 \001(\0162$.curve."
      "chunkserver.CHUNKSERVER_STATE\0220\n\004info\030\003 "
      "\001(\0132\".curve.chunkserver.ChunkServerInfo*"
      "\231\001\n\023CHUNKSERVER_OP_TYPE\022\036\n\032CHUNKSERVER_O"
      "P_TYPE_ENABLE\020\000\022\037\n\033CHUNKSERVER_OP_TYPE_D"
      "ISABLE\020\001\022 \n\034CHUNKSERVER_OP_TYPE_GETSTATE"
      "\020\002\022\037\n\033CHUNKSERVER_OP_TYPE_GETINFO\020\003*e\n\025C"
      "HUNKSERVER_OP_STATUS\022!\n\035CHUNKSERVER_OP_S"
      "TATUS_SUCCESS\020\000\022)\n%CHUNKSERVER_OP_STATUS"
      "_FAILURE_UNKNOWN\020\001*M\n\021CHUNKSERVER_STATE\022"
      "\030\n\024CHUNKSERVER_STATE_OK\020\000\022\036\n\032CHUNKSERVER"
      "_STATE_DISABLED\020\0012\311\001\n\022ChunkServerService"
      "\022Y\n\010GetState\022%.curve.chunkserver.ChunkSe"
      "rverRequest\032&.curve.chunkserver.ChunkSer"
      "verResponse\022X\n\007GetInfo\022%.curve.chunkserv"
      "er.ChunkServerRequest\032&.curve.chunkserve"
      "r.ChunkServerResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 986);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/chunkserver.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fchunkserver_2eproto
namespace curve {
namespace chunkserver {
const ::google::protobuf::EnumDescriptor* CHUNKSERVER_OP_TYPE_descriptor() {
  protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fchunkserver_2eproto::file_level_enum_descriptors[0];
}
bool CHUNKSERVER_OP_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHUNKSERVER_OP_STATUS_descriptor() {
  protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fchunkserver_2eproto::file_level_enum_descriptors[1];
}
bool CHUNKSERVER_OP_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHUNKSERVER_STATE_descriptor() {
  protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fchunkserver_2eproto::file_level_enum_descriptors[2];
}
bool CHUNKSERVER_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ChunkServerRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkServerRequest::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkServerRequest::ChunkServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fchunkserver_2eproto::scc_info_ChunkServerRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ChunkServerRequest)
}
ChunkServerRequest::ChunkServerRequest(const ChunkServerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ChunkServerRequest)
}

void ChunkServerRequest::SharedCtor() {
  op_ = 0;
}

ChunkServerRequest::~ChunkServerRequest() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ChunkServerRequest)
  SharedDtor();
}

void ChunkServerRequest::SharedDtor() {
}

void ChunkServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkServerRequest::descriptor() {
  ::protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fchunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkServerRequest& ChunkServerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fchunkserver_2eproto::scc_info_ChunkServerRequest.base);
  return *internal_default_instance();
}


void ChunkServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ChunkServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  op_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ChunkServerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .curve.chunkserver.CHUNKSERVER_OP_TYPE op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::CHUNKSERVER_OP_TYPE_IsValid(value)) {
            set_op(static_cast< ::curve::chunkserver::CHUNKSERVER_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ChunkServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ChunkServerRequest)
  return false;
#undef DO_
}

void ChunkServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ChunkServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNKSERVER_OP_TYPE op = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ChunkServerRequest)
}

::google::protobuf::uint8* ChunkServerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ChunkServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNKSERVER_OP_TYPE op = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ChunkServerRequest)
  return target;
}

size_t ChunkServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ChunkServerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .curve.chunkserver.CHUNKSERVER_OP_TYPE op = 1;
  if (has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ChunkServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkServerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkServerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ChunkServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ChunkServerRequest)
    MergeFrom(*source);
  }
}

void ChunkServerRequest::MergeFrom(const ChunkServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ChunkServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op()) {
    set_op(from.op());
  }
}

void ChunkServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ChunkServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkServerRequest::CopyFrom(const ChunkServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ChunkServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ChunkServerRequest::Swap(ChunkServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkServerRequest::InternalSwap(ChunkServerRequest* other) {
  using std::swap;
  swap(op_, other->op_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkServerRequest::GetMetadata() const {
  protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fchunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChunkServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkServerInfo::kIdFieldNumber;
const int ChunkServerInfo::kNameFieldNumber;
const int ChunkServerInfo::kStateFieldNumber;
const int ChunkServerInfo::kCapacityFieldNumber;
const int ChunkServerInfo::kAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkServerInfo::ChunkServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fchunkserver_2eproto::scc_info_ChunkServerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ChunkServerInfo)
}
ChunkServerInfo::ChunkServerInfo(const ChunkServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&id_)) + sizeof(available_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ChunkServerInfo)
}

void ChunkServerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&id_)) + sizeof(available_));
}

ChunkServerInfo::~ChunkServerInfo() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ChunkServerInfo)
  SharedDtor();
}

void ChunkServerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChunkServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkServerInfo::descriptor() {
  ::protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fchunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkServerInfo& ChunkServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fchunkserver_2eproto::scc_info_ChunkServerInfo.base);
  return *internal_default_instance();
}


void ChunkServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ChunkServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&available_) -
        reinterpret_cast<char*>(&id_)) + sizeof(available_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ChunkServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "curve.chunkserver.ChunkServerInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .curve.chunkserver.CHUNKSERVER_STATE state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::CHUNKSERVER_STATE_IsValid(value)) {
            set_state(static_cast< ::curve::chunkserver::CHUNKSERVER_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 capacity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 available = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ChunkServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ChunkServerInfo)
  return false;
#undef DO_
}

void ChunkServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ChunkServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChunkServerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .curve.chunkserver.CHUNKSERVER_STATE state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required int32 capacity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->capacity(), output);
  }

  // required int32 available = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->available(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ChunkServerInfo)
}

::google::protobuf::uint8* ChunkServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ChunkServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "curve.chunkserver.ChunkServerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .curve.chunkserver.CHUNKSERVER_STATE state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required int32 capacity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->capacity(), target);
  }

  // required int32 available = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->available(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ChunkServerInfo)
  return target;
}

size_t ChunkServerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:curve.chunkserver.ChunkServerInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_state()) {
    // required .curve.chunkserver.CHUNKSERVER_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_capacity()) {
    // required int32 capacity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capacity());
  }

  if (has_available()) {
    // required int32 available = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->available());
  }

  return total_size;
}
size_t ChunkServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ChunkServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required .curve.chunkserver.CHUNKSERVER_STATE state = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required int32 capacity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->capacity());

    // required int32 available = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->available());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ChunkServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ChunkServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ChunkServerInfo)
    MergeFrom(*source);
  }
}

void ChunkServerInfo::MergeFrom(const ChunkServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ChunkServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000010u) {
      available_ = from.available_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChunkServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ChunkServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkServerInfo::CopyFrom(const ChunkServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ChunkServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void ChunkServerInfo::Swap(ChunkServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkServerInfo::InternalSwap(ChunkServerInfo* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(state_, other->state_);
  swap(capacity_, other->capacity_);
  swap(available_, other->available_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkServerInfo::GetMetadata() const {
  protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fchunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChunkServerResponse::InitAsDefaultInstance() {
  ::curve::chunkserver::_ChunkServerResponse_default_instance_._instance.get_mutable()->info_ = const_cast< ::curve::chunkserver::ChunkServerInfo*>(
      ::curve::chunkserver::ChunkServerInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkServerResponse::kStatusFieldNumber;
const int ChunkServerResponse::kStateFieldNumber;
const int ChunkServerResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkServerResponse::ChunkServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fchunkserver_2eproto::scc_info_ChunkServerResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:curve.chunkserver.ChunkServerResponse)
}
ChunkServerResponse::ChunkServerResponse(const ChunkServerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::curve::chunkserver::ChunkServerInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:curve.chunkserver.ChunkServerResponse)
}

void ChunkServerResponse::SharedCtor() {
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&info_)) + sizeof(state_));
}

ChunkServerResponse::~ChunkServerResponse() {
  // @@protoc_insertion_point(destructor:curve.chunkserver.ChunkServerResponse)
  SharedDtor();
}

void ChunkServerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void ChunkServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkServerResponse::descriptor() {
  ::protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fchunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkServerResponse& ChunkServerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fchunkserver_2eproto::scc_info_ChunkServerResponse.base);
  return *internal_default_instance();
}


void ChunkServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:curve.chunkserver.ChunkServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != NULL);
    info_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&status_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChunkServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:curve.chunkserver.ChunkServerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .curve.chunkserver.CHUNKSERVER_OP_STATUS status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::CHUNKSERVER_OP_STATUS_IsValid(value)) {
            set_status(static_cast< ::curve::chunkserver::CHUNKSERVER_OP_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .curve.chunkserver.CHUNKSERVER_STATE state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::curve::chunkserver::CHUNKSERVER_STATE_IsValid(value)) {
            set_state(static_cast< ::curve::chunkserver::CHUNKSERVER_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .curve.chunkserver.ChunkServerInfo info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:curve.chunkserver.ChunkServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:curve.chunkserver.ChunkServerResponse)
  return false;
#undef DO_
}

void ChunkServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:curve.chunkserver.ChunkServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNKSERVER_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .curve.chunkserver.CHUNKSERVER_STATE state = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional .curve.chunkserver.ChunkServerInfo info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:curve.chunkserver.ChunkServerResponse)
}

::google::protobuf::uint8* ChunkServerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:curve.chunkserver.ChunkServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .curve.chunkserver.CHUNKSERVER_OP_STATUS status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .curve.chunkserver.CHUNKSERVER_STATE state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional .curve.chunkserver.ChunkServerInfo info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve.chunkserver.ChunkServerResponse)
  return target;
}

size_t ChunkServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve.chunkserver.ChunkServerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .curve.chunkserver.CHUNKSERVER_OP_STATUS status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  // optional .curve.chunkserver.ChunkServerInfo info = 3;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // optional .curve.chunkserver.CHUNKSERVER_STATE state = 2;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve.chunkserver.ChunkServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkServerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkServerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve.chunkserver.ChunkServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve.chunkserver.ChunkServerResponse)
    MergeFrom(*source);
  }
}

void ChunkServerResponse::MergeFrom(const ChunkServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve.chunkserver.ChunkServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::curve::chunkserver::ChunkServerInfo::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChunkServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve.chunkserver.ChunkServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkServerResponse::CopyFrom(const ChunkServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve.chunkserver.ChunkServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkServerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_info()) {
    if (!this->info_->IsInitialized()) return false;
  }
  return true;
}

void ChunkServerResponse::Swap(ChunkServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkServerResponse::InternalSwap(ChunkServerResponse* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(status_, other->status_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkServerResponse::GetMetadata() const {
  protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fchunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ChunkServerService::~ChunkServerService() {}

const ::google::protobuf::ServiceDescriptor* ChunkServerService::descriptor() {
  protobuf_proto_2fchunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fchunkserver_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* ChunkServerService::GetDescriptor() {
  return descriptor();
}

void ChunkServerService::GetState(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ChunkServerRequest*,
                         ::curve::chunkserver::ChunkServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetState() not implemented.");
  done->Run();
}

void ChunkServerService::GetInfo(::google::protobuf::RpcController* controller,
                         const ::curve::chunkserver::ChunkServerRequest*,
                         ::curve::chunkserver::ChunkServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInfo() not implemented.");
  done->Run();
}

void ChunkServerService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_proto_2fchunkserver_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetState(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ChunkServerRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ChunkServerResponse*>(response),
             done);
      break;
    case 1:
      GetInfo(controller,
             ::google::protobuf::down_cast<const ::curve::chunkserver::ChunkServerRequest*>(request),
             ::google::protobuf::down_cast< ::curve::chunkserver::ChunkServerResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ChunkServerService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::ChunkServerRequest::default_instance();
    case 1:
      return ::curve::chunkserver::ChunkServerRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ChunkServerService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::curve::chunkserver::ChunkServerResponse::default_instance();
    case 1:
      return ::curve::chunkserver::ChunkServerResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ChunkServerService_Stub::ChunkServerService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ChunkServerService_Stub::ChunkServerService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ChunkServerService_Stub::~ChunkServerService_Stub() {
  if (owns_channel_) delete channel_;
}

void ChunkServerService_Stub::GetState(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ChunkServerRequest* request,
                              ::curve::chunkserver::ChunkServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ChunkServerService_Stub::GetInfo(::google::protobuf::RpcController* controller,
                              const ::curve::chunkserver::ChunkServerRequest* request,
                              ::curve::chunkserver::ChunkServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ChunkServerRequest* Arena::CreateMaybeMessage< ::curve::chunkserver::ChunkServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ChunkServerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ChunkServerInfo* Arena::CreateMaybeMessage< ::curve::chunkserver::ChunkServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ChunkServerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::curve::chunkserver::ChunkServerResponse* Arena::CreateMaybeMessage< ::curve::chunkserver::ChunkServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::curve::chunkserver::ChunkServerResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
