// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunk.proto

#ifndef PROTOBUF_INCLUDED_chunk_2eproto
#define PROTOBUF_INCLUDED_chunk_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chunk_2eproto 

namespace protobuf_chunk_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chunk_2eproto
namespace curve {
namespace chunkserver {
class ChunkRequest;
class ChunkRequestDefaultTypeInternal;
extern ChunkRequestDefaultTypeInternal _ChunkRequest_default_instance_;
class ChunkResponse;
class ChunkResponseDefaultTypeInternal;
extern ChunkResponseDefaultTypeInternal _ChunkResponse_default_instance_;
class ChunkSnapshotRequest;
class ChunkSnapshotRequestDefaultTypeInternal;
extern ChunkSnapshotRequestDefaultTypeInternal _ChunkSnapshotRequest_default_instance_;
class ChunkSnapshotResponse;
class ChunkSnapshotResponseDefaultTypeInternal;
extern ChunkSnapshotResponseDefaultTypeInternal _ChunkSnapshotResponse_default_instance_;
class QosRequestParas;
class QosRequestParasDefaultTypeInternal;
extern QosRequestParasDefaultTypeInternal _QosRequestParas_default_instance_;
class QosResponseParas;
class QosResponseParasDefaultTypeInternal;
extern QosResponseParasDefaultTypeInternal _QosResponseParas_default_instance_;
}  // namespace chunkserver
}  // namespace curve
namespace google {
namespace protobuf {
template<> ::curve::chunkserver::ChunkRequest* Arena::CreateMaybeMessage<::curve::chunkserver::ChunkRequest>(Arena*);
template<> ::curve::chunkserver::ChunkResponse* Arena::CreateMaybeMessage<::curve::chunkserver::ChunkResponse>(Arena*);
template<> ::curve::chunkserver::ChunkSnapshotRequest* Arena::CreateMaybeMessage<::curve::chunkserver::ChunkSnapshotRequest>(Arena*);
template<> ::curve::chunkserver::ChunkSnapshotResponse* Arena::CreateMaybeMessage<::curve::chunkserver::ChunkSnapshotResponse>(Arena*);
template<> ::curve::chunkserver::QosRequestParas* Arena::CreateMaybeMessage<::curve::chunkserver::QosRequestParas>(Arena*);
template<> ::curve::chunkserver::QosResponseParas* Arena::CreateMaybeMessage<::curve::chunkserver::QosResponseParas>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace curve {
namespace chunkserver {

enum CHUNK_OP_TYPE {
  CHUNK_OP_DELETE = 0,
  CHUNK_OP_READ = 1,
  CHUNK_OP_WRITE = 2
};
bool CHUNK_OP_TYPE_IsValid(int value);
const CHUNK_OP_TYPE CHUNK_OP_TYPE_MIN = CHUNK_OP_DELETE;
const CHUNK_OP_TYPE CHUNK_OP_TYPE_MAX = CHUNK_OP_WRITE;
const int CHUNK_OP_TYPE_ARRAYSIZE = CHUNK_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHUNK_OP_TYPE_descriptor();
inline const ::std::string& CHUNK_OP_TYPE_Name(CHUNK_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHUNK_OP_TYPE_descriptor(), value);
}
inline bool CHUNK_OP_TYPE_Parse(
    const ::std::string& name, CHUNK_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHUNK_OP_TYPE>(
    CHUNK_OP_TYPE_descriptor(), name, value);
}
enum CHUNK_OP_STATUS {
  CHUNK_OP_STATUS_SUCCESS = 0,
  CHUNK_OP_STATUS_REDIRECTED = 1,
  CHUNK_OP_STATUS_DISK_FAIL = 2,
  CHUNK_OP_STATUS_CRC_FAIL = 3,
  CHUNK_OP_STATUS_INVALID_REQUEST = 4,
  CHUNK_OP_STATUS_NOSPACE = 5,
  CHUNK_OP_STATUS_COPYSET_NOTEXIST = 6,
  CHUNK_OP_STATUS_FAILURE_UNKNOWN = 7
};
bool CHUNK_OP_STATUS_IsValid(int value);
const CHUNK_OP_STATUS CHUNK_OP_STATUS_MIN = CHUNK_OP_STATUS_SUCCESS;
const CHUNK_OP_STATUS CHUNK_OP_STATUS_MAX = CHUNK_OP_STATUS_FAILURE_UNKNOWN;
const int CHUNK_OP_STATUS_ARRAYSIZE = CHUNK_OP_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHUNK_OP_STATUS_descriptor();
inline const ::std::string& CHUNK_OP_STATUS_Name(CHUNK_OP_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHUNK_OP_STATUS_descriptor(), value);
}
inline bool CHUNK_OP_STATUS_Parse(
    const ::std::string& name, CHUNK_OP_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHUNK_OP_STATUS>(
    CHUNK_OP_STATUS_descriptor(), name, value);
}
enum CHUNK_SNAPSHOT_OP_TYPE {
  CHUNK_SNAPSHOT_OP_CREATE = 0,
  CHUNK_SNAPSHOT_OP_DELETE = 1,
  CHUNK_SNAPSHOT_OP_READ = 2
};
bool CHUNK_SNAPSHOT_OP_TYPE_IsValid(int value);
const CHUNK_SNAPSHOT_OP_TYPE CHUNK_SNAPSHOT_OP_TYPE_MIN = CHUNK_SNAPSHOT_OP_CREATE;
const CHUNK_SNAPSHOT_OP_TYPE CHUNK_SNAPSHOT_OP_TYPE_MAX = CHUNK_SNAPSHOT_OP_READ;
const int CHUNK_SNAPSHOT_OP_TYPE_ARRAYSIZE = CHUNK_SNAPSHOT_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHUNK_SNAPSHOT_OP_TYPE_descriptor();
inline const ::std::string& CHUNK_SNAPSHOT_OP_TYPE_Name(CHUNK_SNAPSHOT_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHUNK_SNAPSHOT_OP_TYPE_descriptor(), value);
}
inline bool CHUNK_SNAPSHOT_OP_TYPE_Parse(
    const ::std::string& name, CHUNK_SNAPSHOT_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHUNK_SNAPSHOT_OP_TYPE>(
    CHUNK_SNAPSHOT_OP_TYPE_descriptor(), name, value);
}
enum CHUNK_SNAPSHOT_OP_STATUS {
  CHUNK_SNAPSHOT_OP_STATUS_SUCCESS = 0,
  CHUNK_SNAPSHOT_OP_STATUS_REDIRECTED = 1,
  CHUNK_SNAPSHOT_OP_STATUS_DISK_FAIL = 2,
  CHUNK_SNAPSHOT_OP_STATUS_CRC_FAIL = 3,
  CHUNK_SNAPSHOT_OP_STATUS_INVALID_REQUEST = 4,
  CHUNK_SNAPSHOT_OP_STATUS_NOSPACE = 5,
  CHUNK_SNAPSHOT_OP_STATUS_COPYSET_NOTEXIST = 6,
  CHUNK_SNAPSHOT_OP_STATUS_FAILURE_UNKNOWN = 7
};
bool CHUNK_SNAPSHOT_OP_STATUS_IsValid(int value);
const CHUNK_SNAPSHOT_OP_STATUS CHUNK_SNAPSHOT_OP_STATUS_MIN = CHUNK_SNAPSHOT_OP_STATUS_SUCCESS;
const CHUNK_SNAPSHOT_OP_STATUS CHUNK_SNAPSHOT_OP_STATUS_MAX = CHUNK_SNAPSHOT_OP_STATUS_FAILURE_UNKNOWN;
const int CHUNK_SNAPSHOT_OP_STATUS_ARRAYSIZE = CHUNK_SNAPSHOT_OP_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHUNK_SNAPSHOT_OP_STATUS_descriptor();
inline const ::std::string& CHUNK_SNAPSHOT_OP_STATUS_Name(CHUNK_SNAPSHOT_OP_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHUNK_SNAPSHOT_OP_STATUS_descriptor(), value);
}
inline bool CHUNK_SNAPSHOT_OP_STATUS_Parse(
    const ::std::string& name, CHUNK_SNAPSHOT_OP_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHUNK_SNAPSHOT_OP_STATUS>(
    CHUNK_SNAPSHOT_OP_STATUS_descriptor(), name, value);
}
// ===================================================================

class QosRequestParas : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.QosRequestParas) */ {
 public:
  QosRequestParas();
  virtual ~QosRequestParas();

  QosRequestParas(const QosRequestParas& from);

  inline QosRequestParas& operator=(const QosRequestParas& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QosRequestParas(QosRequestParas&& from) noexcept
    : QosRequestParas() {
    *this = ::std::move(from);
  }

  inline QosRequestParas& operator=(QosRequestParas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QosRequestParas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QosRequestParas* internal_default_instance() {
    return reinterpret_cast<const QosRequestParas*>(
               &_QosRequestParas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(QosRequestParas* other);
  friend void swap(QosRequestParas& a, QosRequestParas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QosRequestParas* New() const final {
    return CreateMaybeMessage<QosRequestParas>(NULL);
  }

  QosRequestParas* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QosRequestParas>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QosRequestParas& from);
  void MergeFrom(const QosRequestParas& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosRequestParas* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 clientId = 1;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::uint32 clientid() const;
  void set_clientid(::google::protobuf::uint32 value);

  // optional int32 dmclockDelta = 2;
  bool has_dmclockdelta() const;
  void clear_dmclockdelta();
  static const int kDmclockDeltaFieldNumber = 2;
  ::google::protobuf::int32 dmclockdelta() const;
  void set_dmclockdelta(::google::protobuf::int32 value);

  // optional int32 dmclockRho = 3;
  bool has_dmclockrho() const;
  void clear_dmclockrho();
  static const int kDmclockRhoFieldNumber = 3;
  ::google::protobuf::int32 dmclockrho() const;
  void set_dmclockrho(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.QosRequestParas)
 private:
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_dmclockdelta();
  void clear_has_dmclockdelta();
  void set_has_dmclockrho();
  void clear_has_dmclockrho();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 clientid_;
  ::google::protobuf::int32 dmclockdelta_;
  ::google::protobuf::int32 dmclockrho_;
  friend struct ::protobuf_chunk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QosResponseParas : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.QosResponseParas) */ {
 public:
  QosResponseParas();
  virtual ~QosResponseParas();

  QosResponseParas(const QosResponseParas& from);

  inline QosResponseParas& operator=(const QosResponseParas& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QosResponseParas(QosResponseParas&& from) noexcept
    : QosResponseParas() {
    *this = ::std::move(from);
  }

  inline QosResponseParas& operator=(QosResponseParas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QosResponseParas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QosResponseParas* internal_default_instance() {
    return reinterpret_cast<const QosResponseParas*>(
               &_QosResponseParas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(QosResponseParas* other);
  friend void swap(QosResponseParas& a, QosResponseParas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QosResponseParas* New() const final {
    return CreateMaybeMessage<QosResponseParas>(NULL);
  }

  QosResponseParas* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QosResponseParas>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QosResponseParas& from);
  void MergeFrom(const QosResponseParas& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QosResponseParas* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 phase = 1;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::google::protobuf::int32 phase() const;
  void set_phase(::google::protobuf::int32 value);

  // optional int32 cost = 2;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 2;
  ::google::protobuf::int32 cost() const;
  void set_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.QosResponseParas)
 private:
  void set_has_phase();
  void clear_has_phase();
  void set_has_cost();
  void clear_has_cost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 phase_;
  ::google::protobuf::int32 cost_;
  friend struct ::protobuf_chunk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ChunkRequest) */ {
 public:
  ChunkRequest();
  virtual ~ChunkRequest();

  ChunkRequest(const ChunkRequest& from);

  inline ChunkRequest& operator=(const ChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkRequest(ChunkRequest&& from) noexcept
    : ChunkRequest() {
    *this = ::std::move(from);
  }

  inline ChunkRequest& operator=(ChunkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkRequest* internal_default_instance() {
    return reinterpret_cast<const ChunkRequest*>(
               &_ChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ChunkRequest* other);
  friend void swap(ChunkRequest& a, ChunkRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkRequest* New() const final {
    return CreateMaybeMessage<ChunkRequest>(NULL);
  }

  ChunkRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkRequest& from);
  void MergeFrom(const ChunkRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .curve.chunkserver.QosRequestParas deltaRho = 8;
  bool has_deltarho() const;
  void clear_deltarho();
  static const int kDeltaRhoFieldNumber = 8;
  private:
  const ::curve::chunkserver::QosRequestParas& _internal_deltarho() const;
  public:
  const ::curve::chunkserver::QosRequestParas& deltarho() const;
  ::curve::chunkserver::QosRequestParas* release_deltarho();
  ::curve::chunkserver::QosRequestParas* mutable_deltarho();
  void set_allocated_deltarho(::curve::chunkserver::QosRequestParas* deltarho);

  // required .curve.chunkserver.CHUNK_OP_TYPE opType = 1;
  bool has_optype() const;
  void clear_optype();
  static const int kOpTypeFieldNumber = 1;
  ::curve::chunkserver::CHUNK_OP_TYPE optype() const;
  void set_optype(::curve::chunkserver::CHUNK_OP_TYPE value);

  // required uint32 logicPoolId = 2;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 2;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint64 chunkId = 4;
  bool has_chunkid() const;
  void clear_chunkid();
  static const int kChunkIdFieldNumber = 4;
  ::google::protobuf::uint64 chunkid() const;
  void set_chunkid(::google::protobuf::uint64 value);

  // required uint32 copysetId = 3;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 3;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // optional uint32 offset = 6;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 6;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // optional uint64 committedIndex = 5;
  bool has_committedindex() const;
  void clear_committedindex();
  static const int kCommittedIndexFieldNumber = 5;
  ::google::protobuf::uint64 committedindex() const;
  void set_committedindex(::google::protobuf::uint64 value);

  // optional uint32 size = 7;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 7;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ChunkRequest)
 private:
  void set_has_optype();
  void clear_has_optype();
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();
  void set_has_chunkid();
  void clear_has_chunkid();
  void set_has_committedindex();
  void clear_has_committedindex();
  void set_has_offset();
  void clear_has_offset();
  void set_has_size();
  void clear_has_size();
  void set_has_deltarho();
  void clear_has_deltarho();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::curve::chunkserver::QosRequestParas* deltarho_;
  int optype_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint64 chunkid_;
  ::google::protobuf::uint32 copysetid_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint64 committedindex_;
  ::google::protobuf::uint32 size_;
  friend struct ::protobuf_chunk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ChunkResponse) */ {
 public:
  ChunkResponse();
  virtual ~ChunkResponse();

  ChunkResponse(const ChunkResponse& from);

  inline ChunkResponse& operator=(const ChunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkResponse(ChunkResponse&& from) noexcept
    : ChunkResponse() {
    *this = ::std::move(from);
  }

  inline ChunkResponse& operator=(ChunkResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkResponse* internal_default_instance() {
    return reinterpret_cast<const ChunkResponse*>(
               &_ChunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ChunkResponse* other);
  friend void swap(ChunkResponse& a, ChunkResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkResponse* New() const final {
    return CreateMaybeMessage<ChunkResponse>(NULL);
  }

  ChunkResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkResponse& from);
  void MergeFrom(const ChunkResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string redirect = 2;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // optional .curve.chunkserver.QosResponseParas phaseCost = 4;
  bool has_phasecost() const;
  void clear_phasecost();
  static const int kPhaseCostFieldNumber = 4;
  private:
  const ::curve::chunkserver::QosResponseParas& _internal_phasecost() const;
  public:
  const ::curve::chunkserver::QosResponseParas& phasecost() const;
  ::curve::chunkserver::QosResponseParas* release_phasecost();
  ::curve::chunkserver::QosResponseParas* mutable_phasecost();
  void set_allocated_phasecost(::curve::chunkserver::QosResponseParas* phasecost);

  // optional uint64 committedIndex = 3;
  bool has_committedindex() const;
  void clear_committedindex();
  static const int kCommittedIndexFieldNumber = 3;
  ::google::protobuf::uint64 committedindex() const;
  void set_committedindex(::google::protobuf::uint64 value);

  // required .curve.chunkserver.CHUNK_OP_STATUS status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::curve::chunkserver::CHUNK_OP_STATUS status() const;
  void set_status(::curve::chunkserver::CHUNK_OP_STATUS value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ChunkResponse)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_redirect();
  void clear_has_redirect();
  void set_has_committedindex();
  void clear_has_committedindex();
  void set_has_phasecost();
  void clear_has_phasecost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::curve::chunkserver::QosResponseParas* phasecost_;
  ::google::protobuf::uint64 committedindex_;
  int status_;
  friend struct ::protobuf_chunk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkSnapshotRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ChunkSnapshotRequest) */ {
 public:
  ChunkSnapshotRequest();
  virtual ~ChunkSnapshotRequest();

  ChunkSnapshotRequest(const ChunkSnapshotRequest& from);

  inline ChunkSnapshotRequest& operator=(const ChunkSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkSnapshotRequest(ChunkSnapshotRequest&& from) noexcept
    : ChunkSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline ChunkSnapshotRequest& operator=(ChunkSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const ChunkSnapshotRequest*>(
               &_ChunkSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ChunkSnapshotRequest* other);
  friend void swap(ChunkSnapshotRequest& a, ChunkSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkSnapshotRequest* New() const final {
    return CreateMaybeMessage<ChunkSnapshotRequest>(NULL);
  }

  ChunkSnapshotRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkSnapshotRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkSnapshotRequest& from);
  void MergeFrom(const ChunkSnapshotRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkSnapshotRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .curve.chunkserver.QosRequestParas deltaRho = 7;
  bool has_deltarho() const;
  void clear_deltarho();
  static const int kDeltaRhoFieldNumber = 7;
  private:
  const ::curve::chunkserver::QosRequestParas& _internal_deltarho() const;
  public:
  const ::curve::chunkserver::QosRequestParas& deltarho() const;
  ::curve::chunkserver::QosRequestParas* release_deltarho();
  ::curve::chunkserver::QosRequestParas* mutable_deltarho();
  void set_allocated_deltarho(::curve::chunkserver::QosRequestParas* deltarho);

  // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_TYPE opType = 1;
  bool has_optype() const;
  void clear_optype();
  static const int kOpTypeFieldNumber = 1;
  ::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE optype() const;
  void set_optype(::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE value);

  // required uint32 logicPoolId = 2;
  bool has_logicpoolid() const;
  void clear_logicpoolid();
  static const int kLogicPoolIdFieldNumber = 2;
  ::google::protobuf::uint32 logicpoolid() const;
  void set_logicpoolid(::google::protobuf::uint32 value);

  // required uint64 chunkId = 4;
  bool has_chunkid() const;
  void clear_chunkid();
  static const int kChunkIdFieldNumber = 4;
  ::google::protobuf::uint64 chunkid() const;
  void set_chunkid(::google::protobuf::uint64 value);

  // required uint32 copysetId = 3;
  bool has_copysetid() const;
  void clear_copysetid();
  static const int kCopysetIdFieldNumber = 3;
  ::google::protobuf::uint32 copysetid() const;
  void set_copysetid(::google::protobuf::uint32 value);

  // optional uint32 size = 6;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 6;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // required uint64 snapshotId = 5;
  bool has_snapshotid() const;
  void clear_snapshotid();
  static const int kSnapshotIdFieldNumber = 5;
  ::google::protobuf::uint64 snapshotid() const;
  void set_snapshotid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ChunkSnapshotRequest)
 private:
  void set_has_optype();
  void clear_has_optype();
  void set_has_logicpoolid();
  void clear_has_logicpoolid();
  void set_has_copysetid();
  void clear_has_copysetid();
  void set_has_chunkid();
  void clear_has_chunkid();
  void set_has_snapshotid();
  void clear_has_snapshotid();
  void set_has_size();
  void clear_has_size();
  void set_has_deltarho();
  void clear_has_deltarho();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::curve::chunkserver::QosRequestParas* deltarho_;
  int optype_;
  ::google::protobuf::uint32 logicpoolid_;
  ::google::protobuf::uint64 chunkid_;
  ::google::protobuf::uint32 copysetid_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint64 snapshotid_;
  friend struct ::protobuf_chunk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkSnapshotResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:curve.chunkserver.ChunkSnapshotResponse) */ {
 public:
  ChunkSnapshotResponse();
  virtual ~ChunkSnapshotResponse();

  ChunkSnapshotResponse(const ChunkSnapshotResponse& from);

  inline ChunkSnapshotResponse& operator=(const ChunkSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkSnapshotResponse(ChunkSnapshotResponse&& from) noexcept
    : ChunkSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline ChunkSnapshotResponse& operator=(ChunkSnapshotResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const ChunkSnapshotResponse*>(
               &_ChunkSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ChunkSnapshotResponse* other);
  friend void swap(ChunkSnapshotResponse& a, ChunkSnapshotResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkSnapshotResponse* New() const final {
    return CreateMaybeMessage<ChunkSnapshotResponse>(NULL);
  }

  ChunkSnapshotResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkSnapshotResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkSnapshotResponse& from);
  void MergeFrom(const ChunkSnapshotResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkSnapshotResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string redirect = 2;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // optional .curve.chunkserver.QosResponseParas phaseCost = 3;
  bool has_phasecost() const;
  void clear_phasecost();
  static const int kPhaseCostFieldNumber = 3;
  private:
  const ::curve::chunkserver::QosResponseParas& _internal_phasecost() const;
  public:
  const ::curve::chunkserver::QosResponseParas& phasecost() const;
  ::curve::chunkserver::QosResponseParas* release_phasecost();
  ::curve::chunkserver::QosResponseParas* mutable_phasecost();
  void set_allocated_phasecost(::curve::chunkserver::QosResponseParas* phasecost);

  // required .curve.chunkserver.CHUNK_SNAPSHOT_OP_STATUS status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS status() const;
  void set_status(::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS value);

  // @@protoc_insertion_point(class_scope:curve.chunkserver.ChunkSnapshotResponse)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_redirect();
  void clear_has_redirect();
  void set_has_phasecost();
  void clear_has_phasecost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::curve::chunkserver::QosResponseParas* phasecost_;
  int status_;
  friend struct ::protobuf_chunk_2eproto::TableStruct;
};
// ===================================================================

class ChunkService_Stub;

class ChunkService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ChunkService() {};
 public:
  virtual ~ChunkService();

  typedef ChunkService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void DeleteChunk(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkRequest* request,
                       ::curve::chunkserver::ChunkResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ReadChunk(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkRequest* request,
                       ::curve::chunkserver::ChunkResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void WriteChunk(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkRequest* request,
                       ::curve::chunkserver::ChunkResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateChunkSnapshot(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkSnapshotRequest* request,
                       ::curve::chunkserver::ChunkSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteChunkSnapshot(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkSnapshotRequest* request,
                       ::curve::chunkserver::ChunkSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ReadChunkSnapshot(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkSnapshotRequest* request,
                       ::curve::chunkserver::ChunkSnapshotResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChunkService);
};

class ChunkService_Stub : public ChunkService {
 public:
  ChunkService_Stub(::google::protobuf::RpcChannel* channel);
  ChunkService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ChunkService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ChunkService ------------------------------------------

  void DeleteChunk(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkRequest* request,
                       ::curve::chunkserver::ChunkResponse* response,
                       ::google::protobuf::Closure* done);
  void ReadChunk(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkRequest* request,
                       ::curve::chunkserver::ChunkResponse* response,
                       ::google::protobuf::Closure* done);
  void WriteChunk(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkRequest* request,
                       ::curve::chunkserver::ChunkResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateChunkSnapshot(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkSnapshotRequest* request,
                       ::curve::chunkserver::ChunkSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteChunkSnapshot(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkSnapshotRequest* request,
                       ::curve::chunkserver::ChunkSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  void ReadChunkSnapshot(::google::protobuf::RpcController* controller,
                       const ::curve::chunkserver::ChunkSnapshotRequest* request,
                       ::curve::chunkserver::ChunkSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ChunkService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QosRequestParas

// optional uint32 clientId = 1;
inline bool QosRequestParas::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QosRequestParas::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QosRequestParas::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QosRequestParas::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 QosRequestParas::clientid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.QosRequestParas.clientId)
  return clientid_;
}
inline void QosRequestParas::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.QosRequestParas.clientId)
}

// optional int32 dmclockDelta = 2;
inline bool QosRequestParas::has_dmclockdelta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QosRequestParas::set_has_dmclockdelta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QosRequestParas::clear_has_dmclockdelta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QosRequestParas::clear_dmclockdelta() {
  dmclockdelta_ = 0;
  clear_has_dmclockdelta();
}
inline ::google::protobuf::int32 QosRequestParas::dmclockdelta() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.QosRequestParas.dmclockDelta)
  return dmclockdelta_;
}
inline void QosRequestParas::set_dmclockdelta(::google::protobuf::int32 value) {
  set_has_dmclockdelta();
  dmclockdelta_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.QosRequestParas.dmclockDelta)
}

// optional int32 dmclockRho = 3;
inline bool QosRequestParas::has_dmclockrho() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QosRequestParas::set_has_dmclockrho() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QosRequestParas::clear_has_dmclockrho() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QosRequestParas::clear_dmclockrho() {
  dmclockrho_ = 0;
  clear_has_dmclockrho();
}
inline ::google::protobuf::int32 QosRequestParas::dmclockrho() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.QosRequestParas.dmclockRho)
  return dmclockrho_;
}
inline void QosRequestParas::set_dmclockrho(::google::protobuf::int32 value) {
  set_has_dmclockrho();
  dmclockrho_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.QosRequestParas.dmclockRho)
}

// -------------------------------------------------------------------

// QosResponseParas

// optional int32 phase = 1;
inline bool QosResponseParas::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QosResponseParas::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QosResponseParas::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QosResponseParas::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::google::protobuf::int32 QosResponseParas::phase() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.QosResponseParas.phase)
  return phase_;
}
inline void QosResponseParas::set_phase(::google::protobuf::int32 value) {
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.QosResponseParas.phase)
}

// optional int32 cost = 2;
inline bool QosResponseParas::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QosResponseParas::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QosResponseParas::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QosResponseParas::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
inline ::google::protobuf::int32 QosResponseParas::cost() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.QosResponseParas.cost)
  return cost_;
}
inline void QosResponseParas::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.QosResponseParas.cost)
}

// -------------------------------------------------------------------

// ChunkRequest

// required .curve.chunkserver.CHUNK_OP_TYPE opType = 1;
inline bool ChunkRequest::has_optype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkRequest::set_has_optype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkRequest::clear_has_optype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkRequest::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::curve::chunkserver::CHUNK_OP_TYPE ChunkRequest::optype() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkRequest.opType)
  return static_cast< ::curve::chunkserver::CHUNK_OP_TYPE >(optype_);
}
inline void ChunkRequest::set_optype(::curve::chunkserver::CHUNK_OP_TYPE value) {
  assert(::curve::chunkserver::CHUNK_OP_TYPE_IsValid(value));
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkRequest.opType)
}

// required uint32 logicPoolId = 2;
inline bool ChunkRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 ChunkRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkRequest.logicPoolId)
  return logicpoolid_;
}
inline void ChunkRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkRequest.logicPoolId)
}

// required uint32 copysetId = 3;
inline bool ChunkRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChunkRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChunkRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChunkRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 ChunkRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkRequest.copysetId)
  return copysetid_;
}
inline void ChunkRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkRequest.copysetId)
}

// required uint64 chunkId = 4;
inline bool ChunkRequest::has_chunkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChunkRequest::set_has_chunkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChunkRequest::clear_has_chunkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChunkRequest::clear_chunkid() {
  chunkid_ = GOOGLE_ULONGLONG(0);
  clear_has_chunkid();
}
inline ::google::protobuf::uint64 ChunkRequest::chunkid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkRequest.chunkId)
  return chunkid_;
}
inline void ChunkRequest::set_chunkid(::google::protobuf::uint64 value) {
  set_has_chunkid();
  chunkid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkRequest.chunkId)
}

// optional uint64 committedIndex = 5;
inline bool ChunkRequest::has_committedindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChunkRequest::set_has_committedindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChunkRequest::clear_has_committedindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChunkRequest::clear_committedindex() {
  committedindex_ = GOOGLE_ULONGLONG(0);
  clear_has_committedindex();
}
inline ::google::protobuf::uint64 ChunkRequest::committedindex() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkRequest.committedIndex)
  return committedindex_;
}
inline void ChunkRequest::set_committedindex(::google::protobuf::uint64 value) {
  set_has_committedindex();
  committedindex_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkRequest.committedIndex)
}

// optional uint32 offset = 6;
inline bool ChunkRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChunkRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChunkRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChunkRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 ChunkRequest::offset() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkRequest.offset)
  return offset_;
}
inline void ChunkRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkRequest.offset)
}

// optional uint32 size = 7;
inline bool ChunkRequest::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChunkRequest::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChunkRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChunkRequest::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 ChunkRequest::size() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkRequest.size)
  return size_;
}
inline void ChunkRequest::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkRequest.size)
}

// optional .curve.chunkserver.QosRequestParas deltaRho = 8;
inline bool ChunkRequest::has_deltarho() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkRequest::set_has_deltarho() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkRequest::clear_has_deltarho() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkRequest::clear_deltarho() {
  if (deltarho_ != NULL) deltarho_->Clear();
  clear_has_deltarho();
}
inline const ::curve::chunkserver::QosRequestParas& ChunkRequest::_internal_deltarho() const {
  return *deltarho_;
}
inline const ::curve::chunkserver::QosRequestParas& ChunkRequest::deltarho() const {
  const ::curve::chunkserver::QosRequestParas* p = deltarho_;
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkRequest.deltaRho)
  return p != NULL ? *p : *reinterpret_cast<const ::curve::chunkserver::QosRequestParas*>(
      &::curve::chunkserver::_QosRequestParas_default_instance_);
}
inline ::curve::chunkserver::QosRequestParas* ChunkRequest::release_deltarho() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ChunkRequest.deltaRho)
  clear_has_deltarho();
  ::curve::chunkserver::QosRequestParas* temp = deltarho_;
  deltarho_ = NULL;
  return temp;
}
inline ::curve::chunkserver::QosRequestParas* ChunkRequest::mutable_deltarho() {
  set_has_deltarho();
  if (deltarho_ == NULL) {
    auto* p = CreateMaybeMessage<::curve::chunkserver::QosRequestParas>(GetArenaNoVirtual());
    deltarho_ = p;
  }
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChunkRequest.deltaRho)
  return deltarho_;
}
inline void ChunkRequest::set_allocated_deltarho(::curve::chunkserver::QosRequestParas* deltarho) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deltarho_;
  }
  if (deltarho) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deltarho = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deltarho, submessage_arena);
    }
    set_has_deltarho();
  } else {
    clear_has_deltarho();
  }
  deltarho_ = deltarho;
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ChunkRequest.deltaRho)
}

// -------------------------------------------------------------------

// ChunkResponse

// required .curve.chunkserver.CHUNK_OP_STATUS status = 1;
inline bool ChunkResponse::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChunkResponse::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChunkResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChunkResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::curve::chunkserver::CHUNK_OP_STATUS ChunkResponse::status() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkResponse.status)
  return static_cast< ::curve::chunkserver::CHUNK_OP_STATUS >(status_);
}
inline void ChunkResponse::set_status(::curve::chunkserver::CHUNK_OP_STATUS value) {
  assert(::curve::chunkserver::CHUNK_OP_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkResponse.status)
}

// optional string redirect = 2;
inline bool ChunkResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& ChunkResponse::redirect() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkResponse.redirect)
  return redirect_.GetNoArena();
}
inline void ChunkResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkResponse.redirect)
}
#if LANG_CXX11
inline void ChunkResponse::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.ChunkResponse.redirect)
}
#endif
inline void ChunkResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ChunkResponse.redirect)
}
inline void ChunkResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ChunkResponse.redirect)
}
inline ::std::string* ChunkResponse::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChunkResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChunkResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ChunkResponse.redirect)
  if (!has_redirect()) {
    return NULL;
  }
  clear_has_redirect();
  return redirect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChunkResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ChunkResponse.redirect)
}

// optional uint64 committedIndex = 3;
inline bool ChunkResponse::has_committedindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkResponse::set_has_committedindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkResponse::clear_has_committedindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkResponse::clear_committedindex() {
  committedindex_ = GOOGLE_ULONGLONG(0);
  clear_has_committedindex();
}
inline ::google::protobuf::uint64 ChunkResponse::committedindex() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkResponse.committedIndex)
  return committedindex_;
}
inline void ChunkResponse::set_committedindex(::google::protobuf::uint64 value) {
  set_has_committedindex();
  committedindex_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkResponse.committedIndex)
}

// optional .curve.chunkserver.QosResponseParas phaseCost = 4;
inline bool ChunkResponse::has_phasecost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkResponse::set_has_phasecost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkResponse::clear_has_phasecost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkResponse::clear_phasecost() {
  if (phasecost_ != NULL) phasecost_->Clear();
  clear_has_phasecost();
}
inline const ::curve::chunkserver::QosResponseParas& ChunkResponse::_internal_phasecost() const {
  return *phasecost_;
}
inline const ::curve::chunkserver::QosResponseParas& ChunkResponse::phasecost() const {
  const ::curve::chunkserver::QosResponseParas* p = phasecost_;
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkResponse.phaseCost)
  return p != NULL ? *p : *reinterpret_cast<const ::curve::chunkserver::QosResponseParas*>(
      &::curve::chunkserver::_QosResponseParas_default_instance_);
}
inline ::curve::chunkserver::QosResponseParas* ChunkResponse::release_phasecost() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ChunkResponse.phaseCost)
  clear_has_phasecost();
  ::curve::chunkserver::QosResponseParas* temp = phasecost_;
  phasecost_ = NULL;
  return temp;
}
inline ::curve::chunkserver::QosResponseParas* ChunkResponse::mutable_phasecost() {
  set_has_phasecost();
  if (phasecost_ == NULL) {
    auto* p = CreateMaybeMessage<::curve::chunkserver::QosResponseParas>(GetArenaNoVirtual());
    phasecost_ = p;
  }
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChunkResponse.phaseCost)
  return phasecost_;
}
inline void ChunkResponse::set_allocated_phasecost(::curve::chunkserver::QosResponseParas* phasecost) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete phasecost_;
  }
  if (phasecost) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      phasecost = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phasecost, submessage_arena);
    }
    set_has_phasecost();
  } else {
    clear_has_phasecost();
  }
  phasecost_ = phasecost;
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ChunkResponse.phaseCost)
}

// -------------------------------------------------------------------

// ChunkSnapshotRequest

// required .curve.chunkserver.CHUNK_SNAPSHOT_OP_TYPE opType = 1;
inline bool ChunkSnapshotRequest::has_optype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkSnapshotRequest::set_has_optype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkSnapshotRequest::clear_has_optype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkSnapshotRequest::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE ChunkSnapshotRequest::optype() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotRequest.opType)
  return static_cast< ::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE >(optype_);
}
inline void ChunkSnapshotRequest::set_optype(::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE value) {
  assert(::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE_IsValid(value));
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkSnapshotRequest.opType)
}

// required uint32 logicPoolId = 2;
inline bool ChunkSnapshotRequest::has_logicpoolid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkSnapshotRequest::set_has_logicpoolid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkSnapshotRequest::clear_has_logicpoolid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkSnapshotRequest::clear_logicpoolid() {
  logicpoolid_ = 0u;
  clear_has_logicpoolid();
}
inline ::google::protobuf::uint32 ChunkSnapshotRequest::logicpoolid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotRequest.logicPoolId)
  return logicpoolid_;
}
inline void ChunkSnapshotRequest::set_logicpoolid(::google::protobuf::uint32 value) {
  set_has_logicpoolid();
  logicpoolid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkSnapshotRequest.logicPoolId)
}

// required uint32 copysetId = 3;
inline bool ChunkSnapshotRequest::has_copysetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChunkSnapshotRequest::set_has_copysetid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChunkSnapshotRequest::clear_has_copysetid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChunkSnapshotRequest::clear_copysetid() {
  copysetid_ = 0u;
  clear_has_copysetid();
}
inline ::google::protobuf::uint32 ChunkSnapshotRequest::copysetid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotRequest.copysetId)
  return copysetid_;
}
inline void ChunkSnapshotRequest::set_copysetid(::google::protobuf::uint32 value) {
  set_has_copysetid();
  copysetid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkSnapshotRequest.copysetId)
}

// required uint64 chunkId = 4;
inline bool ChunkSnapshotRequest::has_chunkid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChunkSnapshotRequest::set_has_chunkid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChunkSnapshotRequest::clear_has_chunkid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChunkSnapshotRequest::clear_chunkid() {
  chunkid_ = GOOGLE_ULONGLONG(0);
  clear_has_chunkid();
}
inline ::google::protobuf::uint64 ChunkSnapshotRequest::chunkid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotRequest.chunkId)
  return chunkid_;
}
inline void ChunkSnapshotRequest::set_chunkid(::google::protobuf::uint64 value) {
  set_has_chunkid();
  chunkid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkSnapshotRequest.chunkId)
}

// required uint64 snapshotId = 5;
inline bool ChunkSnapshotRequest::has_snapshotid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChunkSnapshotRequest::set_has_snapshotid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChunkSnapshotRequest::clear_has_snapshotid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChunkSnapshotRequest::clear_snapshotid() {
  snapshotid_ = GOOGLE_ULONGLONG(0);
  clear_has_snapshotid();
}
inline ::google::protobuf::uint64 ChunkSnapshotRequest::snapshotid() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotRequest.snapshotId)
  return snapshotid_;
}
inline void ChunkSnapshotRequest::set_snapshotid(::google::protobuf::uint64 value) {
  set_has_snapshotid();
  snapshotid_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkSnapshotRequest.snapshotId)
}

// optional uint32 size = 6;
inline bool ChunkSnapshotRequest::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChunkSnapshotRequest::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChunkSnapshotRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChunkSnapshotRequest::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 ChunkSnapshotRequest::size() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotRequest.size)
  return size_;
}
inline void ChunkSnapshotRequest::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkSnapshotRequest.size)
}

// optional .curve.chunkserver.QosRequestParas deltaRho = 7;
inline bool ChunkSnapshotRequest::has_deltarho() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkSnapshotRequest::set_has_deltarho() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkSnapshotRequest::clear_has_deltarho() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkSnapshotRequest::clear_deltarho() {
  if (deltarho_ != NULL) deltarho_->Clear();
  clear_has_deltarho();
}
inline const ::curve::chunkserver::QosRequestParas& ChunkSnapshotRequest::_internal_deltarho() const {
  return *deltarho_;
}
inline const ::curve::chunkserver::QosRequestParas& ChunkSnapshotRequest::deltarho() const {
  const ::curve::chunkserver::QosRequestParas* p = deltarho_;
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotRequest.deltaRho)
  return p != NULL ? *p : *reinterpret_cast<const ::curve::chunkserver::QosRequestParas*>(
      &::curve::chunkserver::_QosRequestParas_default_instance_);
}
inline ::curve::chunkserver::QosRequestParas* ChunkSnapshotRequest::release_deltarho() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ChunkSnapshotRequest.deltaRho)
  clear_has_deltarho();
  ::curve::chunkserver::QosRequestParas* temp = deltarho_;
  deltarho_ = NULL;
  return temp;
}
inline ::curve::chunkserver::QosRequestParas* ChunkSnapshotRequest::mutable_deltarho() {
  set_has_deltarho();
  if (deltarho_ == NULL) {
    auto* p = CreateMaybeMessage<::curve::chunkserver::QosRequestParas>(GetArenaNoVirtual());
    deltarho_ = p;
  }
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChunkSnapshotRequest.deltaRho)
  return deltarho_;
}
inline void ChunkSnapshotRequest::set_allocated_deltarho(::curve::chunkserver::QosRequestParas* deltarho) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deltarho_;
  }
  if (deltarho) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deltarho = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deltarho, submessage_arena);
    }
    set_has_deltarho();
  } else {
    clear_has_deltarho();
  }
  deltarho_ = deltarho;
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ChunkSnapshotRequest.deltaRho)
}

// -------------------------------------------------------------------

// ChunkSnapshotResponse

// required .curve.chunkserver.CHUNK_SNAPSHOT_OP_STATUS status = 1;
inline bool ChunkSnapshotResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkSnapshotResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChunkSnapshotResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChunkSnapshotResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS ChunkSnapshotResponse::status() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotResponse.status)
  return static_cast< ::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS >(status_);
}
inline void ChunkSnapshotResponse::set_status(::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS value) {
  assert(::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkSnapshotResponse.status)
}

// optional string redirect = 2;
inline bool ChunkSnapshotResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChunkSnapshotResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChunkSnapshotResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChunkSnapshotResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect();
}
inline const ::std::string& ChunkSnapshotResponse::redirect() const {
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotResponse.redirect)
  return redirect_.GetNoArena();
}
inline void ChunkSnapshotResponse::set_redirect(const ::std::string& value) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:curve.chunkserver.ChunkSnapshotResponse.redirect)
}
#if LANG_CXX11
inline void ChunkSnapshotResponse::set_redirect(::std::string&& value) {
  set_has_redirect();
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:curve.chunkserver.ChunkSnapshotResponse.redirect)
}
#endif
inline void ChunkSnapshotResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:curve.chunkserver.ChunkSnapshotResponse.redirect)
}
inline void ChunkSnapshotResponse::set_redirect(const char* value, size_t size) {
  set_has_redirect();
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:curve.chunkserver.ChunkSnapshotResponse.redirect)
}
inline ::std::string* ChunkSnapshotResponse::mutable_redirect() {
  set_has_redirect();
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChunkSnapshotResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChunkSnapshotResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ChunkSnapshotResponse.redirect)
  if (!has_redirect()) {
    return NULL;
  }
  clear_has_redirect();
  return redirect_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChunkSnapshotResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ChunkSnapshotResponse.redirect)
}

// optional .curve.chunkserver.QosResponseParas phaseCost = 3;
inline bool ChunkSnapshotResponse::has_phasecost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkSnapshotResponse::set_has_phasecost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChunkSnapshotResponse::clear_has_phasecost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChunkSnapshotResponse::clear_phasecost() {
  if (phasecost_ != NULL) phasecost_->Clear();
  clear_has_phasecost();
}
inline const ::curve::chunkserver::QosResponseParas& ChunkSnapshotResponse::_internal_phasecost() const {
  return *phasecost_;
}
inline const ::curve::chunkserver::QosResponseParas& ChunkSnapshotResponse::phasecost() const {
  const ::curve::chunkserver::QosResponseParas* p = phasecost_;
  // @@protoc_insertion_point(field_get:curve.chunkserver.ChunkSnapshotResponse.phaseCost)
  return p != NULL ? *p : *reinterpret_cast<const ::curve::chunkserver::QosResponseParas*>(
      &::curve::chunkserver::_QosResponseParas_default_instance_);
}
inline ::curve::chunkserver::QosResponseParas* ChunkSnapshotResponse::release_phasecost() {
  // @@protoc_insertion_point(field_release:curve.chunkserver.ChunkSnapshotResponse.phaseCost)
  clear_has_phasecost();
  ::curve::chunkserver::QosResponseParas* temp = phasecost_;
  phasecost_ = NULL;
  return temp;
}
inline ::curve::chunkserver::QosResponseParas* ChunkSnapshotResponse::mutable_phasecost() {
  set_has_phasecost();
  if (phasecost_ == NULL) {
    auto* p = CreateMaybeMessage<::curve::chunkserver::QosResponseParas>(GetArenaNoVirtual());
    phasecost_ = p;
  }
  // @@protoc_insertion_point(field_mutable:curve.chunkserver.ChunkSnapshotResponse.phaseCost)
  return phasecost_;
}
inline void ChunkSnapshotResponse::set_allocated_phasecost(::curve::chunkserver::QosResponseParas* phasecost) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete phasecost_;
  }
  if (phasecost) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      phasecost = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phasecost, submessage_arena);
    }
    set_has_phasecost();
  } else {
    clear_has_phasecost();
  }
  phasecost_ = phasecost;
  // @@protoc_insertion_point(field_set_allocated:curve.chunkserver.ChunkSnapshotResponse.phaseCost)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunkserver
}  // namespace curve

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::curve::chunkserver::CHUNK_OP_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::CHUNK_OP_TYPE>() {
  return ::curve::chunkserver::CHUNK_OP_TYPE_descriptor();
}
template <> struct is_proto_enum< ::curve::chunkserver::CHUNK_OP_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::CHUNK_OP_STATUS>() {
  return ::curve::chunkserver::CHUNK_OP_STATUS_descriptor();
}
template <> struct is_proto_enum< ::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE>() {
  return ::curve::chunkserver::CHUNK_SNAPSHOT_OP_TYPE_descriptor();
}
template <> struct is_proto_enum< ::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS>() {
  return ::curve::chunkserver::CHUNK_SNAPSHOT_OP_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chunk_2eproto
